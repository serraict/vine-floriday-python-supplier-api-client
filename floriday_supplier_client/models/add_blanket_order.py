# coding: utf-8

"""
    Main - Floriday Suppliers API

    ÔªøEvery endpoint requires at least the `role:app` scope and the header `X-Api-Key` populated with your given API-key. Most endpoints also require an additional scope which is listed in their descriptions.  - üóù [Authorization server (staging)](https://idm.staging.floriday.io/oauth2/ausmw6b47z1BnlHkw0h7/.well-known/oauth-authorization-server) - üóù [Authorization server (live)](https://idm.floriday.io/oauth2/aus3testdcf2vyfs70i7/.well-known/oauth-authorization-server) - üìö [Documentation](https://developer.floriday.io/docs/welcome) - ‚ñ∂ [Coding screencast: getting started (NL)](https://www.youtube.com/watch?v=fdqzP7_Y_s8)  ---  _The current state of this version 2024v1 is **Main**._ * This version will be deprecated after October 2024. * This version will be removed after April 2025.  ---  üîó 2023v2: [Customers API](https://api.staging.floriday.io/customers-api-2023v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2023v2/swagger/index.html) üîó 2024v1: [Customers API](https://api.staging.floriday.io/customers-api-2024v1/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v1/swagger/index.html) üîó 2024v2: [Customers API](https://api.staging.floriday.io/customers-api-2024v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v2/swagger/index.html)   # noqa: E501

    OpenAPI spec version: 2024v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AddBlanketOrder(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'blanket_order_id': 'str',
        'contract_id': 'str',
        'delivery_date_time': 'datetime',
        'customer_organization_id': 'str',
        'carrier_organization_id': 'str',
        'blanket_order_lines': 'list[EditBlanketOrderLine]'
    }

    attribute_map = {
        'blanket_order_id': 'blanketOrderId',
        'contract_id': 'contractId',
        'delivery_date_time': 'deliveryDateTime',
        'customer_organization_id': 'customerOrganizationId',
        'carrier_organization_id': 'carrierOrganizationId',
        'blanket_order_lines': 'blanketOrderLines'
    }

    def __init__(self, blanket_order_id=None, contract_id=None, delivery_date_time=None, customer_organization_id=None, carrier_organization_id=None, blanket_order_lines=None):  # noqa: E501
        """AddBlanketOrder - a model defined in Swagger"""  # noqa: E501
        self._blanket_order_id = None
        self._contract_id = None
        self._delivery_date_time = None
        self._customer_organization_id = None
        self._carrier_organization_id = None
        self._blanket_order_lines = None
        self.discriminator = None
        self.blanket_order_id = blanket_order_id
        self.contract_id = contract_id
        self.delivery_date_time = delivery_date_time
        self.customer_organization_id = customer_organization_id
        if carrier_organization_id is not None:
            self.carrier_organization_id = carrier_organization_id
        self.blanket_order_lines = blanket_order_lines

    @property
    def blanket_order_id(self):
        """Gets the blanket_order_id of this AddBlanketOrder.  # noqa: E501


        :return: The blanket_order_id of this AddBlanketOrder.  # noqa: E501
        :rtype: str
        """
        return self._blanket_order_id

    @blanket_order_id.setter
    def blanket_order_id(self, blanket_order_id):
        """Sets the blanket_order_id of this AddBlanketOrder.


        :param blanket_order_id: The blanket_order_id of this AddBlanketOrder.  # noqa: E501
        :type: str
        """
        if blanket_order_id is None:
            raise ValueError("Invalid value for `blanket_order_id`, must not be `None`")  # noqa: E501

        self._blanket_order_id = blanket_order_id

    @property
    def contract_id(self):
        """Gets the contract_id of this AddBlanketOrder.  # noqa: E501


        :return: The contract_id of this AddBlanketOrder.  # noqa: E501
        :rtype: str
        """
        return self._contract_id

    @contract_id.setter
    def contract_id(self, contract_id):
        """Sets the contract_id of this AddBlanketOrder.


        :param contract_id: The contract_id of this AddBlanketOrder.  # noqa: E501
        :type: str
        """
        if contract_id is None:
            raise ValueError("Invalid value for `contract_id`, must not be `None`")  # noqa: E501

        self._contract_id = contract_id

    @property
    def delivery_date_time(self):
        """Gets the delivery_date_time of this AddBlanketOrder.  # noqa: E501


        :return: The delivery_date_time of this AddBlanketOrder.  # noqa: E501
        :rtype: datetime
        """
        return self._delivery_date_time

    @delivery_date_time.setter
    def delivery_date_time(self, delivery_date_time):
        """Sets the delivery_date_time of this AddBlanketOrder.


        :param delivery_date_time: The delivery_date_time of this AddBlanketOrder.  # noqa: E501
        :type: datetime
        """
        if delivery_date_time is None:
            raise ValueError("Invalid value for `delivery_date_time`, must not be `None`")  # noqa: E501

        self._delivery_date_time = delivery_date_time

    @property
    def customer_organization_id(self):
        """Gets the customer_organization_id of this AddBlanketOrder.  # noqa: E501


        :return: The customer_organization_id of this AddBlanketOrder.  # noqa: E501
        :rtype: str
        """
        return self._customer_organization_id

    @customer_organization_id.setter
    def customer_organization_id(self, customer_organization_id):
        """Sets the customer_organization_id of this AddBlanketOrder.


        :param customer_organization_id: The customer_organization_id of this AddBlanketOrder.  # noqa: E501
        :type: str
        """
        if customer_organization_id is None:
            raise ValueError("Invalid value for `customer_organization_id`, must not be `None`")  # noqa: E501

        self._customer_organization_id = customer_organization_id

    @property
    def carrier_organization_id(self):
        """Gets the carrier_organization_id of this AddBlanketOrder.  # noqa: E501


        :return: The carrier_organization_id of this AddBlanketOrder.  # noqa: E501
        :rtype: str
        """
        return self._carrier_organization_id

    @carrier_organization_id.setter
    def carrier_organization_id(self, carrier_organization_id):
        """Sets the carrier_organization_id of this AddBlanketOrder.


        :param carrier_organization_id: The carrier_organization_id of this AddBlanketOrder.  # noqa: E501
        :type: str
        """

        self._carrier_organization_id = carrier_organization_id

    @property
    def blanket_order_lines(self):
        """Gets the blanket_order_lines of this AddBlanketOrder.  # noqa: E501


        :return: The blanket_order_lines of this AddBlanketOrder.  # noqa: E501
        :rtype: list[EditBlanketOrderLine]
        """
        return self._blanket_order_lines

    @blanket_order_lines.setter
    def blanket_order_lines(self, blanket_order_lines):
        """Sets the blanket_order_lines of this AddBlanketOrder.


        :param blanket_order_lines: The blanket_order_lines of this AddBlanketOrder.  # noqa: E501
        :type: list[EditBlanketOrderLine]
        """
        if blanket_order_lines is None:
            raise ValueError("Invalid value for `blanket_order_lines`, must not be `None`")  # noqa: E501

        self._blanket_order_lines = blanket_order_lines

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddBlanketOrder, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddBlanketOrder):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
