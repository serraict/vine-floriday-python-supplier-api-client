# coding: utf-8

"""
    Main - Floriday Suppliers API

    ÔªøEvery endpoint requires at least the `role:app` scope and the header `X-Api-Key` populated with your given API-key. Most endpoints also require an additional scope which is listed in their descriptions.  - üóù [Authorization server (staging)](https://idm.staging.floriday.io/oauth2/ausmw6b47z1BnlHkw0h7/.well-known/oauth-authorization-server) - üóù [Authorization server (live)](https://idm.floriday.io/oauth2/aus3testdcf2vyfs70i7/.well-known/oauth-authorization-server) - üìö [Documentation](https://developer.floriday.io/docs/welcome) - ‚ñ∂ [Coding screencast: getting started (NL)](https://www.youtube.com/watch?v=fdqzP7_Y_s8)  ---  _The current state of this version 2024v1 is **Main**._ * This version will be deprecated after October 2024. * This version will be removed after April 2025.  ---  üîó 2023v2: [Customers API](https://api.staging.floriday.io/customers-api-2023v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2023v2/swagger/index.html) üîó 2024v1: [Customers API](https://api.staging.floriday.io/customers-api-2024v1/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v1/swagger/index.html) üîó 2024v2: [Customers API](https://api.staging.floriday.io/customers-api-2024v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v2/swagger/index.html)   # noqa: E501

    OpenAPI spec version: 2024v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FulfillmentRequestCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fulfillment_request_id': 'str',
        'batch_id': 'str',
        'number_of_packages': 'int',
        'sales_order_id': 'str',
        'additional_service_ids': 'list[str]',
        'package': 'Package',
        'pieces_per_package': 'int',
        'load_carrier': 'LoadCarrierType',
        'service_code': 'int',
        'packing_agent_organization_id': 'str'
    }

    attribute_map = {
        'fulfillment_request_id': 'fulfillmentRequestId',
        'batch_id': 'batchId',
        'number_of_packages': 'numberOfPackages',
        'sales_order_id': 'salesOrderId',
        'additional_service_ids': 'additionalServiceIds',
        'package': 'package',
        'pieces_per_package': 'piecesPerPackage',
        'load_carrier': 'loadCarrier',
        'service_code': 'serviceCode',
        'packing_agent_organization_id': 'packingAgentOrganizationId'
    }

    def __init__(self, fulfillment_request_id=None, batch_id=None, number_of_packages=None, sales_order_id=None, additional_service_ids=None, package=None, pieces_per_package=None, load_carrier=None, service_code=None, packing_agent_organization_id=None):  # noqa: E501
        """FulfillmentRequestCreate - a model defined in Swagger"""  # noqa: E501
        self._fulfillment_request_id = None
        self._batch_id = None
        self._number_of_packages = None
        self._sales_order_id = None
        self._additional_service_ids = None
        self._package = None
        self._pieces_per_package = None
        self._load_carrier = None
        self._service_code = None
        self._packing_agent_organization_id = None
        self.discriminator = None
        self.fulfillment_request_id = fulfillment_request_id
        self.batch_id = batch_id
        self.number_of_packages = number_of_packages
        if sales_order_id is not None:
            self.sales_order_id = sales_order_id
        if additional_service_ids is not None:
            self.additional_service_ids = additional_service_ids
        if package is not None:
            self.package = package
        if pieces_per_package is not None:
            self.pieces_per_package = pieces_per_package
        if load_carrier is not None:
            self.load_carrier = load_carrier
        if service_code is not None:
            self.service_code = service_code
        if packing_agent_organization_id is not None:
            self.packing_agent_organization_id = packing_agent_organization_id

    @property
    def fulfillment_request_id(self):
        """Gets the fulfillment_request_id of this FulfillmentRequestCreate.  # noqa: E501


        :return: The fulfillment_request_id of this FulfillmentRequestCreate.  # noqa: E501
        :rtype: str
        """
        return self._fulfillment_request_id

    @fulfillment_request_id.setter
    def fulfillment_request_id(self, fulfillment_request_id):
        """Sets the fulfillment_request_id of this FulfillmentRequestCreate.


        :param fulfillment_request_id: The fulfillment_request_id of this FulfillmentRequestCreate.  # noqa: E501
        :type: str
        """
        if fulfillment_request_id is None:
            raise ValueError("Invalid value for `fulfillment_request_id`, must not be `None`")  # noqa: E501

        self._fulfillment_request_id = fulfillment_request_id

    @property
    def batch_id(self):
        """Gets the batch_id of this FulfillmentRequestCreate.  # noqa: E501


        :return: The batch_id of this FulfillmentRequestCreate.  # noqa: E501
        :rtype: str
        """
        return self._batch_id

    @batch_id.setter
    def batch_id(self, batch_id):
        """Sets the batch_id of this FulfillmentRequestCreate.


        :param batch_id: The batch_id of this FulfillmentRequestCreate.  # noqa: E501
        :type: str
        """
        if batch_id is None:
            raise ValueError("Invalid value for `batch_id`, must not be `None`")  # noqa: E501

        self._batch_id = batch_id

    @property
    def number_of_packages(self):
        """Gets the number_of_packages of this FulfillmentRequestCreate.  # noqa: E501


        :return: The number_of_packages of this FulfillmentRequestCreate.  # noqa: E501
        :rtype: int
        """
        return self._number_of_packages

    @number_of_packages.setter
    def number_of_packages(self, number_of_packages):
        """Sets the number_of_packages of this FulfillmentRequestCreate.


        :param number_of_packages: The number_of_packages of this FulfillmentRequestCreate.  # noqa: E501
        :type: int
        """
        if number_of_packages is None:
            raise ValueError("Invalid value for `number_of_packages`, must not be `None`")  # noqa: E501

        self._number_of_packages = number_of_packages

    @property
    def sales_order_id(self):
        """Gets the sales_order_id of this FulfillmentRequestCreate.  # noqa: E501


        :return: The sales_order_id of this FulfillmentRequestCreate.  # noqa: E501
        :rtype: str
        """
        return self._sales_order_id

    @sales_order_id.setter
    def sales_order_id(self, sales_order_id):
        """Sets the sales_order_id of this FulfillmentRequestCreate.


        :param sales_order_id: The sales_order_id of this FulfillmentRequestCreate.  # noqa: E501
        :type: str
        """

        self._sales_order_id = sales_order_id

    @property
    def additional_service_ids(self):
        """Gets the additional_service_ids of this FulfillmentRequestCreate.  # noqa: E501


        :return: The additional_service_ids of this FulfillmentRequestCreate.  # noqa: E501
        :rtype: list[str]
        """
        return self._additional_service_ids

    @additional_service_ids.setter
    def additional_service_ids(self, additional_service_ids):
        """Sets the additional_service_ids of this FulfillmentRequestCreate.


        :param additional_service_ids: The additional_service_ids of this FulfillmentRequestCreate.  # noqa: E501
        :type: list[str]
        """

        self._additional_service_ids = additional_service_ids

    @property
    def package(self):
        """Gets the package of this FulfillmentRequestCreate.  # noqa: E501


        :return: The package of this FulfillmentRequestCreate.  # noqa: E501
        :rtype: Package
        """
        return self._package

    @package.setter
    def package(self, package):
        """Sets the package of this FulfillmentRequestCreate.


        :param package: The package of this FulfillmentRequestCreate.  # noqa: E501
        :type: Package
        """

        self._package = package

    @property
    def pieces_per_package(self):
        """Gets the pieces_per_package of this FulfillmentRequestCreate.  # noqa: E501


        :return: The pieces_per_package of this FulfillmentRequestCreate.  # noqa: E501
        :rtype: int
        """
        return self._pieces_per_package

    @pieces_per_package.setter
    def pieces_per_package(self, pieces_per_package):
        """Sets the pieces_per_package of this FulfillmentRequestCreate.


        :param pieces_per_package: The pieces_per_package of this FulfillmentRequestCreate.  # noqa: E501
        :type: int
        """

        self._pieces_per_package = pieces_per_package

    @property
    def load_carrier(self):
        """Gets the load_carrier of this FulfillmentRequestCreate.  # noqa: E501


        :return: The load_carrier of this FulfillmentRequestCreate.  # noqa: E501
        :rtype: LoadCarrierType
        """
        return self._load_carrier

    @load_carrier.setter
    def load_carrier(self, load_carrier):
        """Sets the load_carrier of this FulfillmentRequestCreate.


        :param load_carrier: The load_carrier of this FulfillmentRequestCreate.  # noqa: E501
        :type: LoadCarrierType
        """

        self._load_carrier = load_carrier

    @property
    def service_code(self):
        """Gets the service_code of this FulfillmentRequestCreate.  # noqa: E501


        :return: The service_code of this FulfillmentRequestCreate.  # noqa: E501
        :rtype: int
        """
        return self._service_code

    @service_code.setter
    def service_code(self, service_code):
        """Sets the service_code of this FulfillmentRequestCreate.


        :param service_code: The service_code of this FulfillmentRequestCreate.  # noqa: E501
        :type: int
        """

        self._service_code = service_code

    @property
    def packing_agent_organization_id(self):
        """Gets the packing_agent_organization_id of this FulfillmentRequestCreate.  # noqa: E501


        :return: The packing_agent_organization_id of this FulfillmentRequestCreate.  # noqa: E501
        :rtype: str
        """
        return self._packing_agent_organization_id

    @packing_agent_organization_id.setter
    def packing_agent_organization_id(self, packing_agent_organization_id):
        """Sets the packing_agent_organization_id of this FulfillmentRequestCreate.


        :param packing_agent_organization_id: The packing_agent_organization_id of this FulfillmentRequestCreate.  # noqa: E501
        :type: str
        """

        self._packing_agent_organization_id = packing_agent_organization_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FulfillmentRequestCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FulfillmentRequestCreate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
