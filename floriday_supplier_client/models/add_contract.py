# coding: utf-8

"""
    Main - Floriday Suppliers API

    ÔªøEvery endpoint requires at least the `role:app` scope and the header `X-Api-Key` populated with your given API-key. Most endpoints also require an additional scope which is listed in their descriptions.  - üóù [Authorization server (staging)](https://idm.staging.floriday.io/oauth2/ausmw6b47z1BnlHkw0h7/.well-known/oauth-authorization-server) - üóù [Authorization server (live)](https://idm.floriday.io/oauth2/aus3testdcf2vyfs70i7/.well-known/oauth-authorization-server) - üìö [Documentation](https://developer.floriday.io/docs/welcome) - ‚ñ∂ [Coding screencast: getting started (NL)](https://www.youtube.com/watch?v=fdqzP7_Y_s8)  ---  _The current state of this version 2024v1 is **Main**._ * This version will be deprecated after October 2024. * This version will be removed after April 2025.  ---  üîó 2023v2: [Customers API](https://api.staging.floriday.io/customers-api-2023v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2023v2/swagger/index.html) üîó 2024v1: [Customers API](https://api.staging.floriday.io/customers-api-2024v1/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v1/swagger/index.html) üîó 2024v2: [Customers API](https://api.staging.floriday.io/customers-api-2024v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v2/swagger/index.html)   # noqa: E501

    OpenAPI spec version: 2024v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AddContract(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'contract_id': 'str',
        'title': 'str',
        'description': 'str',
        'start_date_time': 'datetime',
        'end_date_time': 'datetime',
        'customer_organization_id': 'str',
        'sub_supplier_organization_ids': 'list[str]',
        'contract_period_kind': 'ContractPeriodKind',
        'allow_trade_item_variants': 'bool',
        'allow_automatic_blanket_order_approval': 'bool',
        'delivery': 'EditContractDelivery',
        'currency': 'Currency',
        'payment_provider': 'PaymentProvider',
        'contract_lines': 'list[EditContractLine]'
    }

    attribute_map = {
        'contract_id': 'contractId',
        'title': 'title',
        'description': 'description',
        'start_date_time': 'startDateTime',
        'end_date_time': 'endDateTime',
        'customer_organization_id': 'customerOrganizationId',
        'sub_supplier_organization_ids': 'subSupplierOrganizationIds',
        'contract_period_kind': 'contractPeriodKind',
        'allow_trade_item_variants': 'allowTradeItemVariants',
        'allow_automatic_blanket_order_approval': 'allowAutomaticBlanketOrderApproval',
        'delivery': 'delivery',
        'currency': 'currency',
        'payment_provider': 'paymentProvider',
        'contract_lines': 'contractLines'
    }

    def __init__(self, contract_id=None, title=None, description=None, start_date_time=None, end_date_time=None, customer_organization_id=None, sub_supplier_organization_ids=None, contract_period_kind=None, allow_trade_item_variants=None, allow_automatic_blanket_order_approval=None, delivery=None, currency=None, payment_provider=None, contract_lines=None):  # noqa: E501
        """AddContract - a model defined in Swagger"""  # noqa: E501
        self._contract_id = None
        self._title = None
        self._description = None
        self._start_date_time = None
        self._end_date_time = None
        self._customer_organization_id = None
        self._sub_supplier_organization_ids = None
        self._contract_period_kind = None
        self._allow_trade_item_variants = None
        self._allow_automatic_blanket_order_approval = None
        self._delivery = None
        self._currency = None
        self._payment_provider = None
        self._contract_lines = None
        self.discriminator = None
        self.contract_id = contract_id
        self.title = title
        if description is not None:
            self.description = description
        self.start_date_time = start_date_time
        self.end_date_time = end_date_time
        self.customer_organization_id = customer_organization_id
        if sub_supplier_organization_ids is not None:
            self.sub_supplier_organization_ids = sub_supplier_organization_ids
        self.contract_period_kind = contract_period_kind
        self.allow_trade_item_variants = allow_trade_item_variants
        self.allow_automatic_blanket_order_approval = allow_automatic_blanket_order_approval
        self.delivery = delivery
        self.currency = currency
        self.payment_provider = payment_provider
        self.contract_lines = contract_lines

    @property
    def contract_id(self):
        """Gets the contract_id of this AddContract.  # noqa: E501


        :return: The contract_id of this AddContract.  # noqa: E501
        :rtype: str
        """
        return self._contract_id

    @contract_id.setter
    def contract_id(self, contract_id):
        """Sets the contract_id of this AddContract.


        :param contract_id: The contract_id of this AddContract.  # noqa: E501
        :type: str
        """
        if contract_id is None:
            raise ValueError("Invalid value for `contract_id`, must not be `None`")  # noqa: E501

        self._contract_id = contract_id

    @property
    def title(self):
        """Gets the title of this AddContract.  # noqa: E501


        :return: The title of this AddContract.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AddContract.


        :param title: The title of this AddContract.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def description(self):
        """Gets the description of this AddContract.  # noqa: E501


        :return: The description of this AddContract.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AddContract.


        :param description: The description of this AddContract.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def start_date_time(self):
        """Gets the start_date_time of this AddContract.  # noqa: E501


        :return: The start_date_time of this AddContract.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date_time

    @start_date_time.setter
    def start_date_time(self, start_date_time):
        """Sets the start_date_time of this AddContract.


        :param start_date_time: The start_date_time of this AddContract.  # noqa: E501
        :type: datetime
        """
        if start_date_time is None:
            raise ValueError("Invalid value for `start_date_time`, must not be `None`")  # noqa: E501

        self._start_date_time = start_date_time

    @property
    def end_date_time(self):
        """Gets the end_date_time of this AddContract.  # noqa: E501


        :return: The end_date_time of this AddContract.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date_time

    @end_date_time.setter
    def end_date_time(self, end_date_time):
        """Sets the end_date_time of this AddContract.


        :param end_date_time: The end_date_time of this AddContract.  # noqa: E501
        :type: datetime
        """
        if end_date_time is None:
            raise ValueError("Invalid value for `end_date_time`, must not be `None`")  # noqa: E501

        self._end_date_time = end_date_time

    @property
    def customer_organization_id(self):
        """Gets the customer_organization_id of this AddContract.  # noqa: E501


        :return: The customer_organization_id of this AddContract.  # noqa: E501
        :rtype: str
        """
        return self._customer_organization_id

    @customer_organization_id.setter
    def customer_organization_id(self, customer_organization_id):
        """Sets the customer_organization_id of this AddContract.


        :param customer_organization_id: The customer_organization_id of this AddContract.  # noqa: E501
        :type: str
        """
        if customer_organization_id is None:
            raise ValueError("Invalid value for `customer_organization_id`, must not be `None`")  # noqa: E501

        self._customer_organization_id = customer_organization_id

    @property
    def sub_supplier_organization_ids(self):
        """Gets the sub_supplier_organization_ids of this AddContract.  # noqa: E501


        :return: The sub_supplier_organization_ids of this AddContract.  # noqa: E501
        :rtype: list[str]
        """
        return self._sub_supplier_organization_ids

    @sub_supplier_organization_ids.setter
    def sub_supplier_organization_ids(self, sub_supplier_organization_ids):
        """Sets the sub_supplier_organization_ids of this AddContract.


        :param sub_supplier_organization_ids: The sub_supplier_organization_ids of this AddContract.  # noqa: E501
        :type: list[str]
        """

        self._sub_supplier_organization_ids = sub_supplier_organization_ids

    @property
    def contract_period_kind(self):
        """Gets the contract_period_kind of this AddContract.  # noqa: E501


        :return: The contract_period_kind of this AddContract.  # noqa: E501
        :rtype: ContractPeriodKind
        """
        return self._contract_period_kind

    @contract_period_kind.setter
    def contract_period_kind(self, contract_period_kind):
        """Sets the contract_period_kind of this AddContract.


        :param contract_period_kind: The contract_period_kind of this AddContract.  # noqa: E501
        :type: ContractPeriodKind
        """
        if contract_period_kind is None:
            raise ValueError("Invalid value for `contract_period_kind`, must not be `None`")  # noqa: E501

        self._contract_period_kind = contract_period_kind

    @property
    def allow_trade_item_variants(self):
        """Gets the allow_trade_item_variants of this AddContract.  # noqa: E501

        Allow the use of variants from the chosen trade item when creating a blanket order.  # noqa: E501

        :return: The allow_trade_item_variants of this AddContract.  # noqa: E501
        :rtype: bool
        """
        return self._allow_trade_item_variants

    @allow_trade_item_variants.setter
    def allow_trade_item_variants(self, allow_trade_item_variants):
        """Sets the allow_trade_item_variants of this AddContract.

        Allow the use of variants from the chosen trade item when creating a blanket order.  # noqa: E501

        :param allow_trade_item_variants: The allow_trade_item_variants of this AddContract.  # noqa: E501
        :type: bool
        """
        if allow_trade_item_variants is None:
            raise ValueError("Invalid value for `allow_trade_item_variants`, must not be `None`")  # noqa: E501

        self._allow_trade_item_variants = allow_trade_item_variants

    @property
    def allow_automatic_blanket_order_approval(self):
        """Gets the allow_automatic_blanket_order_approval of this AddContract.  # noqa: E501


        :return: The allow_automatic_blanket_order_approval of this AddContract.  # noqa: E501
        :rtype: bool
        """
        return self._allow_automatic_blanket_order_approval

    @allow_automatic_blanket_order_approval.setter
    def allow_automatic_blanket_order_approval(self, allow_automatic_blanket_order_approval):
        """Sets the allow_automatic_blanket_order_approval of this AddContract.


        :param allow_automatic_blanket_order_approval: The allow_automatic_blanket_order_approval of this AddContract.  # noqa: E501
        :type: bool
        """
        if allow_automatic_blanket_order_approval is None:
            raise ValueError("Invalid value for `allow_automatic_blanket_order_approval`, must not be `None`")  # noqa: E501

        self._allow_automatic_blanket_order_approval = allow_automatic_blanket_order_approval

    @property
    def delivery(self):
        """Gets the delivery of this AddContract.  # noqa: E501


        :return: The delivery of this AddContract.  # noqa: E501
        :rtype: EditContractDelivery
        """
        return self._delivery

    @delivery.setter
    def delivery(self, delivery):
        """Sets the delivery of this AddContract.


        :param delivery: The delivery of this AddContract.  # noqa: E501
        :type: EditContractDelivery
        """
        if delivery is None:
            raise ValueError("Invalid value for `delivery`, must not be `None`")  # noqa: E501

        self._delivery = delivery

    @property
    def currency(self):
        """Gets the currency of this AddContract.  # noqa: E501


        :return: The currency of this AddContract.  # noqa: E501
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this AddContract.


        :param currency: The currency of this AddContract.  # noqa: E501
        :type: Currency
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def payment_provider(self):
        """Gets the payment_provider of this AddContract.  # noqa: E501


        :return: The payment_provider of this AddContract.  # noqa: E501
        :rtype: PaymentProvider
        """
        return self._payment_provider

    @payment_provider.setter
    def payment_provider(self, payment_provider):
        """Sets the payment_provider of this AddContract.


        :param payment_provider: The payment_provider of this AddContract.  # noqa: E501
        :type: PaymentProvider
        """
        if payment_provider is None:
            raise ValueError("Invalid value for `payment_provider`, must not be `None`")  # noqa: E501

        self._payment_provider = payment_provider

    @property
    def contract_lines(self):
        """Gets the contract_lines of this AddContract.  # noqa: E501


        :return: The contract_lines of this AddContract.  # noqa: E501
        :rtype: list[EditContractLine]
        """
        return self._contract_lines

    @contract_lines.setter
    def contract_lines(self, contract_lines):
        """Sets the contract_lines of this AddContract.


        :param contract_lines: The contract_lines of this AddContract.  # noqa: E501
        :type: list[EditContractLine]
        """
        if contract_lines is None:
            raise ValueError("Invalid value for `contract_lines`, must not be `None`")  # noqa: E501

        self._contract_lines = contract_lines

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddContract, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddContract):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
