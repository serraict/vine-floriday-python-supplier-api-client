# coding: utf-8

"""
    Main - Floriday Suppliers API

    ÔªøEvery endpoint requires at least the `role:app` scope and the header `X-Api-Key` populated with your given API-key. Most endpoints also require an additional scope which is listed in their descriptions.  - üóù [Authorization server (staging)](https://idm.staging.floriday.io/oauth2/ausmw6b47z1BnlHkw0h7/.well-known/oauth-authorization-server) - üóù [Authorization server (live)](https://idm.floriday.io/oauth2/aus3testdcf2vyfs70i7/.well-known/oauth-authorization-server) - üìö [Documentation](https://developer.floriday.io/docs/welcome) - ‚ñ∂ [Coding screencast: getting started (NL)](https://www.youtube.com/watch?v=fdqzP7_Y_s8)  ---  _The current state of this version 2024v1 is **Main**._ * This version will be deprecated after October 2024. * This version will be removed after April 2025.  ---  üîó 2023v2: [Customers API](https://api.staging.floriday.io/customers-api-2023v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2023v2/swagger/index.html) üîó 2024v1: [Customers API](https://api.staging.floriday.io/customers-api-2024v1/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v1/swagger/index.html) üîó 2024v2: [Customers API](https://api.staging.floriday.io/customers-api-2024v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v2/swagger/index.html)   # noqa: E501

    OpenAPI spec version: 2024v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SupplyRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'supply_request_id': 'str',
        'customer_organization_id': 'str',
        'title': 'str',
        'description': 'str',
        'quantity_description': 'str',
        'sales_channel': 'str',
        'order_period': 'TradePeriod',
        'delivery_period': 'TradePeriod',
        'agreement_reference': 'AgreementReference',
        'expires_at_date_time': 'datetime',
        'creation_date_time': 'datetime',
        'last_modified_date_time': 'datetime',
        'is_deleted': 'bool',
        'sequence_number': 'int',
        'commercial_services': 'list[CommercialService]',
        'supply_request_lines': 'list[SupplyRequestLine]'
    }

    attribute_map = {
        'supply_request_id': 'supplyRequestId',
        'customer_organization_id': 'customerOrganizationId',
        'title': 'title',
        'description': 'description',
        'quantity_description': 'quantityDescription',
        'sales_channel': 'salesChannel',
        'order_period': 'orderPeriod',
        'delivery_period': 'deliveryPeriod',
        'agreement_reference': 'agreementReference',
        'expires_at_date_time': 'expiresAtDateTime',
        'creation_date_time': 'creationDateTime',
        'last_modified_date_time': 'lastModifiedDateTime',
        'is_deleted': 'isDeleted',
        'sequence_number': 'sequenceNumber',
        'commercial_services': 'commercialServices',
        'supply_request_lines': 'supplyRequestLines'
    }

    def __init__(self, supply_request_id=None, customer_organization_id=None, title=None, description=None, quantity_description=None, sales_channel=None, order_period=None, delivery_period=None, agreement_reference=None, expires_at_date_time=None, creation_date_time=None, last_modified_date_time=None, is_deleted=None, sequence_number=None, commercial_services=None, supply_request_lines=None):  # noqa: E501
        """SupplyRequest - a model defined in Swagger"""  # noqa: E501
        self._supply_request_id = None
        self._customer_organization_id = None
        self._title = None
        self._description = None
        self._quantity_description = None
        self._sales_channel = None
        self._order_period = None
        self._delivery_period = None
        self._agreement_reference = None
        self._expires_at_date_time = None
        self._creation_date_time = None
        self._last_modified_date_time = None
        self._is_deleted = None
        self._sequence_number = None
        self._commercial_services = None
        self._supply_request_lines = None
        self.discriminator = None
        self.supply_request_id = supply_request_id
        self.customer_organization_id = customer_organization_id
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if quantity_description is not None:
            self.quantity_description = quantity_description
        self.sales_channel = sales_channel
        self.order_period = order_period
        self.delivery_period = delivery_period
        if agreement_reference is not None:
            self.agreement_reference = agreement_reference
        self.expires_at_date_time = expires_at_date_time
        self.creation_date_time = creation_date_time
        self.last_modified_date_time = last_modified_date_time
        self.is_deleted = is_deleted
        self.sequence_number = sequence_number
        self.commercial_services = commercial_services
        self.supply_request_lines = supply_request_lines

    @property
    def supply_request_id(self):
        """Gets the supply_request_id of this SupplyRequest.  # noqa: E501


        :return: The supply_request_id of this SupplyRequest.  # noqa: E501
        :rtype: str
        """
        return self._supply_request_id

    @supply_request_id.setter
    def supply_request_id(self, supply_request_id):
        """Sets the supply_request_id of this SupplyRequest.


        :param supply_request_id: The supply_request_id of this SupplyRequest.  # noqa: E501
        :type: str
        """
        if supply_request_id is None:
            raise ValueError("Invalid value for `supply_request_id`, must not be `None`")  # noqa: E501

        self._supply_request_id = supply_request_id

    @property
    def customer_organization_id(self):
        """Gets the customer_organization_id of this SupplyRequest.  # noqa: E501


        :return: The customer_organization_id of this SupplyRequest.  # noqa: E501
        :rtype: str
        """
        return self._customer_organization_id

    @customer_organization_id.setter
    def customer_organization_id(self, customer_organization_id):
        """Sets the customer_organization_id of this SupplyRequest.


        :param customer_organization_id: The customer_organization_id of this SupplyRequest.  # noqa: E501
        :type: str
        """
        if customer_organization_id is None:
            raise ValueError("Invalid value for `customer_organization_id`, must not be `None`")  # noqa: E501

        self._customer_organization_id = customer_organization_id

    @property
    def title(self):
        """Gets the title of this SupplyRequest.  # noqa: E501


        :return: The title of this SupplyRequest.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SupplyRequest.


        :param title: The title of this SupplyRequest.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this SupplyRequest.  # noqa: E501


        :return: The description of this SupplyRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SupplyRequest.


        :param description: The description of this SupplyRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def quantity_description(self):
        """Gets the quantity_description of this SupplyRequest.  # noqa: E501


        :return: The quantity_description of this SupplyRequest.  # noqa: E501
        :rtype: str
        """
        return self._quantity_description

    @quantity_description.setter
    def quantity_description(self, quantity_description):
        """Sets the quantity_description of this SupplyRequest.


        :param quantity_description: The quantity_description of this SupplyRequest.  # noqa: E501
        :type: str
        """

        self._quantity_description = quantity_description

    @property
    def sales_channel(self):
        """Gets the sales_channel of this SupplyRequest.  # noqa: E501


        :return: The sales_channel of this SupplyRequest.  # noqa: E501
        :rtype: str
        """
        return self._sales_channel

    @sales_channel.setter
    def sales_channel(self, sales_channel):
        """Sets the sales_channel of this SupplyRequest.


        :param sales_channel: The sales_channel of this SupplyRequest.  # noqa: E501
        :type: str
        """
        if sales_channel is None:
            raise ValueError("Invalid value for `sales_channel`, must not be `None`")  # noqa: E501

        self._sales_channel = sales_channel

    @property
    def order_period(self):
        """Gets the order_period of this SupplyRequest.  # noqa: E501


        :return: The order_period of this SupplyRequest.  # noqa: E501
        :rtype: TradePeriod
        """
        return self._order_period

    @order_period.setter
    def order_period(self, order_period):
        """Sets the order_period of this SupplyRequest.


        :param order_period: The order_period of this SupplyRequest.  # noqa: E501
        :type: TradePeriod
        """
        if order_period is None:
            raise ValueError("Invalid value for `order_period`, must not be `None`")  # noqa: E501

        self._order_period = order_period

    @property
    def delivery_period(self):
        """Gets the delivery_period of this SupplyRequest.  # noqa: E501


        :return: The delivery_period of this SupplyRequest.  # noqa: E501
        :rtype: TradePeriod
        """
        return self._delivery_period

    @delivery_period.setter
    def delivery_period(self, delivery_period):
        """Sets the delivery_period of this SupplyRequest.


        :param delivery_period: The delivery_period of this SupplyRequest.  # noqa: E501
        :type: TradePeriod
        """
        if delivery_period is None:
            raise ValueError("Invalid value for `delivery_period`, must not be `None`")  # noqa: E501

        self._delivery_period = delivery_period

    @property
    def agreement_reference(self):
        """Gets the agreement_reference of this SupplyRequest.  # noqa: E501


        :return: The agreement_reference of this SupplyRequest.  # noqa: E501
        :rtype: AgreementReference
        """
        return self._agreement_reference

    @agreement_reference.setter
    def agreement_reference(self, agreement_reference):
        """Sets the agreement_reference of this SupplyRequest.


        :param agreement_reference: The agreement_reference of this SupplyRequest.  # noqa: E501
        :type: AgreementReference
        """

        self._agreement_reference = agreement_reference

    @property
    def expires_at_date_time(self):
        """Gets the expires_at_date_time of this SupplyRequest.  # noqa: E501


        :return: The expires_at_date_time of this SupplyRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._expires_at_date_time

    @expires_at_date_time.setter
    def expires_at_date_time(self, expires_at_date_time):
        """Sets the expires_at_date_time of this SupplyRequest.


        :param expires_at_date_time: The expires_at_date_time of this SupplyRequest.  # noqa: E501
        :type: datetime
        """
        if expires_at_date_time is None:
            raise ValueError("Invalid value for `expires_at_date_time`, must not be `None`")  # noqa: E501

        self._expires_at_date_time = expires_at_date_time

    @property
    def creation_date_time(self):
        """Gets the creation_date_time of this SupplyRequest.  # noqa: E501


        :return: The creation_date_time of this SupplyRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date_time

    @creation_date_time.setter
    def creation_date_time(self, creation_date_time):
        """Sets the creation_date_time of this SupplyRequest.


        :param creation_date_time: The creation_date_time of this SupplyRequest.  # noqa: E501
        :type: datetime
        """
        if creation_date_time is None:
            raise ValueError("Invalid value for `creation_date_time`, must not be `None`")  # noqa: E501

        self._creation_date_time = creation_date_time

    @property
    def last_modified_date_time(self):
        """Gets the last_modified_date_time of this SupplyRequest.  # noqa: E501


        :return: The last_modified_date_time of this SupplyRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_date_time

    @last_modified_date_time.setter
    def last_modified_date_time(self, last_modified_date_time):
        """Sets the last_modified_date_time of this SupplyRequest.


        :param last_modified_date_time: The last_modified_date_time of this SupplyRequest.  # noqa: E501
        :type: datetime
        """
        if last_modified_date_time is None:
            raise ValueError("Invalid value for `last_modified_date_time`, must not be `None`")  # noqa: E501

        self._last_modified_date_time = last_modified_date_time

    @property
    def is_deleted(self):
        """Gets the is_deleted of this SupplyRequest.  # noqa: E501


        :return: The is_deleted of this SupplyRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this SupplyRequest.


        :param is_deleted: The is_deleted of this SupplyRequest.  # noqa: E501
        :type: bool
        """
        if is_deleted is None:
            raise ValueError("Invalid value for `is_deleted`, must not be `None`")  # noqa: E501

        self._is_deleted = is_deleted

    @property
    def sequence_number(self):
        """Gets the sequence_number of this SupplyRequest.  # noqa: E501


        :return: The sequence_number of this SupplyRequest.  # noqa: E501
        :rtype: int
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this SupplyRequest.


        :param sequence_number: The sequence_number of this SupplyRequest.  # noqa: E501
        :type: int
        """
        if sequence_number is None:
            raise ValueError("Invalid value for `sequence_number`, must not be `None`")  # noqa: E501

        self._sequence_number = sequence_number

    @property
    def commercial_services(self):
        """Gets the commercial_services of this SupplyRequest.  # noqa: E501


        :return: The commercial_services of this SupplyRequest.  # noqa: E501
        :rtype: list[CommercialService]
        """
        return self._commercial_services

    @commercial_services.setter
    def commercial_services(self, commercial_services):
        """Sets the commercial_services of this SupplyRequest.


        :param commercial_services: The commercial_services of this SupplyRequest.  # noqa: E501
        :type: list[CommercialService]
        """
        if commercial_services is None:
            raise ValueError("Invalid value for `commercial_services`, must not be `None`")  # noqa: E501

        self._commercial_services = commercial_services

    @property
    def supply_request_lines(self):
        """Gets the supply_request_lines of this SupplyRequest.  # noqa: E501


        :return: The supply_request_lines of this SupplyRequest.  # noqa: E501
        :rtype: list[SupplyRequestLine]
        """
        return self._supply_request_lines

    @supply_request_lines.setter
    def supply_request_lines(self, supply_request_lines):
        """Sets the supply_request_lines of this SupplyRequest.


        :param supply_request_lines: The supply_request_lines of this SupplyRequest.  # noqa: E501
        :type: list[SupplyRequestLine]
        """
        if supply_request_lines is None:
            raise ValueError("Invalid value for `supply_request_lines`, must not be `None`")  # noqa: E501

        self._supply_request_lines = supply_request_lines

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SupplyRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupplyRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
