# coding: utf-8

"""
    Main - Floriday Suppliers API

    ÔªøEvery endpoint requires at least the `role:app` scope and the header `X-Api-Key` populated with your given API-key. Most endpoints also require an additional scope which is listed in their descriptions.  - üóù [Authorization server (staging)](https://idm.staging.floriday.io/oauth2/ausmw6b47z1BnlHkw0h7/.well-known/oauth-authorization-server) - üóù [Authorization server (live)](https://idm.floriday.io/oauth2/aus3testdcf2vyfs70i7/.well-known/oauth-authorization-server) - üìö [Documentation](https://developer.floriday.io/docs/welcome) - ‚ñ∂ [Coding screencast: getting started (NL)](https://www.youtube.com/watch?v=fdqzP7_Y_s8)  ---  _The current state of this version 2024v1 is **Main**._ * This version will be deprecated after October 2024. * This version will be removed after April 2025.  ---  üîó 2023v2: [Customers API](https://api.staging.floriday.io/customers-api-2023v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2023v2/swagger/index.html) üîó 2024v1: [Customers API](https://api.staging.floriday.io/customers-api-2024v1/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v1/swagger/index.html) üîó 2024v2: [Customers API](https://api.staging.floriday.io/customers-api-2024v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v2/swagger/index.html)   # noqa: E501

    OpenAPI spec version: 2024v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Organization(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'organization_id': 'str',
        'company_gln': 'str',
        'name': 'str',
        'end_date': 'datetime',
        'rfh_relation_id': 'int',
        'rfh_company_account_id': 'int',
        'organization_type': 'OrganizationType',
        'sequence_number': 'int',
        'creation_date_time': 'datetime',
        'last_modified_date_time': 'datetime',
        'commercial_name': 'str',
        'website': 'str',
        'payment_providers': 'list[PaymentProviderCreate]',
        'mailing_address': 'Address',
        'physical_address': 'Address',
        'plantion_registration_number': 'int',
        'logo_url': 'str'
    }

    attribute_map = {
        'organization_id': 'organizationId',
        'company_gln': 'companyGln',
        'name': 'name',
        'end_date': 'endDate',
        'rfh_relation_id': 'rfhRelationId',
        'rfh_company_account_id': 'rfhCompanyAccountId',
        'organization_type': 'organizationType',
        'sequence_number': 'sequenceNumber',
        'creation_date_time': 'creationDateTime',
        'last_modified_date_time': 'lastModifiedDateTime',
        'commercial_name': 'commercialName',
        'website': 'website',
        'payment_providers': 'paymentProviders',
        'mailing_address': 'mailingAddress',
        'physical_address': 'physicalAddress',
        'plantion_registration_number': 'plantionRegistrationNumber',
        'logo_url': 'logoUrl'
    }

    def __init__(self, organization_id=None, company_gln=None, name=None, end_date=None, rfh_relation_id=None, rfh_company_account_id=None, organization_type=None, sequence_number=None, creation_date_time=None, last_modified_date_time=None, commercial_name=None, website=None, payment_providers=None, mailing_address=None, physical_address=None, plantion_registration_number=None, logo_url=None):  # noqa: E501
        """Organization - a model defined in Swagger"""  # noqa: E501
        self._organization_id = None
        self._company_gln = None
        self._name = None
        self._end_date = None
        self._rfh_relation_id = None
        self._rfh_company_account_id = None
        self._organization_type = None
        self._sequence_number = None
        self._creation_date_time = None
        self._last_modified_date_time = None
        self._commercial_name = None
        self._website = None
        self._payment_providers = None
        self._mailing_address = None
        self._physical_address = None
        self._plantion_registration_number = None
        self._logo_url = None
        self.discriminator = None
        self.organization_id = organization_id
        if company_gln is not None:
            self.company_gln = company_gln
        if name is not None:
            self.name = name
        if end_date is not None:
            self.end_date = end_date
        if rfh_relation_id is not None:
            self.rfh_relation_id = rfh_relation_id
        if rfh_company_account_id is not None:
            self.rfh_company_account_id = rfh_company_account_id
        if organization_type is not None:
            self.organization_type = organization_type
        self.sequence_number = sequence_number
        if creation_date_time is not None:
            self.creation_date_time = creation_date_time
        if last_modified_date_time is not None:
            self.last_modified_date_time = last_modified_date_time
        if commercial_name is not None:
            self.commercial_name = commercial_name
        if website is not None:
            self.website = website
        if payment_providers is not None:
            self.payment_providers = payment_providers
        if mailing_address is not None:
            self.mailing_address = mailing_address
        if physical_address is not None:
            self.physical_address = physical_address
        if plantion_registration_number is not None:
            self.plantion_registration_number = plantion_registration_number
        if logo_url is not None:
            self.logo_url = logo_url

    @property
    def organization_id(self):
        """Gets the organization_id of this Organization.  # noqa: E501


        :return: The organization_id of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this Organization.


        :param organization_id: The organization_id of this Organization.  # noqa: E501
        :type: str
        """
        if organization_id is None:
            raise ValueError("Invalid value for `organization_id`, must not be `None`")  # noqa: E501

        self._organization_id = organization_id

    @property
    def company_gln(self):
        """Gets the company_gln of this Organization.  # noqa: E501


        :return: The company_gln of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._company_gln

    @company_gln.setter
    def company_gln(self, company_gln):
        """Sets the company_gln of this Organization.


        :param company_gln: The company_gln of this Organization.  # noqa: E501
        :type: str
        """

        self._company_gln = company_gln

    @property
    def name(self):
        """Gets the name of this Organization.  # noqa: E501


        :return: The name of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Organization.


        :param name: The name of this Organization.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def end_date(self):
        """Gets the end_date of this Organization.  # noqa: E501


        :return: The end_date of this Organization.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this Organization.


        :param end_date: The end_date of this Organization.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def rfh_relation_id(self):
        """Gets the rfh_relation_id of this Organization.  # noqa: E501


        :return: The rfh_relation_id of this Organization.  # noqa: E501
        :rtype: int
        """
        return self._rfh_relation_id

    @rfh_relation_id.setter
    def rfh_relation_id(self, rfh_relation_id):
        """Sets the rfh_relation_id of this Organization.


        :param rfh_relation_id: The rfh_relation_id of this Organization.  # noqa: E501
        :type: int
        """

        self._rfh_relation_id = rfh_relation_id

    @property
    def rfh_company_account_id(self):
        """Gets the rfh_company_account_id of this Organization.  # noqa: E501


        :return: The rfh_company_account_id of this Organization.  # noqa: E501
        :rtype: int
        """
        return self._rfh_company_account_id

    @rfh_company_account_id.setter
    def rfh_company_account_id(self, rfh_company_account_id):
        """Sets the rfh_company_account_id of this Organization.


        :param rfh_company_account_id: The rfh_company_account_id of this Organization.  # noqa: E501
        :type: int
        """

        self._rfh_company_account_id = rfh_company_account_id

    @property
    def organization_type(self):
        """Gets the organization_type of this Organization.  # noqa: E501


        :return: The organization_type of this Organization.  # noqa: E501
        :rtype: OrganizationType
        """
        return self._organization_type

    @organization_type.setter
    def organization_type(self, organization_type):
        """Sets the organization_type of this Organization.


        :param organization_type: The organization_type of this Organization.  # noqa: E501
        :type: OrganizationType
        """

        self._organization_type = organization_type

    @property
    def sequence_number(self):
        """Gets the sequence_number of this Organization.  # noqa: E501


        :return: The sequence_number of this Organization.  # noqa: E501
        :rtype: int
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this Organization.


        :param sequence_number: The sequence_number of this Organization.  # noqa: E501
        :type: int
        """
        if sequence_number is None:
            raise ValueError("Invalid value for `sequence_number`, must not be `None`")  # noqa: E501

        self._sequence_number = sequence_number

    @property
    def creation_date_time(self):
        """Gets the creation_date_time of this Organization.  # noqa: E501


        :return: The creation_date_time of this Organization.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date_time

    @creation_date_time.setter
    def creation_date_time(self, creation_date_time):
        """Sets the creation_date_time of this Organization.


        :param creation_date_time: The creation_date_time of this Organization.  # noqa: E501
        :type: datetime
        """

        self._creation_date_time = creation_date_time

    @property
    def last_modified_date_time(self):
        """Gets the last_modified_date_time of this Organization.  # noqa: E501


        :return: The last_modified_date_time of this Organization.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_date_time

    @last_modified_date_time.setter
    def last_modified_date_time(self, last_modified_date_time):
        """Sets the last_modified_date_time of this Organization.


        :param last_modified_date_time: The last_modified_date_time of this Organization.  # noqa: E501
        :type: datetime
        """

        self._last_modified_date_time = last_modified_date_time

    @property
    def commercial_name(self):
        """Gets the commercial_name of this Organization.  # noqa: E501


        :return: The commercial_name of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._commercial_name

    @commercial_name.setter
    def commercial_name(self, commercial_name):
        """Sets the commercial_name of this Organization.


        :param commercial_name: The commercial_name of this Organization.  # noqa: E501
        :type: str
        """

        self._commercial_name = commercial_name

    @property
    def website(self):
        """Gets the website of this Organization.  # noqa: E501


        :return: The website of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this Organization.


        :param website: The website of this Organization.  # noqa: E501
        :type: str
        """

        self._website = website

    @property
    def payment_providers(self):
        """Gets the payment_providers of this Organization.  # noqa: E501


        :return: The payment_providers of this Organization.  # noqa: E501
        :rtype: list[PaymentProviderCreate]
        """
        return self._payment_providers

    @payment_providers.setter
    def payment_providers(self, payment_providers):
        """Sets the payment_providers of this Organization.


        :param payment_providers: The payment_providers of this Organization.  # noqa: E501
        :type: list[PaymentProviderCreate]
        """

        self._payment_providers = payment_providers

    @property
    def mailing_address(self):
        """Gets the mailing_address of this Organization.  # noqa: E501


        :return: The mailing_address of this Organization.  # noqa: E501
        :rtype: Address
        """
        return self._mailing_address

    @mailing_address.setter
    def mailing_address(self, mailing_address):
        """Sets the mailing_address of this Organization.


        :param mailing_address: The mailing_address of this Organization.  # noqa: E501
        :type: Address
        """

        self._mailing_address = mailing_address

    @property
    def physical_address(self):
        """Gets the physical_address of this Organization.  # noqa: E501


        :return: The physical_address of this Organization.  # noqa: E501
        :rtype: Address
        """
        return self._physical_address

    @physical_address.setter
    def physical_address(self, physical_address):
        """Sets the physical_address of this Organization.


        :param physical_address: The physical_address of this Organization.  # noqa: E501
        :type: Address
        """

        self._physical_address = physical_address

    @property
    def plantion_registration_number(self):
        """Gets the plantion_registration_number of this Organization.  # noqa: E501


        :return: The plantion_registration_number of this Organization.  # noqa: E501
        :rtype: int
        """
        return self._plantion_registration_number

    @plantion_registration_number.setter
    def plantion_registration_number(self, plantion_registration_number):
        """Sets the plantion_registration_number of this Organization.


        :param plantion_registration_number: The plantion_registration_number of this Organization.  # noqa: E501
        :type: int
        """

        self._plantion_registration_number = plantion_registration_number

    @property
    def logo_url(self):
        """Gets the logo_url of this Organization.  # noqa: E501


        :return: The logo_url of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this Organization.


        :param logo_url: The logo_url of this Organization.  # noqa: E501
        :type: str
        """

        self._logo_url = logo_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Organization, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Organization):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
