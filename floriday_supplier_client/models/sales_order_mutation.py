# coding: utf-8

"""
    Main - Floriday Suppliers API

    ÔªøEvery endpoint requires at least the `role:app` scope and the header `X-Api-Key` populated with your given API-key. Most endpoints also require an additional scope which is listed in their descriptions.  - üóù [Authorization server (staging)](https://idm.staging.floriday.io/oauth2/ausmw6b47z1BnlHkw0h7/.well-known/oauth-authorization-server) - üóù [Authorization server (live)](https://idm.floriday.io/oauth2/aus3testdcf2vyfs70i7/.well-known/oauth-authorization-server) - üìö [Documentation](https://developer.floriday.io/docs/welcome) - ‚ñ∂ [Coding screencast: getting started (NL)](https://www.youtube.com/watch?v=fdqzP7_Y_s8)  ---  _The current state of this version 2024v1 is **Main**._ * This version will be deprecated after October 2024. * This version will be removed after April 2025.  ---  üîó 2023v2: [Customers API](https://api.staging.floriday.io/customers-api-2023v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2023v2/swagger/index.html) üîó 2024v1: [Customers API](https://api.staging.floriday.io/customers-api-2024v1/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v1/swagger/index.html) üîó 2024v2: [Customers API](https://api.staging.floriday.io/customers-api-2024v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v2/swagger/index.html)   # noqa: E501

    OpenAPI spec version: 2024v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SalesOrderMutation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'based_on_sales_order_version': 'int',
        'sales_order_correction_request_id': 'str',
        'sales_order_correction_request_reason': 'str',
        'old_values': 'SalesOrderMutables',
        'new_values': 'SalesOrderMutables',
        'mutation_type': 'SalesOrderMutationUpdateType',
        'correction_type': 'SalesOrderMutationCorrectionType',
        'created_date_time': 'datetime'
    }

    attribute_map = {
        'based_on_sales_order_version': 'basedOnSalesOrderVersion',
        'sales_order_correction_request_id': 'salesOrderCorrectionRequestId',
        'sales_order_correction_request_reason': 'salesOrderCorrectionRequestReason',
        'old_values': 'oldValues',
        'new_values': 'newValues',
        'mutation_type': 'mutationType',
        'correction_type': 'correctionType',
        'created_date_time': 'createdDateTime'
    }

    def __init__(self, based_on_sales_order_version=None, sales_order_correction_request_id=None, sales_order_correction_request_reason=None, old_values=None, new_values=None, mutation_type=None, correction_type=None, created_date_time=None):  # noqa: E501
        """SalesOrderMutation - a model defined in Swagger"""  # noqa: E501
        self._based_on_sales_order_version = None
        self._sales_order_correction_request_id = None
        self._sales_order_correction_request_reason = None
        self._old_values = None
        self._new_values = None
        self._mutation_type = None
        self._correction_type = None
        self._created_date_time = None
        self.discriminator = None
        self.based_on_sales_order_version = based_on_sales_order_version
        if sales_order_correction_request_id is not None:
            self.sales_order_correction_request_id = sales_order_correction_request_id
        if sales_order_correction_request_reason is not None:
            self.sales_order_correction_request_reason = sales_order_correction_request_reason
        self.old_values = old_values
        self.new_values = new_values
        self.mutation_type = mutation_type
        self.correction_type = correction_type
        self.created_date_time = created_date_time

    @property
    def based_on_sales_order_version(self):
        """Gets the based_on_sales_order_version of this SalesOrderMutation.  # noqa: E501


        :return: The based_on_sales_order_version of this SalesOrderMutation.  # noqa: E501
        :rtype: int
        """
        return self._based_on_sales_order_version

    @based_on_sales_order_version.setter
    def based_on_sales_order_version(self, based_on_sales_order_version):
        """Sets the based_on_sales_order_version of this SalesOrderMutation.


        :param based_on_sales_order_version: The based_on_sales_order_version of this SalesOrderMutation.  # noqa: E501
        :type: int
        """
        if based_on_sales_order_version is None:
            raise ValueError("Invalid value for `based_on_sales_order_version`, must not be `None`")  # noqa: E501

        self._based_on_sales_order_version = based_on_sales_order_version

    @property
    def sales_order_correction_request_id(self):
        """Gets the sales_order_correction_request_id of this SalesOrderMutation.  # noqa: E501


        :return: The sales_order_correction_request_id of this SalesOrderMutation.  # noqa: E501
        :rtype: str
        """
        return self._sales_order_correction_request_id

    @sales_order_correction_request_id.setter
    def sales_order_correction_request_id(self, sales_order_correction_request_id):
        """Sets the sales_order_correction_request_id of this SalesOrderMutation.


        :param sales_order_correction_request_id: The sales_order_correction_request_id of this SalesOrderMutation.  # noqa: E501
        :type: str
        """

        self._sales_order_correction_request_id = sales_order_correction_request_id

    @property
    def sales_order_correction_request_reason(self):
        """Gets the sales_order_correction_request_reason of this SalesOrderMutation.  # noqa: E501


        :return: The sales_order_correction_request_reason of this SalesOrderMutation.  # noqa: E501
        :rtype: str
        """
        return self._sales_order_correction_request_reason

    @sales_order_correction_request_reason.setter
    def sales_order_correction_request_reason(self, sales_order_correction_request_reason):
        """Sets the sales_order_correction_request_reason of this SalesOrderMutation.


        :param sales_order_correction_request_reason: The sales_order_correction_request_reason of this SalesOrderMutation.  # noqa: E501
        :type: str
        """

        self._sales_order_correction_request_reason = sales_order_correction_request_reason

    @property
    def old_values(self):
        """Gets the old_values of this SalesOrderMutation.  # noqa: E501


        :return: The old_values of this SalesOrderMutation.  # noqa: E501
        :rtype: SalesOrderMutables
        """
        return self._old_values

    @old_values.setter
    def old_values(self, old_values):
        """Sets the old_values of this SalesOrderMutation.


        :param old_values: The old_values of this SalesOrderMutation.  # noqa: E501
        :type: SalesOrderMutables
        """
        if old_values is None:
            raise ValueError("Invalid value for `old_values`, must not be `None`")  # noqa: E501

        self._old_values = old_values

    @property
    def new_values(self):
        """Gets the new_values of this SalesOrderMutation.  # noqa: E501


        :return: The new_values of this SalesOrderMutation.  # noqa: E501
        :rtype: SalesOrderMutables
        """
        return self._new_values

    @new_values.setter
    def new_values(self, new_values):
        """Sets the new_values of this SalesOrderMutation.


        :param new_values: The new_values of this SalesOrderMutation.  # noqa: E501
        :type: SalesOrderMutables
        """
        if new_values is None:
            raise ValueError("Invalid value for `new_values`, must not be `None`")  # noqa: E501

        self._new_values = new_values

    @property
    def mutation_type(self):
        """Gets the mutation_type of this SalesOrderMutation.  # noqa: E501


        :return: The mutation_type of this SalesOrderMutation.  # noqa: E501
        :rtype: SalesOrderMutationUpdateType
        """
        return self._mutation_type

    @mutation_type.setter
    def mutation_type(self, mutation_type):
        """Sets the mutation_type of this SalesOrderMutation.


        :param mutation_type: The mutation_type of this SalesOrderMutation.  # noqa: E501
        :type: SalesOrderMutationUpdateType
        """
        if mutation_type is None:
            raise ValueError("Invalid value for `mutation_type`, must not be `None`")  # noqa: E501

        self._mutation_type = mutation_type

    @property
    def correction_type(self):
        """Gets the correction_type of this SalesOrderMutation.  # noqa: E501


        :return: The correction_type of this SalesOrderMutation.  # noqa: E501
        :rtype: SalesOrderMutationCorrectionType
        """
        return self._correction_type

    @correction_type.setter
    def correction_type(self, correction_type):
        """Sets the correction_type of this SalesOrderMutation.


        :param correction_type: The correction_type of this SalesOrderMutation.  # noqa: E501
        :type: SalesOrderMutationCorrectionType
        """
        if correction_type is None:
            raise ValueError("Invalid value for `correction_type`, must not be `None`")  # noqa: E501

        self._correction_type = correction_type

    @property
    def created_date_time(self):
        """Gets the created_date_time of this SalesOrderMutation.  # noqa: E501


        :return: The created_date_time of this SalesOrderMutation.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date_time

    @created_date_time.setter
    def created_date_time(self, created_date_time):
        """Sets the created_date_time of this SalesOrderMutation.


        :param created_date_time: The created_date_time of this SalesOrderMutation.  # noqa: E501
        :type: datetime
        """
        if created_date_time is None:
            raise ValueError("Invalid value for `created_date_time`, must not be `None`")  # noqa: E501

        self._created_date_time = created_date_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SalesOrderMutation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SalesOrderMutation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
