# coding: utf-8

"""
    Main - Floriday Suppliers API

    ÔªøEvery endpoint requires at least the `role:app` scope and the header `X-Api-Key` populated with your given API-key. Most endpoints also require an additional scope which is listed in their descriptions.  - üóù [Authorization server (staging)](https://idm.staging.floriday.io/oauth2/ausmw6b47z1BnlHkw0h7/.well-known/oauth-authorization-server) - üóù [Authorization server (live)](https://idm.floriday.io/oauth2/aus3testdcf2vyfs70i7/.well-known/oauth-authorization-server) - üìö [Documentation](https://developer.floriday.io/docs/welcome) - ‚ñ∂ [Coding screencast: getting started (NL)](https://www.youtube.com/watch?v=fdqzP7_Y_s8)  ---  _The current state of this version 2024v1 is **Main**._ * This version will be deprecated after October 2024. * This version will be removed after April 2025.  ---  üîó 2023v2: [Customers API](https://api.staging.floriday.io/customers-api-2023v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2023v2/swagger/index.html) üîó 2024v1: [Customers API](https://api.staging.floriday.io/customers-api-2024v1/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v1/swagger/index.html) üîó 2024v2: [Customers API](https://api.staging.floriday.io/customers-api-2024v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v2/swagger/index.html)   # noqa: E501

    OpenAPI spec version: 2024v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AddSalesOrderCorrectionRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sales_order_correction_request_id': 'str',
        'sales_order_id': 'str',
        'price_per_piece': 'Price',
        'package': 'Package',
        'number_of_pieces': 'int',
        'pieces_per_package': 'int',
        'incoterm': 'Incoterm',
        'reason': 'str',
        'created_by_user': 'str',
        'intended_for_customer_user': 'str',
        'is_cancel_request': 'bool',
        'created_by_user_name': 'str',
        'stock_application': 'SalesOrderCorrectionStockApplication'
    }

    attribute_map = {
        'sales_order_correction_request_id': 'salesOrderCorrectionRequestId',
        'sales_order_id': 'salesOrderId',
        'price_per_piece': 'pricePerPiece',
        'package': 'package',
        'number_of_pieces': 'numberOfPieces',
        'pieces_per_package': 'piecesPerPackage',
        'incoterm': 'incoterm',
        'reason': 'reason',
        'created_by_user': 'createdByUser',
        'intended_for_customer_user': 'intendedForCustomerUser',
        'is_cancel_request': 'isCancelRequest',
        'created_by_user_name': 'createdByUserName',
        'stock_application': 'stockApplication'
    }

    def __init__(self, sales_order_correction_request_id=None, sales_order_id=None, price_per_piece=None, package=None, number_of_pieces=None, pieces_per_package=None, incoterm=None, reason=None, created_by_user=None, intended_for_customer_user=None, is_cancel_request=None, created_by_user_name=None, stock_application=None):  # noqa: E501
        """AddSalesOrderCorrectionRequest - a model defined in Swagger"""  # noqa: E501
        self._sales_order_correction_request_id = None
        self._sales_order_id = None
        self._price_per_piece = None
        self._package = None
        self._number_of_pieces = None
        self._pieces_per_package = None
        self._incoterm = None
        self._reason = None
        self._created_by_user = None
        self._intended_for_customer_user = None
        self._is_cancel_request = None
        self._created_by_user_name = None
        self._stock_application = None
        self.discriminator = None
        self.sales_order_correction_request_id = sales_order_correction_request_id
        self.sales_order_id = sales_order_id
        if price_per_piece is not None:
            self.price_per_piece = price_per_piece
        if package is not None:
            self.package = package
        if number_of_pieces is not None:
            self.number_of_pieces = number_of_pieces
        if pieces_per_package is not None:
            self.pieces_per_package = pieces_per_package
        if incoterm is not None:
            self.incoterm = incoterm
        if reason is not None:
            self.reason = reason
        if created_by_user is not None:
            self.created_by_user = created_by_user
        if intended_for_customer_user is not None:
            self.intended_for_customer_user = intended_for_customer_user
        self.is_cancel_request = is_cancel_request
        if created_by_user_name is not None:
            self.created_by_user_name = created_by_user_name
        if stock_application is not None:
            self.stock_application = stock_application

    @property
    def sales_order_correction_request_id(self):
        """Gets the sales_order_correction_request_id of this AddSalesOrderCorrectionRequest.  # noqa: E501


        :return: The sales_order_correction_request_id of this AddSalesOrderCorrectionRequest.  # noqa: E501
        :rtype: str
        """
        return self._sales_order_correction_request_id

    @sales_order_correction_request_id.setter
    def sales_order_correction_request_id(self, sales_order_correction_request_id):
        """Sets the sales_order_correction_request_id of this AddSalesOrderCorrectionRequest.


        :param sales_order_correction_request_id: The sales_order_correction_request_id of this AddSalesOrderCorrectionRequest.  # noqa: E501
        :type: str
        """
        if sales_order_correction_request_id is None:
            raise ValueError("Invalid value for `sales_order_correction_request_id`, must not be `None`")  # noqa: E501

        self._sales_order_correction_request_id = sales_order_correction_request_id

    @property
    def sales_order_id(self):
        """Gets the sales_order_id of this AddSalesOrderCorrectionRequest.  # noqa: E501


        :return: The sales_order_id of this AddSalesOrderCorrectionRequest.  # noqa: E501
        :rtype: str
        """
        return self._sales_order_id

    @sales_order_id.setter
    def sales_order_id(self, sales_order_id):
        """Sets the sales_order_id of this AddSalesOrderCorrectionRequest.


        :param sales_order_id: The sales_order_id of this AddSalesOrderCorrectionRequest.  # noqa: E501
        :type: str
        """
        if sales_order_id is None:
            raise ValueError("Invalid value for `sales_order_id`, must not be `None`")  # noqa: E501

        self._sales_order_id = sales_order_id

    @property
    def price_per_piece(self):
        """Gets the price_per_piece of this AddSalesOrderCorrectionRequest.  # noqa: E501


        :return: The price_per_piece of this AddSalesOrderCorrectionRequest.  # noqa: E501
        :rtype: Price
        """
        return self._price_per_piece

    @price_per_piece.setter
    def price_per_piece(self, price_per_piece):
        """Sets the price_per_piece of this AddSalesOrderCorrectionRequest.


        :param price_per_piece: The price_per_piece of this AddSalesOrderCorrectionRequest.  # noqa: E501
        :type: Price
        """

        self._price_per_piece = price_per_piece

    @property
    def package(self):
        """Gets the package of this AddSalesOrderCorrectionRequest.  # noqa: E501


        :return: The package of this AddSalesOrderCorrectionRequest.  # noqa: E501
        :rtype: Package
        """
        return self._package

    @package.setter
    def package(self, package):
        """Sets the package of this AddSalesOrderCorrectionRequest.


        :param package: The package of this AddSalesOrderCorrectionRequest.  # noqa: E501
        :type: Package
        """

        self._package = package

    @property
    def number_of_pieces(self):
        """Gets the number_of_pieces of this AddSalesOrderCorrectionRequest.  # noqa: E501


        :return: The number_of_pieces of this AddSalesOrderCorrectionRequest.  # noqa: E501
        :rtype: int
        """
        return self._number_of_pieces

    @number_of_pieces.setter
    def number_of_pieces(self, number_of_pieces):
        """Sets the number_of_pieces of this AddSalesOrderCorrectionRequest.


        :param number_of_pieces: The number_of_pieces of this AddSalesOrderCorrectionRequest.  # noqa: E501
        :type: int
        """

        self._number_of_pieces = number_of_pieces

    @property
    def pieces_per_package(self):
        """Gets the pieces_per_package of this AddSalesOrderCorrectionRequest.  # noqa: E501


        :return: The pieces_per_package of this AddSalesOrderCorrectionRequest.  # noqa: E501
        :rtype: int
        """
        return self._pieces_per_package

    @pieces_per_package.setter
    def pieces_per_package(self, pieces_per_package):
        """Sets the pieces_per_package of this AddSalesOrderCorrectionRequest.


        :param pieces_per_package: The pieces_per_package of this AddSalesOrderCorrectionRequest.  # noqa: E501
        :type: int
        """

        self._pieces_per_package = pieces_per_package

    @property
    def incoterm(self):
        """Gets the incoterm of this AddSalesOrderCorrectionRequest.  # noqa: E501


        :return: The incoterm of this AddSalesOrderCorrectionRequest.  # noqa: E501
        :rtype: Incoterm
        """
        return self._incoterm

    @incoterm.setter
    def incoterm(self, incoterm):
        """Sets the incoterm of this AddSalesOrderCorrectionRequest.


        :param incoterm: The incoterm of this AddSalesOrderCorrectionRequest.  # noqa: E501
        :type: Incoterm
        """

        self._incoterm = incoterm

    @property
    def reason(self):
        """Gets the reason of this AddSalesOrderCorrectionRequest.  # noqa: E501


        :return: The reason of this AddSalesOrderCorrectionRequest.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this AddSalesOrderCorrectionRequest.


        :param reason: The reason of this AddSalesOrderCorrectionRequest.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def created_by_user(self):
        """Gets the created_by_user of this AddSalesOrderCorrectionRequest.  # noqa: E501

        Used to associate an existing Floriday account with the created correction request. The user will be shown within the Floriday portal as the created user.  # noqa: E501

        :return: The created_by_user of this AddSalesOrderCorrectionRequest.  # noqa: E501
        :rtype: str
        """
        return self._created_by_user

    @created_by_user.setter
    def created_by_user(self, created_by_user):
        """Sets the created_by_user of this AddSalesOrderCorrectionRequest.

        Used to associate an existing Floriday account with the created correction request. The user will be shown within the Floriday portal as the created user.  # noqa: E501

        :param created_by_user: The created_by_user of this AddSalesOrderCorrectionRequest.  # noqa: E501
        :type: str
        """

        self._created_by_user = created_by_user

    @property
    def intended_for_customer_user(self):
        """Gets the intended_for_customer_user of this AddSalesOrderCorrectionRequest.  # noqa: E501

        Used to associate an existing Floriday account with the created correction request. The user will be shown within the Floriday portal as the customer user.  # noqa: E501

        :return: The intended_for_customer_user of this AddSalesOrderCorrectionRequest.  # noqa: E501
        :rtype: str
        """
        return self._intended_for_customer_user

    @intended_for_customer_user.setter
    def intended_for_customer_user(self, intended_for_customer_user):
        """Sets the intended_for_customer_user of this AddSalesOrderCorrectionRequest.

        Used to associate an existing Floriday account with the created correction request. The user will be shown within the Floriday portal as the customer user.  # noqa: E501

        :param intended_for_customer_user: The intended_for_customer_user of this AddSalesOrderCorrectionRequest.  # noqa: E501
        :type: str
        """

        self._intended_for_customer_user = intended_for_customer_user

    @property
    def is_cancel_request(self):
        """Gets the is_cancel_request of this AddSalesOrderCorrectionRequest.  # noqa: E501


        :return: The is_cancel_request of this AddSalesOrderCorrectionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_cancel_request

    @is_cancel_request.setter
    def is_cancel_request(self, is_cancel_request):
        """Sets the is_cancel_request of this AddSalesOrderCorrectionRequest.


        :param is_cancel_request: The is_cancel_request of this AddSalesOrderCorrectionRequest.  # noqa: E501
        :type: bool
        """
        if is_cancel_request is None:
            raise ValueError("Invalid value for `is_cancel_request`, must not be `None`")  # noqa: E501

        self._is_cancel_request = is_cancel_request

    @property
    def created_by_user_name(self):
        """Gets the created_by_user_name of this AddSalesOrderCorrectionRequest.  # noqa: E501

        Name of the contact person responsible for the sales order correction request  # noqa: E501

        :return: The created_by_user_name of this AddSalesOrderCorrectionRequest.  # noqa: E501
        :rtype: str
        """
        return self._created_by_user_name

    @created_by_user_name.setter
    def created_by_user_name(self, created_by_user_name):
        """Sets the created_by_user_name of this AddSalesOrderCorrectionRequest.

        Name of the contact person responsible for the sales order correction request  # noqa: E501

        :param created_by_user_name: The created_by_user_name of this AddSalesOrderCorrectionRequest.  # noqa: E501
        :type: str
        """

        self._created_by_user_name = created_by_user_name

    @property
    def stock_application(self):
        """Gets the stock_application of this AddSalesOrderCorrectionRequest.  # noqa: E501


        :return: The stock_application of this AddSalesOrderCorrectionRequest.  # noqa: E501
        :rtype: SalesOrderCorrectionStockApplication
        """
        return self._stock_application

    @stock_application.setter
    def stock_application(self, stock_application):
        """Sets the stock_application of this AddSalesOrderCorrectionRequest.


        :param stock_application: The stock_application of this AddSalesOrderCorrectionRequest.  # noqa: E501
        :type: SalesOrderCorrectionStockApplication
        """

        self._stock_application = stock_application

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddSalesOrderCorrectionRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddSalesOrderCorrectionRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
