# coding: utf-8

"""
    Main - Floriday Suppliers API

    ÔªøEvery endpoint requires at least the `role:app` scope and the header `X-Api-Key` populated with your given API-key. Most endpoints also require an additional scope which is listed in their descriptions.  - üóù [Authorization server (staging)](https://idm.staging.floriday.io/oauth2/ausmw6b47z1BnlHkw0h7/.well-known/oauth-authorization-server) - üóù [Authorization server (live)](https://idm.floriday.io/oauth2/aus3testdcf2vyfs70i7/.well-known/oauth-authorization-server) - üìö [Documentation](https://developer.floriday.io/docs/welcome) - ‚ñ∂ [Coding screencast: getting started (NL)](https://www.youtube.com/watch?v=fdqzP7_Y_s8)  ---  _The current state of this version 2024v1 is **Main**._ * This version will be deprecated after October 2024. * This version will be removed after April 2025.  ---  üîó 2023v2: [Customers API](https://api.staging.floriday.io/customers-api-2023v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2023v2/swagger/index.html) üîó 2024v1: [Customers API](https://api.staging.floriday.io/customers-api-2024v1/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v1/swagger/index.html) üîó 2024v2: [Customers API](https://api.staging.floriday.io/customers-api-2024v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v2/swagger/index.html)   # noqa: E501

    OpenAPI spec version: 2024v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FulfillmentOrder(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fulfillment_order_id': 'str',
        'latest_delivery_date_time': 'datetime',
        'despatch_warehouse_id': 'str',
        'fulfilling_organization_id': 'str',
        'supplier_organization_id': 'str',
        'carrier_organization_id': 'str',
        'destination': 'Destination',
        'logistic_hub': 'LogisticHub',
        'load_carriers': 'list[LoadCarrierConfiguration]',
        'delivery_note_codes': 'list[str]',
        'type': 'FulfillmentType',
        'one_label_only': 'bool',
        'status': 'FulfillmentStatus',
        'submission_error': 'str',
        'sequence_number': 'int',
        'creation_date_time': 'datetime',
        'last_modified_date_time': 'datetime',
        'fulfillment_order_corrections': 'list[FulfillmentOrderCorrection]'
    }

    attribute_map = {
        'fulfillment_order_id': 'fulfillmentOrderId',
        'latest_delivery_date_time': 'latestDeliveryDateTime',
        'despatch_warehouse_id': 'despatchWarehouseId',
        'fulfilling_organization_id': 'fulfillingOrganizationId',
        'supplier_organization_id': 'supplierOrganizationId',
        'carrier_organization_id': 'carrierOrganizationId',
        'destination': 'destination',
        'logistic_hub': 'logisticHub',
        'load_carriers': 'loadCarriers',
        'delivery_note_codes': 'deliveryNoteCodes',
        'type': 'type',
        'one_label_only': 'oneLabelOnly',
        'status': 'status',
        'submission_error': 'submissionError',
        'sequence_number': 'sequenceNumber',
        'creation_date_time': 'creationDateTime',
        'last_modified_date_time': 'lastModifiedDateTime',
        'fulfillment_order_corrections': 'fulfillmentOrderCorrections'
    }

    def __init__(self, fulfillment_order_id=None, latest_delivery_date_time=None, despatch_warehouse_id=None, fulfilling_organization_id=None, supplier_organization_id=None, carrier_organization_id=None, destination=None, logistic_hub=None, load_carriers=None, delivery_note_codes=None, type=None, one_label_only=None, status=None, submission_error=None, sequence_number=None, creation_date_time=None, last_modified_date_time=None, fulfillment_order_corrections=None):  # noqa: E501
        """FulfillmentOrder - a model defined in Swagger"""  # noqa: E501
        self._fulfillment_order_id = None
        self._latest_delivery_date_time = None
        self._despatch_warehouse_id = None
        self._fulfilling_organization_id = None
        self._supplier_organization_id = None
        self._carrier_organization_id = None
        self._destination = None
        self._logistic_hub = None
        self._load_carriers = None
        self._delivery_note_codes = None
        self._type = None
        self._one_label_only = None
        self._status = None
        self._submission_error = None
        self._sequence_number = None
        self._creation_date_time = None
        self._last_modified_date_time = None
        self._fulfillment_order_corrections = None
        self.discriminator = None
        self.fulfillment_order_id = fulfillment_order_id
        self.latest_delivery_date_time = latest_delivery_date_time
        self.despatch_warehouse_id = despatch_warehouse_id
        self.fulfilling_organization_id = fulfilling_organization_id
        self.supplier_organization_id = supplier_organization_id
        if carrier_organization_id is not None:
            self.carrier_organization_id = carrier_organization_id
        self.destination = destination
        if logistic_hub is not None:
            self.logistic_hub = logistic_hub
        self.load_carriers = load_carriers
        self.delivery_note_codes = delivery_note_codes
        self.type = type
        self.one_label_only = one_label_only
        self.status = status
        if submission_error is not None:
            self.submission_error = submission_error
        self.sequence_number = sequence_number
        self.creation_date_time = creation_date_time
        self.last_modified_date_time = last_modified_date_time
        if fulfillment_order_corrections is not None:
            self.fulfillment_order_corrections = fulfillment_order_corrections

    @property
    def fulfillment_order_id(self):
        """Gets the fulfillment_order_id of this FulfillmentOrder.  # noqa: E501


        :return: The fulfillment_order_id of this FulfillmentOrder.  # noqa: E501
        :rtype: str
        """
        return self._fulfillment_order_id

    @fulfillment_order_id.setter
    def fulfillment_order_id(self, fulfillment_order_id):
        """Sets the fulfillment_order_id of this FulfillmentOrder.


        :param fulfillment_order_id: The fulfillment_order_id of this FulfillmentOrder.  # noqa: E501
        :type: str
        """
        if fulfillment_order_id is None:
            raise ValueError("Invalid value for `fulfillment_order_id`, must not be `None`")  # noqa: E501

        self._fulfillment_order_id = fulfillment_order_id

    @property
    def latest_delivery_date_time(self):
        """Gets the latest_delivery_date_time of this FulfillmentOrder.  # noqa: E501


        :return: The latest_delivery_date_time of this FulfillmentOrder.  # noqa: E501
        :rtype: datetime
        """
        return self._latest_delivery_date_time

    @latest_delivery_date_time.setter
    def latest_delivery_date_time(self, latest_delivery_date_time):
        """Sets the latest_delivery_date_time of this FulfillmentOrder.


        :param latest_delivery_date_time: The latest_delivery_date_time of this FulfillmentOrder.  # noqa: E501
        :type: datetime
        """
        if latest_delivery_date_time is None:
            raise ValueError("Invalid value for `latest_delivery_date_time`, must not be `None`")  # noqa: E501

        self._latest_delivery_date_time = latest_delivery_date_time

    @property
    def despatch_warehouse_id(self):
        """Gets the despatch_warehouse_id of this FulfillmentOrder.  # noqa: E501


        :return: The despatch_warehouse_id of this FulfillmentOrder.  # noqa: E501
        :rtype: str
        """
        return self._despatch_warehouse_id

    @despatch_warehouse_id.setter
    def despatch_warehouse_id(self, despatch_warehouse_id):
        """Sets the despatch_warehouse_id of this FulfillmentOrder.


        :param despatch_warehouse_id: The despatch_warehouse_id of this FulfillmentOrder.  # noqa: E501
        :type: str
        """
        if despatch_warehouse_id is None:
            raise ValueError("Invalid value for `despatch_warehouse_id`, must not be `None`")  # noqa: E501

        self._despatch_warehouse_id = despatch_warehouse_id

    @property
    def fulfilling_organization_id(self):
        """Gets the fulfilling_organization_id of this FulfillmentOrder.  # noqa: E501


        :return: The fulfilling_organization_id of this FulfillmentOrder.  # noqa: E501
        :rtype: str
        """
        return self._fulfilling_organization_id

    @fulfilling_organization_id.setter
    def fulfilling_organization_id(self, fulfilling_organization_id):
        """Sets the fulfilling_organization_id of this FulfillmentOrder.


        :param fulfilling_organization_id: The fulfilling_organization_id of this FulfillmentOrder.  # noqa: E501
        :type: str
        """
        if fulfilling_organization_id is None:
            raise ValueError("Invalid value for `fulfilling_organization_id`, must not be `None`")  # noqa: E501

        self._fulfilling_organization_id = fulfilling_organization_id

    @property
    def supplier_organization_id(self):
        """Gets the supplier_organization_id of this FulfillmentOrder.  # noqa: E501


        :return: The supplier_organization_id of this FulfillmentOrder.  # noqa: E501
        :rtype: str
        """
        return self._supplier_organization_id

    @supplier_organization_id.setter
    def supplier_organization_id(self, supplier_organization_id):
        """Sets the supplier_organization_id of this FulfillmentOrder.


        :param supplier_organization_id: The supplier_organization_id of this FulfillmentOrder.  # noqa: E501
        :type: str
        """
        if supplier_organization_id is None:
            raise ValueError("Invalid value for `supplier_organization_id`, must not be `None`")  # noqa: E501

        self._supplier_organization_id = supplier_organization_id

    @property
    def carrier_organization_id(self):
        """Gets the carrier_organization_id of this FulfillmentOrder.  # noqa: E501


        :return: The carrier_organization_id of this FulfillmentOrder.  # noqa: E501
        :rtype: str
        """
        return self._carrier_organization_id

    @carrier_organization_id.setter
    def carrier_organization_id(self, carrier_organization_id):
        """Sets the carrier_organization_id of this FulfillmentOrder.


        :param carrier_organization_id: The carrier_organization_id of this FulfillmentOrder.  # noqa: E501
        :type: str
        """

        self._carrier_organization_id = carrier_organization_id

    @property
    def destination(self):
        """Gets the destination of this FulfillmentOrder.  # noqa: E501


        :return: The destination of this FulfillmentOrder.  # noqa: E501
        :rtype: Destination
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this FulfillmentOrder.


        :param destination: The destination of this FulfillmentOrder.  # noqa: E501
        :type: Destination
        """
        if destination is None:
            raise ValueError("Invalid value for `destination`, must not be `None`")  # noqa: E501

        self._destination = destination

    @property
    def logistic_hub(self):
        """Gets the logistic_hub of this FulfillmentOrder.  # noqa: E501


        :return: The logistic_hub of this FulfillmentOrder.  # noqa: E501
        :rtype: LogisticHub
        """
        return self._logistic_hub

    @logistic_hub.setter
    def logistic_hub(self, logistic_hub):
        """Sets the logistic_hub of this FulfillmentOrder.


        :param logistic_hub: The logistic_hub of this FulfillmentOrder.  # noqa: E501
        :type: LogisticHub
        """

        self._logistic_hub = logistic_hub

    @property
    def load_carriers(self):
        """Gets the load_carriers of this FulfillmentOrder.  # noqa: E501


        :return: The load_carriers of this FulfillmentOrder.  # noqa: E501
        :rtype: list[LoadCarrierConfiguration]
        """
        return self._load_carriers

    @load_carriers.setter
    def load_carriers(self, load_carriers):
        """Sets the load_carriers of this FulfillmentOrder.


        :param load_carriers: The load_carriers of this FulfillmentOrder.  # noqa: E501
        :type: list[LoadCarrierConfiguration]
        """
        if load_carriers is None:
            raise ValueError("Invalid value for `load_carriers`, must not be `None`")  # noqa: E501

        self._load_carriers = load_carriers

    @property
    def delivery_note_codes(self):
        """Gets the delivery_note_codes of this FulfillmentOrder.  # noqa: E501


        :return: The delivery_note_codes of this FulfillmentOrder.  # noqa: E501
        :rtype: list[str]
        """
        return self._delivery_note_codes

    @delivery_note_codes.setter
    def delivery_note_codes(self, delivery_note_codes):
        """Sets the delivery_note_codes of this FulfillmentOrder.


        :param delivery_note_codes: The delivery_note_codes of this FulfillmentOrder.  # noqa: E501
        :type: list[str]
        """
        if delivery_note_codes is None:
            raise ValueError("Invalid value for `delivery_note_codes`, must not be `None`")  # noqa: E501

        self._delivery_note_codes = delivery_note_codes

    @property
    def type(self):
        """Gets the type of this FulfillmentOrder.  # noqa: E501


        :return: The type of this FulfillmentOrder.  # noqa: E501
        :rtype: FulfillmentType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FulfillmentOrder.


        :param type: The type of this FulfillmentOrder.  # noqa: E501
        :type: FulfillmentType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def one_label_only(self):
        """Gets the one_label_only of this FulfillmentOrder.  # noqa: E501


        :return: The one_label_only of this FulfillmentOrder.  # noqa: E501
        :rtype: bool
        """
        return self._one_label_only

    @one_label_only.setter
    def one_label_only(self, one_label_only):
        """Sets the one_label_only of this FulfillmentOrder.


        :param one_label_only: The one_label_only of this FulfillmentOrder.  # noqa: E501
        :type: bool
        """
        if one_label_only is None:
            raise ValueError("Invalid value for `one_label_only`, must not be `None`")  # noqa: E501

        self._one_label_only = one_label_only

    @property
    def status(self):
        """Gets the status of this FulfillmentOrder.  # noqa: E501


        :return: The status of this FulfillmentOrder.  # noqa: E501
        :rtype: FulfillmentStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FulfillmentOrder.


        :param status: The status of this FulfillmentOrder.  # noqa: E501
        :type: FulfillmentStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def submission_error(self):
        """Gets the submission_error of this FulfillmentOrder.  # noqa: E501


        :return: The submission_error of this FulfillmentOrder.  # noqa: E501
        :rtype: str
        """
        return self._submission_error

    @submission_error.setter
    def submission_error(self, submission_error):
        """Sets the submission_error of this FulfillmentOrder.


        :param submission_error: The submission_error of this FulfillmentOrder.  # noqa: E501
        :type: str
        """

        self._submission_error = submission_error

    @property
    def sequence_number(self):
        """Gets the sequence_number of this FulfillmentOrder.  # noqa: E501


        :return: The sequence_number of this FulfillmentOrder.  # noqa: E501
        :rtype: int
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this FulfillmentOrder.


        :param sequence_number: The sequence_number of this FulfillmentOrder.  # noqa: E501
        :type: int
        """
        if sequence_number is None:
            raise ValueError("Invalid value for `sequence_number`, must not be `None`")  # noqa: E501

        self._sequence_number = sequence_number

    @property
    def creation_date_time(self):
        """Gets the creation_date_time of this FulfillmentOrder.  # noqa: E501


        :return: The creation_date_time of this FulfillmentOrder.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date_time

    @creation_date_time.setter
    def creation_date_time(self, creation_date_time):
        """Sets the creation_date_time of this FulfillmentOrder.


        :param creation_date_time: The creation_date_time of this FulfillmentOrder.  # noqa: E501
        :type: datetime
        """
        if creation_date_time is None:
            raise ValueError("Invalid value for `creation_date_time`, must not be `None`")  # noqa: E501

        self._creation_date_time = creation_date_time

    @property
    def last_modified_date_time(self):
        """Gets the last_modified_date_time of this FulfillmentOrder.  # noqa: E501


        :return: The last_modified_date_time of this FulfillmentOrder.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_date_time

    @last_modified_date_time.setter
    def last_modified_date_time(self, last_modified_date_time):
        """Sets the last_modified_date_time of this FulfillmentOrder.


        :param last_modified_date_time: The last_modified_date_time of this FulfillmentOrder.  # noqa: E501
        :type: datetime
        """
        if last_modified_date_time is None:
            raise ValueError("Invalid value for `last_modified_date_time`, must not be `None`")  # noqa: E501

        self._last_modified_date_time = last_modified_date_time

    @property
    def fulfillment_order_corrections(self):
        """Gets the fulfillment_order_corrections of this FulfillmentOrder.  # noqa: E501


        :return: The fulfillment_order_corrections of this FulfillmentOrder.  # noqa: E501
        :rtype: list[FulfillmentOrderCorrection]
        """
        return self._fulfillment_order_corrections

    @fulfillment_order_corrections.setter
    def fulfillment_order_corrections(self, fulfillment_order_corrections):
        """Sets the fulfillment_order_corrections of this FulfillmentOrder.


        :param fulfillment_order_corrections: The fulfillment_order_corrections of this FulfillmentOrder.  # noqa: E501
        :type: list[FulfillmentOrderCorrection]
        """

        self._fulfillment_order_corrections = fulfillment_order_corrections

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FulfillmentOrder, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FulfillmentOrder):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
