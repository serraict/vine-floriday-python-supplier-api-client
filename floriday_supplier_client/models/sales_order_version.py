# coding: utf-8

"""
    Main - Floriday Suppliers API

    ÔªøEvery endpoint requires at least the `role:app` scope and the header `X-Api-Key` populated with your given API-key. Most endpoints also require an additional scope which is listed in their descriptions.  - üóù [Authorization server (staging)](https://idm.staging.floriday.io/oauth2/ausmw6b47z1BnlHkw0h7/.well-known/oauth-authorization-server) - üóù [Authorization server (live)](https://idm.floriday.io/oauth2/aus3testdcf2vyfs70i7/.well-known/oauth-authorization-server) - üìö [Documentation](https://developer.floriday.io/docs/welcome) - ‚ñ∂ [Coding screencast: getting started (NL)](https://www.youtube.com/watch?v=fdqzP7_Y_s8)  ---  _The current state of this version 2024v1 is **Main**._ * This version will be deprecated after October 2024. * This version will be removed after April 2025.  ---  üîó 2023v2: [Customers API](https://api.staging.floriday.io/customers-api-2023v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2023v2/swagger/index.html) üîó 2024v1: [Customers API](https://api.staging.floriday.io/customers-api-2024v1/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v1/swagger/index.html) üîó 2024v2: [Customers API](https://api.staging.floriday.io/customers-api-2024v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v2/swagger/index.html)   # noqa: E501

    OpenAPI spec version: 2024v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SalesOrderVersion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sales_order_id': 'str',
        'sales_channel_order_id': 'str',
        'customer_order_id': 'str',
        'supplier_organization_id': 'str',
        'customer_organization_id': 'str',
        'supply_line_id': 'str',
        'trade_item_id': 'str',
        'sales_channel': 'SalesChannel',
        'number_of_pieces': 'int',
        'trade_instrument': 'TradeInstrument',
        'packing_configuration': 'SalesOrderPackingConfiguration',
        'order_date_time': 'datetime',
        'price_per_piece': 'Price',
        'delivery': 'SalesOrderDelivery',
        'additional_services': 'list[OrderedAdditionalService]',
        'cancellation_deadline': 'datetime',
        'status': 'SalesOrderStatus',
        'credit_claim_status': 'CreditClaimStatus',
        'credit_claim_expiration_date_time': 'datetime',
        'sequence_number': 'int',
        'trade_item_version': 'int',
        'version': 'int',
        'contract_id': 'str',
        'blanket_order_line_id': 'str',
        'calculated_fields': 'SalesOrderCalculatedFields',
        'payment_provider': 'PaymentProvider',
        'delivery_remarks': 'str',
        'delivery_price_per_piece': 'Price',
        'despatch_warehouse_id': 'str',
        'creation_date_time': 'datetime',
        'last_modified_date_time': 'datetime',
        'created_by_supplier': 'bool'
    }

    attribute_map = {
        'sales_order_id': 'salesOrderId',
        'sales_channel_order_id': 'salesChannelOrderId',
        'customer_order_id': 'customerOrderId',
        'supplier_organization_id': 'supplierOrganizationId',
        'customer_organization_id': 'customerOrganizationId',
        'supply_line_id': 'supplyLineId',
        'trade_item_id': 'tradeItemId',
        'sales_channel': 'salesChannel',
        'number_of_pieces': 'numberOfPieces',
        'trade_instrument': 'tradeInstrument',
        'packing_configuration': 'packingConfiguration',
        'order_date_time': 'orderDateTime',
        'price_per_piece': 'pricePerPiece',
        'delivery': 'delivery',
        'additional_services': 'additionalServices',
        'cancellation_deadline': 'cancellationDeadline',
        'status': 'status',
        'credit_claim_status': 'creditClaimStatus',
        'credit_claim_expiration_date_time': 'creditClaimExpirationDateTime',
        'sequence_number': 'sequenceNumber',
        'trade_item_version': 'tradeItemVersion',
        'version': 'version',
        'contract_id': 'contractId',
        'blanket_order_line_id': 'blanketOrderLineId',
        'calculated_fields': 'calculatedFields',
        'payment_provider': 'paymentProvider',
        'delivery_remarks': 'deliveryRemarks',
        'delivery_price_per_piece': 'deliveryPricePerPiece',
        'despatch_warehouse_id': 'despatchWarehouseId',
        'creation_date_time': 'creationDateTime',
        'last_modified_date_time': 'lastModifiedDateTime',
        'created_by_supplier': 'createdBySupplier'
    }

    def __init__(self, sales_order_id=None, sales_channel_order_id=None, customer_order_id=None, supplier_organization_id=None, customer_organization_id=None, supply_line_id=None, trade_item_id=None, sales_channel=None, number_of_pieces=None, trade_instrument=None, packing_configuration=None, order_date_time=None, price_per_piece=None, delivery=None, additional_services=None, cancellation_deadline=None, status=None, credit_claim_status=None, credit_claim_expiration_date_time=None, sequence_number=None, trade_item_version=None, version=None, contract_id=None, blanket_order_line_id=None, calculated_fields=None, payment_provider=None, delivery_remarks=None, delivery_price_per_piece=None, despatch_warehouse_id=None, creation_date_time=None, last_modified_date_time=None, created_by_supplier=None):  # noqa: E501
        """SalesOrderVersion - a model defined in Swagger"""  # noqa: E501
        self._sales_order_id = None
        self._sales_channel_order_id = None
        self._customer_order_id = None
        self._supplier_organization_id = None
        self._customer_organization_id = None
        self._supply_line_id = None
        self._trade_item_id = None
        self._sales_channel = None
        self._number_of_pieces = None
        self._trade_instrument = None
        self._packing_configuration = None
        self._order_date_time = None
        self._price_per_piece = None
        self._delivery = None
        self._additional_services = None
        self._cancellation_deadline = None
        self._status = None
        self._credit_claim_status = None
        self._credit_claim_expiration_date_time = None
        self._sequence_number = None
        self._trade_item_version = None
        self._version = None
        self._contract_id = None
        self._blanket_order_line_id = None
        self._calculated_fields = None
        self._payment_provider = None
        self._delivery_remarks = None
        self._delivery_price_per_piece = None
        self._despatch_warehouse_id = None
        self._creation_date_time = None
        self._last_modified_date_time = None
        self._created_by_supplier = None
        self.discriminator = None
        self.sales_order_id = sales_order_id
        if sales_channel_order_id is not None:
            self.sales_channel_order_id = sales_channel_order_id
        if customer_order_id is not None:
            self.customer_order_id = customer_order_id
        self.supplier_organization_id = supplier_organization_id
        self.customer_organization_id = customer_organization_id
        if supply_line_id is not None:
            self.supply_line_id = supply_line_id
        self.trade_item_id = trade_item_id
        self.sales_channel = sales_channel
        self.number_of_pieces = number_of_pieces
        self.trade_instrument = trade_instrument
        self.packing_configuration = packing_configuration
        self.order_date_time = order_date_time
        self.price_per_piece = price_per_piece
        self.delivery = delivery
        if additional_services is not None:
            self.additional_services = additional_services
        if cancellation_deadline is not None:
            self.cancellation_deadline = cancellation_deadline
        if status is not None:
            self.status = status
        if credit_claim_status is not None:
            self.credit_claim_status = credit_claim_status
        if credit_claim_expiration_date_time is not None:
            self.credit_claim_expiration_date_time = credit_claim_expiration_date_time
        self.sequence_number = sequence_number
        if trade_item_version is not None:
            self.trade_item_version = trade_item_version
        if version is not None:
            self.version = version
        if contract_id is not None:
            self.contract_id = contract_id
        if blanket_order_line_id is not None:
            self.blanket_order_line_id = blanket_order_line_id
        if calculated_fields is not None:
            self.calculated_fields = calculated_fields
        if payment_provider is not None:
            self.payment_provider = payment_provider
        if delivery_remarks is not None:
            self.delivery_remarks = delivery_remarks
        if delivery_price_per_piece is not None:
            self.delivery_price_per_piece = delivery_price_per_piece
        if despatch_warehouse_id is not None:
            self.despatch_warehouse_id = despatch_warehouse_id
        if creation_date_time is not None:
            self.creation_date_time = creation_date_time
        if last_modified_date_time is not None:
            self.last_modified_date_time = last_modified_date_time
        if created_by_supplier is not None:
            self.created_by_supplier = created_by_supplier

    @property
    def sales_order_id(self):
        """Gets the sales_order_id of this SalesOrderVersion.  # noqa: E501


        :return: The sales_order_id of this SalesOrderVersion.  # noqa: E501
        :rtype: str
        """
        return self._sales_order_id

    @sales_order_id.setter
    def sales_order_id(self, sales_order_id):
        """Sets the sales_order_id of this SalesOrderVersion.


        :param sales_order_id: The sales_order_id of this SalesOrderVersion.  # noqa: E501
        :type: str
        """
        if sales_order_id is None:
            raise ValueError("Invalid value for `sales_order_id`, must not be `None`")  # noqa: E501

        self._sales_order_id = sales_order_id

    @property
    def sales_channel_order_id(self):
        """Gets the sales_channel_order_id of this SalesOrderVersion.  # noqa: E501


        :return: The sales_channel_order_id of this SalesOrderVersion.  # noqa: E501
        :rtype: str
        """
        return self._sales_channel_order_id

    @sales_channel_order_id.setter
    def sales_channel_order_id(self, sales_channel_order_id):
        """Sets the sales_channel_order_id of this SalesOrderVersion.


        :param sales_channel_order_id: The sales_channel_order_id of this SalesOrderVersion.  # noqa: E501
        :type: str
        """

        self._sales_channel_order_id = sales_channel_order_id

    @property
    def customer_order_id(self):
        """Gets the customer_order_id of this SalesOrderVersion.  # noqa: E501


        :return: The customer_order_id of this SalesOrderVersion.  # noqa: E501
        :rtype: str
        """
        return self._customer_order_id

    @customer_order_id.setter
    def customer_order_id(self, customer_order_id):
        """Sets the customer_order_id of this SalesOrderVersion.


        :param customer_order_id: The customer_order_id of this SalesOrderVersion.  # noqa: E501
        :type: str
        """

        self._customer_order_id = customer_order_id

    @property
    def supplier_organization_id(self):
        """Gets the supplier_organization_id of this SalesOrderVersion.  # noqa: E501


        :return: The supplier_organization_id of this SalesOrderVersion.  # noqa: E501
        :rtype: str
        """
        return self._supplier_organization_id

    @supplier_organization_id.setter
    def supplier_organization_id(self, supplier_organization_id):
        """Sets the supplier_organization_id of this SalesOrderVersion.


        :param supplier_organization_id: The supplier_organization_id of this SalesOrderVersion.  # noqa: E501
        :type: str
        """
        if supplier_organization_id is None:
            raise ValueError("Invalid value for `supplier_organization_id`, must not be `None`")  # noqa: E501

        self._supplier_organization_id = supplier_organization_id

    @property
    def customer_organization_id(self):
        """Gets the customer_organization_id of this SalesOrderVersion.  # noqa: E501


        :return: The customer_organization_id of this SalesOrderVersion.  # noqa: E501
        :rtype: str
        """
        return self._customer_organization_id

    @customer_organization_id.setter
    def customer_organization_id(self, customer_organization_id):
        """Sets the customer_organization_id of this SalesOrderVersion.


        :param customer_organization_id: The customer_organization_id of this SalesOrderVersion.  # noqa: E501
        :type: str
        """
        if customer_organization_id is None:
            raise ValueError("Invalid value for `customer_organization_id`, must not be `None`")  # noqa: E501

        self._customer_organization_id = customer_organization_id

    @property
    def supply_line_id(self):
        """Gets the supply_line_id of this SalesOrderVersion.  # noqa: E501


        :return: The supply_line_id of this SalesOrderVersion.  # noqa: E501
        :rtype: str
        """
        return self._supply_line_id

    @supply_line_id.setter
    def supply_line_id(self, supply_line_id):
        """Sets the supply_line_id of this SalesOrderVersion.


        :param supply_line_id: The supply_line_id of this SalesOrderVersion.  # noqa: E501
        :type: str
        """

        self._supply_line_id = supply_line_id

    @property
    def trade_item_id(self):
        """Gets the trade_item_id of this SalesOrderVersion.  # noqa: E501


        :return: The trade_item_id of this SalesOrderVersion.  # noqa: E501
        :rtype: str
        """
        return self._trade_item_id

    @trade_item_id.setter
    def trade_item_id(self, trade_item_id):
        """Sets the trade_item_id of this SalesOrderVersion.


        :param trade_item_id: The trade_item_id of this SalesOrderVersion.  # noqa: E501
        :type: str
        """
        if trade_item_id is None:
            raise ValueError("Invalid value for `trade_item_id`, must not be `None`")  # noqa: E501

        self._trade_item_id = trade_item_id

    @property
    def sales_channel(self):
        """Gets the sales_channel of this SalesOrderVersion.  # noqa: E501


        :return: The sales_channel of this SalesOrderVersion.  # noqa: E501
        :rtype: SalesChannel
        """
        return self._sales_channel

    @sales_channel.setter
    def sales_channel(self, sales_channel):
        """Sets the sales_channel of this SalesOrderVersion.


        :param sales_channel: The sales_channel of this SalesOrderVersion.  # noqa: E501
        :type: SalesChannel
        """
        if sales_channel is None:
            raise ValueError("Invalid value for `sales_channel`, must not be `None`")  # noqa: E501

        self._sales_channel = sales_channel

    @property
    def number_of_pieces(self):
        """Gets the number_of_pieces of this SalesOrderVersion.  # noqa: E501


        :return: The number_of_pieces of this SalesOrderVersion.  # noqa: E501
        :rtype: int
        """
        return self._number_of_pieces

    @number_of_pieces.setter
    def number_of_pieces(self, number_of_pieces):
        """Sets the number_of_pieces of this SalesOrderVersion.


        :param number_of_pieces: The number_of_pieces of this SalesOrderVersion.  # noqa: E501
        :type: int
        """
        if number_of_pieces is None:
            raise ValueError("Invalid value for `number_of_pieces`, must not be `None`")  # noqa: E501

        self._number_of_pieces = number_of_pieces

    @property
    def trade_instrument(self):
        """Gets the trade_instrument of this SalesOrderVersion.  # noqa: E501


        :return: The trade_instrument of this SalesOrderVersion.  # noqa: E501
        :rtype: TradeInstrument
        """
        return self._trade_instrument

    @trade_instrument.setter
    def trade_instrument(self, trade_instrument):
        """Sets the trade_instrument of this SalesOrderVersion.


        :param trade_instrument: The trade_instrument of this SalesOrderVersion.  # noqa: E501
        :type: TradeInstrument
        """
        if trade_instrument is None:
            raise ValueError("Invalid value for `trade_instrument`, must not be `None`")  # noqa: E501

        self._trade_instrument = trade_instrument

    @property
    def packing_configuration(self):
        """Gets the packing_configuration of this SalesOrderVersion.  # noqa: E501


        :return: The packing_configuration of this SalesOrderVersion.  # noqa: E501
        :rtype: SalesOrderPackingConfiguration
        """
        return self._packing_configuration

    @packing_configuration.setter
    def packing_configuration(self, packing_configuration):
        """Sets the packing_configuration of this SalesOrderVersion.


        :param packing_configuration: The packing_configuration of this SalesOrderVersion.  # noqa: E501
        :type: SalesOrderPackingConfiguration
        """
        if packing_configuration is None:
            raise ValueError("Invalid value for `packing_configuration`, must not be `None`")  # noqa: E501

        self._packing_configuration = packing_configuration

    @property
    def order_date_time(self):
        """Gets the order_date_time of this SalesOrderVersion.  # noqa: E501


        :return: The order_date_time of this SalesOrderVersion.  # noqa: E501
        :rtype: datetime
        """
        return self._order_date_time

    @order_date_time.setter
    def order_date_time(self, order_date_time):
        """Sets the order_date_time of this SalesOrderVersion.


        :param order_date_time: The order_date_time of this SalesOrderVersion.  # noqa: E501
        :type: datetime
        """
        if order_date_time is None:
            raise ValueError("Invalid value for `order_date_time`, must not be `None`")  # noqa: E501

        self._order_date_time = order_date_time

    @property
    def price_per_piece(self):
        """Gets the price_per_piece of this SalesOrderVersion.  # noqa: E501


        :return: The price_per_piece of this SalesOrderVersion.  # noqa: E501
        :rtype: Price
        """
        return self._price_per_piece

    @price_per_piece.setter
    def price_per_piece(self, price_per_piece):
        """Sets the price_per_piece of this SalesOrderVersion.


        :param price_per_piece: The price_per_piece of this SalesOrderVersion.  # noqa: E501
        :type: Price
        """
        if price_per_piece is None:
            raise ValueError("Invalid value for `price_per_piece`, must not be `None`")  # noqa: E501

        self._price_per_piece = price_per_piece

    @property
    def delivery(self):
        """Gets the delivery of this SalesOrderVersion.  # noqa: E501


        :return: The delivery of this SalesOrderVersion.  # noqa: E501
        :rtype: SalesOrderDelivery
        """
        return self._delivery

    @delivery.setter
    def delivery(self, delivery):
        """Sets the delivery of this SalesOrderVersion.


        :param delivery: The delivery of this SalesOrderVersion.  # noqa: E501
        :type: SalesOrderDelivery
        """
        if delivery is None:
            raise ValueError("Invalid value for `delivery`, must not be `None`")  # noqa: E501

        self._delivery = delivery

    @property
    def additional_services(self):
        """Gets the additional_services of this SalesOrderVersion.  # noqa: E501


        :return: The additional_services of this SalesOrderVersion.  # noqa: E501
        :rtype: list[OrderedAdditionalService]
        """
        return self._additional_services

    @additional_services.setter
    def additional_services(self, additional_services):
        """Sets the additional_services of this SalesOrderVersion.


        :param additional_services: The additional_services of this SalesOrderVersion.  # noqa: E501
        :type: list[OrderedAdditionalService]
        """

        self._additional_services = additional_services

    @property
    def cancellation_deadline(self):
        """Gets the cancellation_deadline of this SalesOrderVersion.  # noqa: E501


        :return: The cancellation_deadline of this SalesOrderVersion.  # noqa: E501
        :rtype: datetime
        """
        return self._cancellation_deadline

    @cancellation_deadline.setter
    def cancellation_deadline(self, cancellation_deadline):
        """Sets the cancellation_deadline of this SalesOrderVersion.


        :param cancellation_deadline: The cancellation_deadline of this SalesOrderVersion.  # noqa: E501
        :type: datetime
        """

        self._cancellation_deadline = cancellation_deadline

    @property
    def status(self):
        """Gets the status of this SalesOrderVersion.  # noqa: E501


        :return: The status of this SalesOrderVersion.  # noqa: E501
        :rtype: SalesOrderStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SalesOrderVersion.


        :param status: The status of this SalesOrderVersion.  # noqa: E501
        :type: SalesOrderStatus
        """

        self._status = status

    @property
    def credit_claim_status(self):
        """Gets the credit_claim_status of this SalesOrderVersion.  # noqa: E501


        :return: The credit_claim_status of this SalesOrderVersion.  # noqa: E501
        :rtype: CreditClaimStatus
        """
        return self._credit_claim_status

    @credit_claim_status.setter
    def credit_claim_status(self, credit_claim_status):
        """Sets the credit_claim_status of this SalesOrderVersion.


        :param credit_claim_status: The credit_claim_status of this SalesOrderVersion.  # noqa: E501
        :type: CreditClaimStatus
        """

        self._credit_claim_status = credit_claim_status

    @property
    def credit_claim_expiration_date_time(self):
        """Gets the credit_claim_expiration_date_time of this SalesOrderVersion.  # noqa: E501


        :return: The credit_claim_expiration_date_time of this SalesOrderVersion.  # noqa: E501
        :rtype: datetime
        """
        return self._credit_claim_expiration_date_time

    @credit_claim_expiration_date_time.setter
    def credit_claim_expiration_date_time(self, credit_claim_expiration_date_time):
        """Sets the credit_claim_expiration_date_time of this SalesOrderVersion.


        :param credit_claim_expiration_date_time: The credit_claim_expiration_date_time of this SalesOrderVersion.  # noqa: E501
        :type: datetime
        """

        self._credit_claim_expiration_date_time = credit_claim_expiration_date_time

    @property
    def sequence_number(self):
        """Gets the sequence_number of this SalesOrderVersion.  # noqa: E501


        :return: The sequence_number of this SalesOrderVersion.  # noqa: E501
        :rtype: int
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this SalesOrderVersion.


        :param sequence_number: The sequence_number of this SalesOrderVersion.  # noqa: E501
        :type: int
        """
        if sequence_number is None:
            raise ValueError("Invalid value for `sequence_number`, must not be `None`")  # noqa: E501

        self._sequence_number = sequence_number

    @property
    def trade_item_version(self):
        """Gets the trade_item_version of this SalesOrderVersion.  # noqa: E501


        :return: The trade_item_version of this SalesOrderVersion.  # noqa: E501
        :rtype: int
        """
        return self._trade_item_version

    @trade_item_version.setter
    def trade_item_version(self, trade_item_version):
        """Sets the trade_item_version of this SalesOrderVersion.


        :param trade_item_version: The trade_item_version of this SalesOrderVersion.  # noqa: E501
        :type: int
        """

        self._trade_item_version = trade_item_version

    @property
    def version(self):
        """Gets the version of this SalesOrderVersion.  # noqa: E501


        :return: The version of this SalesOrderVersion.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SalesOrderVersion.


        :param version: The version of this SalesOrderVersion.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def contract_id(self):
        """Gets the contract_id of this SalesOrderVersion.  # noqa: E501


        :return: The contract_id of this SalesOrderVersion.  # noqa: E501
        :rtype: str
        """
        return self._contract_id

    @contract_id.setter
    def contract_id(self, contract_id):
        """Sets the contract_id of this SalesOrderVersion.


        :param contract_id: The contract_id of this SalesOrderVersion.  # noqa: E501
        :type: str
        """

        self._contract_id = contract_id

    @property
    def blanket_order_line_id(self):
        """Gets the blanket_order_line_id of this SalesOrderVersion.  # noqa: E501


        :return: The blanket_order_line_id of this SalesOrderVersion.  # noqa: E501
        :rtype: str
        """
        return self._blanket_order_line_id

    @blanket_order_line_id.setter
    def blanket_order_line_id(self, blanket_order_line_id):
        """Sets the blanket_order_line_id of this SalesOrderVersion.


        :param blanket_order_line_id: The blanket_order_line_id of this SalesOrderVersion.  # noqa: E501
        :type: str
        """

        self._blanket_order_line_id = blanket_order_line_id

    @property
    def calculated_fields(self):
        """Gets the calculated_fields of this SalesOrderVersion.  # noqa: E501


        :return: The calculated_fields of this SalesOrderVersion.  # noqa: E501
        :rtype: SalesOrderCalculatedFields
        """
        return self._calculated_fields

    @calculated_fields.setter
    def calculated_fields(self, calculated_fields):
        """Sets the calculated_fields of this SalesOrderVersion.


        :param calculated_fields: The calculated_fields of this SalesOrderVersion.  # noqa: E501
        :type: SalesOrderCalculatedFields
        """

        self._calculated_fields = calculated_fields

    @property
    def payment_provider(self):
        """Gets the payment_provider of this SalesOrderVersion.  # noqa: E501


        :return: The payment_provider of this SalesOrderVersion.  # noqa: E501
        :rtype: PaymentProvider
        """
        return self._payment_provider

    @payment_provider.setter
    def payment_provider(self, payment_provider):
        """Sets the payment_provider of this SalesOrderVersion.


        :param payment_provider: The payment_provider of this SalesOrderVersion.  # noqa: E501
        :type: PaymentProvider
        """

        self._payment_provider = payment_provider

    @property
    def delivery_remarks(self):
        """Gets the delivery_remarks of this SalesOrderVersion.  # noqa: E501


        :return: The delivery_remarks of this SalesOrderVersion.  # noqa: E501
        :rtype: str
        """
        return self._delivery_remarks

    @delivery_remarks.setter
    def delivery_remarks(self, delivery_remarks):
        """Sets the delivery_remarks of this SalesOrderVersion.


        :param delivery_remarks: The delivery_remarks of this SalesOrderVersion.  # noqa: E501
        :type: str
        """

        self._delivery_remarks = delivery_remarks

    @property
    def delivery_price_per_piece(self):
        """Gets the delivery_price_per_piece of this SalesOrderVersion.  # noqa: E501


        :return: The delivery_price_per_piece of this SalesOrderVersion.  # noqa: E501
        :rtype: Price
        """
        return self._delivery_price_per_piece

    @delivery_price_per_piece.setter
    def delivery_price_per_piece(self, delivery_price_per_piece):
        """Sets the delivery_price_per_piece of this SalesOrderVersion.


        :param delivery_price_per_piece: The delivery_price_per_piece of this SalesOrderVersion.  # noqa: E501
        :type: Price
        """

        self._delivery_price_per_piece = delivery_price_per_piece

    @property
    def despatch_warehouse_id(self):
        """Gets the despatch_warehouse_id of this SalesOrderVersion.  # noqa: E501


        :return: The despatch_warehouse_id of this SalesOrderVersion.  # noqa: E501
        :rtype: str
        """
        return self._despatch_warehouse_id

    @despatch_warehouse_id.setter
    def despatch_warehouse_id(self, despatch_warehouse_id):
        """Sets the despatch_warehouse_id of this SalesOrderVersion.


        :param despatch_warehouse_id: The despatch_warehouse_id of this SalesOrderVersion.  # noqa: E501
        :type: str
        """

        self._despatch_warehouse_id = despatch_warehouse_id

    @property
    def creation_date_time(self):
        """Gets the creation_date_time of this SalesOrderVersion.  # noqa: E501


        :return: The creation_date_time of this SalesOrderVersion.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date_time

    @creation_date_time.setter
    def creation_date_time(self, creation_date_time):
        """Sets the creation_date_time of this SalesOrderVersion.


        :param creation_date_time: The creation_date_time of this SalesOrderVersion.  # noqa: E501
        :type: datetime
        """

        self._creation_date_time = creation_date_time

    @property
    def last_modified_date_time(self):
        """Gets the last_modified_date_time of this SalesOrderVersion.  # noqa: E501


        :return: The last_modified_date_time of this SalesOrderVersion.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_date_time

    @last_modified_date_time.setter
    def last_modified_date_time(self, last_modified_date_time):
        """Sets the last_modified_date_time of this SalesOrderVersion.


        :param last_modified_date_time: The last_modified_date_time of this SalesOrderVersion.  # noqa: E501
        :type: datetime
        """

        self._last_modified_date_time = last_modified_date_time

    @property
    def created_by_supplier(self):
        """Gets the created_by_supplier of this SalesOrderVersion.  # noqa: E501


        :return: The created_by_supplier of this SalesOrderVersion.  # noqa: E501
        :rtype: bool
        """
        return self._created_by_supplier

    @created_by_supplier.setter
    def created_by_supplier(self, created_by_supplier):
        """Sets the created_by_supplier of this SalesOrderVersion.


        :param created_by_supplier: The created_by_supplier of this SalesOrderVersion.  # noqa: E501
        :type: bool
        """

        self._created_by_supplier = created_by_supplier

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SalesOrderVersion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SalesOrderVersion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
