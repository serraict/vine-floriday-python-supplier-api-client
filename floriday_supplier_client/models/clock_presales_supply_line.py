# coding: utf-8

"""
    Main - Floriday Suppliers API

    ÔªøEvery endpoint requires at least the `role:app` scope and the header `X-Api-Key` populated with your given API-key. Most endpoints also require an additional scope which is listed in their descriptions.  - üóù [Authorization server (staging)](https://idm.staging.floriday.io/oauth2/ausmw6b47z1BnlHkw0h7/.well-known/oauth-authorization-server) - üóù [Authorization server (live)](https://idm.floriday.io/oauth2/aus3testdcf2vyfs70i7/.well-known/oauth-authorization-server) - üìö [Documentation](https://developer.floriday.io/docs/welcome) - ‚ñ∂ [Coding screencast: getting started (NL)](https://www.youtube.com/watch?v=fdqzP7_Y_s8)  ---  _The current state of this version 2024v1 is **Main**._ * This version will be deprecated after October 2024. * This version will be removed after April 2025.  ---  üîó 2023v2: [Customers API](https://api.staging.floriday.io/customers-api-2023v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2023v2/swagger/index.html) üîó 2024v1: [Customers API](https://api.staging.floriday.io/customers-api-2024v1/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v1/swagger/index.html) üîó 2024v2: [Customers API](https://api.staging.floriday.io/customers-api-2024v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v2/swagger/index.html)   # noqa: E501

    OpenAPI spec version: 2024v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClockPresalesSupplyLine(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'supply_line_id': 'str',
        'status': 'SupplyStatus',
        'trade_item_id': 'str',
        'trade_item_version': 'int',
        'batch_id': 'str',
        'price_per_piece': 'Price',
        'delivery_note_reference': 'str',
        'delivery_note_code': 'str',
        'delivery_note_letter': 'str',
        'number_of_pieces': 'int',
        'packing_configuration': 'ClockSupplyLinePackingConfiguration',
        'trade_period': 'TradePeriod',
        'supplier_organization_id': 'str',
        'sequence_number': 'int',
        'creation_date_time': 'datetime',
        'last_modified_date_time': 'datetime',
        'auction_date': 'datetime',
        'initial_auction_location': 'AuctionLocation',
        'photo_url': 'str'
    }

    attribute_map = {
        'supply_line_id': 'supplyLineId',
        'status': 'status',
        'trade_item_id': 'tradeItemId',
        'trade_item_version': 'tradeItemVersion',
        'batch_id': 'batchId',
        'price_per_piece': 'pricePerPiece',
        'delivery_note_reference': 'deliveryNoteReference',
        'delivery_note_code': 'deliveryNoteCode',
        'delivery_note_letter': 'deliveryNoteLetter',
        'number_of_pieces': 'numberOfPieces',
        'packing_configuration': 'packingConfiguration',
        'trade_period': 'tradePeriod',
        'supplier_organization_id': 'supplierOrganizationId',
        'sequence_number': 'sequenceNumber',
        'creation_date_time': 'creationDateTime',
        'last_modified_date_time': 'lastModifiedDateTime',
        'auction_date': 'auctionDate',
        'initial_auction_location': 'initialAuctionLocation',
        'photo_url': 'photoUrl'
    }

    def __init__(self, supply_line_id=None, status=None, trade_item_id=None, trade_item_version=None, batch_id=None, price_per_piece=None, delivery_note_reference=None, delivery_note_code=None, delivery_note_letter=None, number_of_pieces=None, packing_configuration=None, trade_period=None, supplier_organization_id=None, sequence_number=None, creation_date_time=None, last_modified_date_time=None, auction_date=None, initial_auction_location=None, photo_url=None):  # noqa: E501
        """ClockPresalesSupplyLine - a model defined in Swagger"""  # noqa: E501
        self._supply_line_id = None
        self._status = None
        self._trade_item_id = None
        self._trade_item_version = None
        self._batch_id = None
        self._price_per_piece = None
        self._delivery_note_reference = None
        self._delivery_note_code = None
        self._delivery_note_letter = None
        self._number_of_pieces = None
        self._packing_configuration = None
        self._trade_period = None
        self._supplier_organization_id = None
        self._sequence_number = None
        self._creation_date_time = None
        self._last_modified_date_time = None
        self._auction_date = None
        self._initial_auction_location = None
        self._photo_url = None
        self.discriminator = None
        self.supply_line_id = supply_line_id
        self.status = status
        self.trade_item_id = trade_item_id
        if trade_item_version is not None:
            self.trade_item_version = trade_item_version
        if batch_id is not None:
            self.batch_id = batch_id
        self.price_per_piece = price_per_piece
        self.delivery_note_reference = delivery_note_reference
        self.delivery_note_code = delivery_note_code
        self.delivery_note_letter = delivery_note_letter
        self.number_of_pieces = number_of_pieces
        self.packing_configuration = packing_configuration
        self.trade_period = trade_period
        self.supplier_organization_id = supplier_organization_id
        self.sequence_number = sequence_number
        self.creation_date_time = creation_date_time
        if last_modified_date_time is not None:
            self.last_modified_date_time = last_modified_date_time
        self.auction_date = auction_date
        self.initial_auction_location = initial_auction_location
        self.photo_url = photo_url

    @property
    def supply_line_id(self):
        """Gets the supply_line_id of this ClockPresalesSupplyLine.  # noqa: E501


        :return: The supply_line_id of this ClockPresalesSupplyLine.  # noqa: E501
        :rtype: str
        """
        return self._supply_line_id

    @supply_line_id.setter
    def supply_line_id(self, supply_line_id):
        """Sets the supply_line_id of this ClockPresalesSupplyLine.


        :param supply_line_id: The supply_line_id of this ClockPresalesSupplyLine.  # noqa: E501
        :type: str
        """
        if supply_line_id is None:
            raise ValueError("Invalid value for `supply_line_id`, must not be `None`")  # noqa: E501

        self._supply_line_id = supply_line_id

    @property
    def status(self):
        """Gets the status of this ClockPresalesSupplyLine.  # noqa: E501


        :return: The status of this ClockPresalesSupplyLine.  # noqa: E501
        :rtype: SupplyStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ClockPresalesSupplyLine.


        :param status: The status of this ClockPresalesSupplyLine.  # noqa: E501
        :type: SupplyStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def trade_item_id(self):
        """Gets the trade_item_id of this ClockPresalesSupplyLine.  # noqa: E501


        :return: The trade_item_id of this ClockPresalesSupplyLine.  # noqa: E501
        :rtype: str
        """
        return self._trade_item_id

    @trade_item_id.setter
    def trade_item_id(self, trade_item_id):
        """Sets the trade_item_id of this ClockPresalesSupplyLine.


        :param trade_item_id: The trade_item_id of this ClockPresalesSupplyLine.  # noqa: E501
        :type: str
        """
        if trade_item_id is None:
            raise ValueError("Invalid value for `trade_item_id`, must not be `None`")  # noqa: E501

        self._trade_item_id = trade_item_id

    @property
    def trade_item_version(self):
        """Gets the trade_item_version of this ClockPresalesSupplyLine.  # noqa: E501


        :return: The trade_item_version of this ClockPresalesSupplyLine.  # noqa: E501
        :rtype: int
        """
        return self._trade_item_version

    @trade_item_version.setter
    def trade_item_version(self, trade_item_version):
        """Sets the trade_item_version of this ClockPresalesSupplyLine.


        :param trade_item_version: The trade_item_version of this ClockPresalesSupplyLine.  # noqa: E501
        :type: int
        """

        self._trade_item_version = trade_item_version

    @property
    def batch_id(self):
        """Gets the batch_id of this ClockPresalesSupplyLine.  # noqa: E501


        :return: The batch_id of this ClockPresalesSupplyLine.  # noqa: E501
        :rtype: str
        """
        return self._batch_id

    @batch_id.setter
    def batch_id(self, batch_id):
        """Sets the batch_id of this ClockPresalesSupplyLine.


        :param batch_id: The batch_id of this ClockPresalesSupplyLine.  # noqa: E501
        :type: str
        """

        self._batch_id = batch_id

    @property
    def price_per_piece(self):
        """Gets the price_per_piece of this ClockPresalesSupplyLine.  # noqa: E501


        :return: The price_per_piece of this ClockPresalesSupplyLine.  # noqa: E501
        :rtype: Price
        """
        return self._price_per_piece

    @price_per_piece.setter
    def price_per_piece(self, price_per_piece):
        """Sets the price_per_piece of this ClockPresalesSupplyLine.


        :param price_per_piece: The price_per_piece of this ClockPresalesSupplyLine.  # noqa: E501
        :type: Price
        """
        if price_per_piece is None:
            raise ValueError("Invalid value for `price_per_piece`, must not be `None`")  # noqa: E501

        self._price_per_piece = price_per_piece

    @property
    def delivery_note_reference(self):
        """Gets the delivery_note_reference of this ClockPresalesSupplyLine.  # noqa: E501

        DeliveryNoteCode + letter of the original clock delivery  # noqa: E501

        :return: The delivery_note_reference of this ClockPresalesSupplyLine.  # noqa: E501
        :rtype: str
        """
        return self._delivery_note_reference

    @delivery_note_reference.setter
    def delivery_note_reference(self, delivery_note_reference):
        """Sets the delivery_note_reference of this ClockPresalesSupplyLine.

        DeliveryNoteCode + letter of the original clock delivery  # noqa: E501

        :param delivery_note_reference: The delivery_note_reference of this ClockPresalesSupplyLine.  # noqa: E501
        :type: str
        """
        if delivery_note_reference is None:
            raise ValueError("Invalid value for `delivery_note_reference`, must not be `None`")  # noqa: E501

        self._delivery_note_reference = delivery_note_reference

    @property
    def delivery_note_code(self):
        """Gets the delivery_note_code of this ClockPresalesSupplyLine.  # noqa: E501


        :return: The delivery_note_code of this ClockPresalesSupplyLine.  # noqa: E501
        :rtype: str
        """
        return self._delivery_note_code

    @delivery_note_code.setter
    def delivery_note_code(self, delivery_note_code):
        """Sets the delivery_note_code of this ClockPresalesSupplyLine.


        :param delivery_note_code: The delivery_note_code of this ClockPresalesSupplyLine.  # noqa: E501
        :type: str
        """
        if delivery_note_code is None:
            raise ValueError("Invalid value for `delivery_note_code`, must not be `None`")  # noqa: E501

        self._delivery_note_code = delivery_note_code

    @property
    def delivery_note_letter(self):
        """Gets the delivery_note_letter of this ClockPresalesSupplyLine.  # noqa: E501


        :return: The delivery_note_letter of this ClockPresalesSupplyLine.  # noqa: E501
        :rtype: str
        """
        return self._delivery_note_letter

    @delivery_note_letter.setter
    def delivery_note_letter(self, delivery_note_letter):
        """Sets the delivery_note_letter of this ClockPresalesSupplyLine.


        :param delivery_note_letter: The delivery_note_letter of this ClockPresalesSupplyLine.  # noqa: E501
        :type: str
        """
        if delivery_note_letter is None:
            raise ValueError("Invalid value for `delivery_note_letter`, must not be `None`")  # noqa: E501

        self._delivery_note_letter = delivery_note_letter

    @property
    def number_of_pieces(self):
        """Gets the number_of_pieces of this ClockPresalesSupplyLine.  # noqa: E501


        :return: The number_of_pieces of this ClockPresalesSupplyLine.  # noqa: E501
        :rtype: int
        """
        return self._number_of_pieces

    @number_of_pieces.setter
    def number_of_pieces(self, number_of_pieces):
        """Sets the number_of_pieces of this ClockPresalesSupplyLine.


        :param number_of_pieces: The number_of_pieces of this ClockPresalesSupplyLine.  # noqa: E501
        :type: int
        """
        if number_of_pieces is None:
            raise ValueError("Invalid value for `number_of_pieces`, must not be `None`")  # noqa: E501

        self._number_of_pieces = number_of_pieces

    @property
    def packing_configuration(self):
        """Gets the packing_configuration of this ClockPresalesSupplyLine.  # noqa: E501


        :return: The packing_configuration of this ClockPresalesSupplyLine.  # noqa: E501
        :rtype: ClockSupplyLinePackingConfiguration
        """
        return self._packing_configuration

    @packing_configuration.setter
    def packing_configuration(self, packing_configuration):
        """Sets the packing_configuration of this ClockPresalesSupplyLine.


        :param packing_configuration: The packing_configuration of this ClockPresalesSupplyLine.  # noqa: E501
        :type: ClockSupplyLinePackingConfiguration
        """
        if packing_configuration is None:
            raise ValueError("Invalid value for `packing_configuration`, must not be `None`")  # noqa: E501

        self._packing_configuration = packing_configuration

    @property
    def trade_period(self):
        """Gets the trade_period of this ClockPresalesSupplyLine.  # noqa: E501


        :return: The trade_period of this ClockPresalesSupplyLine.  # noqa: E501
        :rtype: TradePeriod
        """
        return self._trade_period

    @trade_period.setter
    def trade_period(self, trade_period):
        """Sets the trade_period of this ClockPresalesSupplyLine.


        :param trade_period: The trade_period of this ClockPresalesSupplyLine.  # noqa: E501
        :type: TradePeriod
        """
        if trade_period is None:
            raise ValueError("Invalid value for `trade_period`, must not be `None`")  # noqa: E501

        self._trade_period = trade_period

    @property
    def supplier_organization_id(self):
        """Gets the supplier_organization_id of this ClockPresalesSupplyLine.  # noqa: E501


        :return: The supplier_organization_id of this ClockPresalesSupplyLine.  # noqa: E501
        :rtype: str
        """
        return self._supplier_organization_id

    @supplier_organization_id.setter
    def supplier_organization_id(self, supplier_organization_id):
        """Sets the supplier_organization_id of this ClockPresalesSupplyLine.


        :param supplier_organization_id: The supplier_organization_id of this ClockPresalesSupplyLine.  # noqa: E501
        :type: str
        """
        if supplier_organization_id is None:
            raise ValueError("Invalid value for `supplier_organization_id`, must not be `None`")  # noqa: E501

        self._supplier_organization_id = supplier_organization_id

    @property
    def sequence_number(self):
        """Gets the sequence_number of this ClockPresalesSupplyLine.  # noqa: E501


        :return: The sequence_number of this ClockPresalesSupplyLine.  # noqa: E501
        :rtype: int
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this ClockPresalesSupplyLine.


        :param sequence_number: The sequence_number of this ClockPresalesSupplyLine.  # noqa: E501
        :type: int
        """
        if sequence_number is None:
            raise ValueError("Invalid value for `sequence_number`, must not be `None`")  # noqa: E501

        self._sequence_number = sequence_number

    @property
    def creation_date_time(self):
        """Gets the creation_date_time of this ClockPresalesSupplyLine.  # noqa: E501


        :return: The creation_date_time of this ClockPresalesSupplyLine.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date_time

    @creation_date_time.setter
    def creation_date_time(self, creation_date_time):
        """Sets the creation_date_time of this ClockPresalesSupplyLine.


        :param creation_date_time: The creation_date_time of this ClockPresalesSupplyLine.  # noqa: E501
        :type: datetime
        """
        if creation_date_time is None:
            raise ValueError("Invalid value for `creation_date_time`, must not be `None`")  # noqa: E501

        self._creation_date_time = creation_date_time

    @property
    def last_modified_date_time(self):
        """Gets the last_modified_date_time of this ClockPresalesSupplyLine.  # noqa: E501


        :return: The last_modified_date_time of this ClockPresalesSupplyLine.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_date_time

    @last_modified_date_time.setter
    def last_modified_date_time(self, last_modified_date_time):
        """Sets the last_modified_date_time of this ClockPresalesSupplyLine.


        :param last_modified_date_time: The last_modified_date_time of this ClockPresalesSupplyLine.  # noqa: E501
        :type: datetime
        """

        self._last_modified_date_time = last_modified_date_time

    @property
    def auction_date(self):
        """Gets the auction_date of this ClockPresalesSupplyLine.  # noqa: E501


        :return: The auction_date of this ClockPresalesSupplyLine.  # noqa: E501
        :rtype: datetime
        """
        return self._auction_date

    @auction_date.setter
    def auction_date(self, auction_date):
        """Sets the auction_date of this ClockPresalesSupplyLine.


        :param auction_date: The auction_date of this ClockPresalesSupplyLine.  # noqa: E501
        :type: datetime
        """
        if auction_date is None:
            raise ValueError("Invalid value for `auction_date`, must not be `None`")  # noqa: E501

        self._auction_date = auction_date

    @property
    def initial_auction_location(self):
        """Gets the initial_auction_location of this ClockPresalesSupplyLine.  # noqa: E501


        :return: The initial_auction_location of this ClockPresalesSupplyLine.  # noqa: E501
        :rtype: AuctionLocation
        """
        return self._initial_auction_location

    @initial_auction_location.setter
    def initial_auction_location(self, initial_auction_location):
        """Sets the initial_auction_location of this ClockPresalesSupplyLine.


        :param initial_auction_location: The initial_auction_location of this ClockPresalesSupplyLine.  # noqa: E501
        :type: AuctionLocation
        """
        if initial_auction_location is None:
            raise ValueError("Invalid value for `initial_auction_location`, must not be `None`")  # noqa: E501

        self._initial_auction_location = initial_auction_location

    @property
    def photo_url(self):
        """Gets the photo_url of this ClockPresalesSupplyLine.  # noqa: E501

        Image URLs posted as Floriday media must conform with the following format https://image.floriday.io/.  # noqa: E501

        :return: The photo_url of this ClockPresalesSupplyLine.  # noqa: E501
        :rtype: str
        """
        return self._photo_url

    @photo_url.setter
    def photo_url(self, photo_url):
        """Sets the photo_url of this ClockPresalesSupplyLine.

        Image URLs posted as Floriday media must conform with the following format https://image.floriday.io/.  # noqa: E501

        :param photo_url: The photo_url of this ClockPresalesSupplyLine.  # noqa: E501
        :type: str
        """
        if photo_url is None:
            raise ValueError("Invalid value for `photo_url`, must not be `None`")  # noqa: E501

        self._photo_url = photo_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClockPresalesSupplyLine, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClockPresalesSupplyLine):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
