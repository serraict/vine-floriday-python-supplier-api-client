# coding: utf-8

"""
    Main - Floriday Suppliers API

    ÔªøEvery endpoint requires at least the `role:app` scope and the header `X-Api-Key` populated with your given API-key. Most endpoints also require an additional scope which is listed in their descriptions.  - üóù [Authorization server (staging)](https://idm.staging.floriday.io/oauth2/ausmw6b47z1BnlHkw0h7/.well-known/oauth-authorization-server) - üóù [Authorization server (live)](https://idm.floriday.io/oauth2/aus3testdcf2vyfs70i7/.well-known/oauth-authorization-server) - üìö [Documentation](https://developer.floriday.io/docs/welcome) - ‚ñ∂ [Coding screencast: getting started (NL)](https://www.youtube.com/watch?v=fdqzP7_Y_s8)  ---  _The current state of this version 2024v1 is **Main**._ * This version will be deprecated after October 2024. * This version will be removed after April 2025.  ---  üîó 2023v2: [Customers API](https://api.staging.floriday.io/customers-api-2023v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2023v2/swagger/index.html) üîó 2024v1: [Customers API](https://api.staging.floriday.io/customers-api-2024v1/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v1/swagger/index.html) üîó 2024v2: [Customers API](https://api.staging.floriday.io/customers-api-2024v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v2/swagger/index.html)   # noqa: E501

    OpenAPI spec version: 2024v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AddCustomerOffer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'supply_line_id': 'str',
        'trade_item_id': 'str',
        'availability': 'Availability',
        'number_of_pieces': 'int',
        'price_per_piece': 'Price',
        'order_period': 'TradePeriod',
        'delivery_period': 'TradePeriod',
        'warehouse_id': 'str',
        'included_services': 'list[CommercialService]',
        'allowed_customer_organization_ids': 'list[str]',
        'packing_configurations': 'list[PackingConfigurationBase]',
        'sales_unit': 'SalesUnit',
        'agreement_reference': 'AgreementReference',
        'batch_id': 'str',
        'volume_prices': 'list[AddVolumePrice]'
    }

    attribute_map = {
        'supply_line_id': 'supplyLineId',
        'trade_item_id': 'tradeItemId',
        'availability': 'availability',
        'number_of_pieces': 'numberOfPieces',
        'price_per_piece': 'pricePerPiece',
        'order_period': 'orderPeriod',
        'delivery_period': 'deliveryPeriod',
        'warehouse_id': 'warehouseId',
        'included_services': 'includedServices',
        'allowed_customer_organization_ids': 'allowedCustomerOrganizationIds',
        'packing_configurations': 'packingConfigurations',
        'sales_unit': 'salesUnit',
        'agreement_reference': 'agreementReference',
        'batch_id': 'batchId',
        'volume_prices': 'volumePrices'
    }

    def __init__(self, supply_line_id=None, trade_item_id=None, availability=None, number_of_pieces=None, price_per_piece=None, order_period=None, delivery_period=None, warehouse_id=None, included_services=None, allowed_customer_organization_ids=None, packing_configurations=None, sales_unit=None, agreement_reference=None, batch_id=None, volume_prices=None):  # noqa: E501
        """AddCustomerOffer - a model defined in Swagger"""  # noqa: E501
        self._supply_line_id = None
        self._trade_item_id = None
        self._availability = None
        self._number_of_pieces = None
        self._price_per_piece = None
        self._order_period = None
        self._delivery_period = None
        self._warehouse_id = None
        self._included_services = None
        self._allowed_customer_organization_ids = None
        self._packing_configurations = None
        self._sales_unit = None
        self._agreement_reference = None
        self._batch_id = None
        self._volume_prices = None
        self.discriminator = None
        self.supply_line_id = supply_line_id
        self.trade_item_id = trade_item_id
        self.availability = availability
        self.number_of_pieces = number_of_pieces
        self.price_per_piece = price_per_piece
        self.order_period = order_period
        self.delivery_period = delivery_period
        self.warehouse_id = warehouse_id
        if included_services is not None:
            self.included_services = included_services
        self.allowed_customer_organization_ids = allowed_customer_organization_ids
        if packing_configurations is not None:
            self.packing_configurations = packing_configurations
        self.sales_unit = sales_unit
        if agreement_reference is not None:
            self.agreement_reference = agreement_reference
        if batch_id is not None:
            self.batch_id = batch_id
        if volume_prices is not None:
            self.volume_prices = volume_prices

    @property
    def supply_line_id(self):
        """Gets the supply_line_id of this AddCustomerOffer.  # noqa: E501


        :return: The supply_line_id of this AddCustomerOffer.  # noqa: E501
        :rtype: str
        """
        return self._supply_line_id

    @supply_line_id.setter
    def supply_line_id(self, supply_line_id):
        """Sets the supply_line_id of this AddCustomerOffer.


        :param supply_line_id: The supply_line_id of this AddCustomerOffer.  # noqa: E501
        :type: str
        """
        if supply_line_id is None:
            raise ValueError("Invalid value for `supply_line_id`, must not be `None`")  # noqa: E501

        self._supply_line_id = supply_line_id

    @property
    def trade_item_id(self):
        """Gets the trade_item_id of this AddCustomerOffer.  # noqa: E501


        :return: The trade_item_id of this AddCustomerOffer.  # noqa: E501
        :rtype: str
        """
        return self._trade_item_id

    @trade_item_id.setter
    def trade_item_id(self, trade_item_id):
        """Sets the trade_item_id of this AddCustomerOffer.


        :param trade_item_id: The trade_item_id of this AddCustomerOffer.  # noqa: E501
        :type: str
        """
        if trade_item_id is None:
            raise ValueError("Invalid value for `trade_item_id`, must not be `None`")  # noqa: E501

        self._trade_item_id = trade_item_id

    @property
    def availability(self):
        """Gets the availability of this AddCustomerOffer.  # noqa: E501


        :return: The availability of this AddCustomerOffer.  # noqa: E501
        :rtype: Availability
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this AddCustomerOffer.


        :param availability: The availability of this AddCustomerOffer.  # noqa: E501
        :type: Availability
        """
        if availability is None:
            raise ValueError("Invalid value for `availability`, must not be `None`")  # noqa: E501

        self._availability = availability

    @property
    def number_of_pieces(self):
        """Gets the number_of_pieces of this AddCustomerOffer.  # noqa: E501


        :return: The number_of_pieces of this AddCustomerOffer.  # noqa: E501
        :rtype: int
        """
        return self._number_of_pieces

    @number_of_pieces.setter
    def number_of_pieces(self, number_of_pieces):
        """Sets the number_of_pieces of this AddCustomerOffer.


        :param number_of_pieces: The number_of_pieces of this AddCustomerOffer.  # noqa: E501
        :type: int
        """
        if number_of_pieces is None:
            raise ValueError("Invalid value for `number_of_pieces`, must not be `None`")  # noqa: E501

        self._number_of_pieces = number_of_pieces

    @property
    def price_per_piece(self):
        """Gets the price_per_piece of this AddCustomerOffer.  # noqa: E501


        :return: The price_per_piece of this AddCustomerOffer.  # noqa: E501
        :rtype: Price
        """
        return self._price_per_piece

    @price_per_piece.setter
    def price_per_piece(self, price_per_piece):
        """Sets the price_per_piece of this AddCustomerOffer.


        :param price_per_piece: The price_per_piece of this AddCustomerOffer.  # noqa: E501
        :type: Price
        """
        if price_per_piece is None:
            raise ValueError("Invalid value for `price_per_piece`, must not be `None`")  # noqa: E501

        self._price_per_piece = price_per_piece

    @property
    def order_period(self):
        """Gets the order_period of this AddCustomerOffer.  # noqa: E501


        :return: The order_period of this AddCustomerOffer.  # noqa: E501
        :rtype: TradePeriod
        """
        return self._order_period

    @order_period.setter
    def order_period(self, order_period):
        """Sets the order_period of this AddCustomerOffer.


        :param order_period: The order_period of this AddCustomerOffer.  # noqa: E501
        :type: TradePeriod
        """
        if order_period is None:
            raise ValueError("Invalid value for `order_period`, must not be `None`")  # noqa: E501

        self._order_period = order_period

    @property
    def delivery_period(self):
        """Gets the delivery_period of this AddCustomerOffer.  # noqa: E501


        :return: The delivery_period of this AddCustomerOffer.  # noqa: E501
        :rtype: TradePeriod
        """
        return self._delivery_period

    @delivery_period.setter
    def delivery_period(self, delivery_period):
        """Sets the delivery_period of this AddCustomerOffer.


        :param delivery_period: The delivery_period of this AddCustomerOffer.  # noqa: E501
        :type: TradePeriod
        """
        if delivery_period is None:
            raise ValueError("Invalid value for `delivery_period`, must not be `None`")  # noqa: E501

        self._delivery_period = delivery_period

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this AddCustomerOffer.  # noqa: E501


        :return: The warehouse_id of this AddCustomerOffer.  # noqa: E501
        :rtype: str
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this AddCustomerOffer.


        :param warehouse_id: The warehouse_id of this AddCustomerOffer.  # noqa: E501
        :type: str
        """
        if warehouse_id is None:
            raise ValueError("Invalid value for `warehouse_id`, must not be `None`")  # noqa: E501

        self._warehouse_id = warehouse_id

    @property
    def included_services(self):
        """Gets the included_services of this AddCustomerOffer.  # noqa: E501


        :return: The included_services of this AddCustomerOffer.  # noqa: E501
        :rtype: list[CommercialService]
        """
        return self._included_services

    @included_services.setter
    def included_services(self, included_services):
        """Sets the included_services of this AddCustomerOffer.


        :param included_services: The included_services of this AddCustomerOffer.  # noqa: E501
        :type: list[CommercialService]
        """

        self._included_services = included_services

    @property
    def allowed_customer_organization_ids(self):
        """Gets the allowed_customer_organization_ids of this AddCustomerOffer.  # noqa: E501


        :return: The allowed_customer_organization_ids of this AddCustomerOffer.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_customer_organization_ids

    @allowed_customer_organization_ids.setter
    def allowed_customer_organization_ids(self, allowed_customer_organization_ids):
        """Sets the allowed_customer_organization_ids of this AddCustomerOffer.


        :param allowed_customer_organization_ids: The allowed_customer_organization_ids of this AddCustomerOffer.  # noqa: E501
        :type: list[str]
        """
        if allowed_customer_organization_ids is None:
            raise ValueError("Invalid value for `allowed_customer_organization_ids`, must not be `None`")  # noqa: E501

        self._allowed_customer_organization_ids = allowed_customer_organization_ids

    @property
    def packing_configurations(self):
        """Gets the packing_configurations of this AddCustomerOffer.  # noqa: E501


        :return: The packing_configurations of this AddCustomerOffer.  # noqa: E501
        :rtype: list[PackingConfigurationBase]
        """
        return self._packing_configurations

    @packing_configurations.setter
    def packing_configurations(self, packing_configurations):
        """Sets the packing_configurations of this AddCustomerOffer.


        :param packing_configurations: The packing_configurations of this AddCustomerOffer.  # noqa: E501
        :type: list[PackingConfigurationBase]
        """

        self._packing_configurations = packing_configurations

    @property
    def sales_unit(self):
        """Gets the sales_unit of this AddCustomerOffer.  # noqa: E501


        :return: The sales_unit of this AddCustomerOffer.  # noqa: E501
        :rtype: SalesUnit
        """
        return self._sales_unit

    @sales_unit.setter
    def sales_unit(self, sales_unit):
        """Sets the sales_unit of this AddCustomerOffer.


        :param sales_unit: The sales_unit of this AddCustomerOffer.  # noqa: E501
        :type: SalesUnit
        """
        if sales_unit is None:
            raise ValueError("Invalid value for `sales_unit`, must not be `None`")  # noqa: E501

        self._sales_unit = sales_unit

    @property
    def agreement_reference(self):
        """Gets the agreement_reference of this AddCustomerOffer.  # noqa: E501


        :return: The agreement_reference of this AddCustomerOffer.  # noqa: E501
        :rtype: AgreementReference
        """
        return self._agreement_reference

    @agreement_reference.setter
    def agreement_reference(self, agreement_reference):
        """Sets the agreement_reference of this AddCustomerOffer.


        :param agreement_reference: The agreement_reference of this AddCustomerOffer.  # noqa: E501
        :type: AgreementReference
        """

        self._agreement_reference = agreement_reference

    @property
    def batch_id(self):
        """Gets the batch_id of this AddCustomerOffer.  # noqa: E501


        :return: The batch_id of this AddCustomerOffer.  # noqa: E501
        :rtype: str
        """
        return self._batch_id

    @batch_id.setter
    def batch_id(self, batch_id):
        """Sets the batch_id of this AddCustomerOffer.


        :param batch_id: The batch_id of this AddCustomerOffer.  # noqa: E501
        :type: str
        """

        self._batch_id = batch_id

    @property
    def volume_prices(self):
        """Gets the volume_prices of this AddCustomerOffer.  # noqa: E501


        :return: The volume_prices of this AddCustomerOffer.  # noqa: E501
        :rtype: list[AddVolumePrice]
        """
        return self._volume_prices

    @volume_prices.setter
    def volume_prices(self, volume_prices):
        """Sets the volume_prices of this AddCustomerOffer.


        :param volume_prices: The volume_prices of this AddCustomerOffer.  # noqa: E501
        :type: list[AddVolumePrice]
        """

        self._volume_prices = volume_prices

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddCustomerOffer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddCustomerOffer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
