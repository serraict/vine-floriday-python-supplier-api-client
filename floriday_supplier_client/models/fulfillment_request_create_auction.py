# coding: utf-8

"""
    Main - Floriday Suppliers API

    ÔªøEvery endpoint requires at least the `role:app` scope and the header `X-Api-Key` populated with your given API-key. Most endpoints also require an additional scope which is listed in their descriptions.  - üóù [Authorization server (staging)](https://idm.staging.floriday.io/oauth2/ausmw6b47z1BnlHkw0h7/.well-known/oauth-authorization-server) - üóù [Authorization server (live)](https://idm.floriday.io/oauth2/aus3testdcf2vyfs70i7/.well-known/oauth-authorization-server) - üìö [Documentation](https://developer.floriday.io/docs/welcome) - ‚ñ∂ [Coding screencast: getting started (NL)](https://www.youtube.com/watch?v=fdqzP7_Y_s8)  ---  _The current state of this version 2024v1 is **Main**._ * This version will be deprecated after October 2024. * This version will be removed after April 2025.  ---  üîó 2023v2: [Customers API](https://api.staging.floriday.io/customers-api-2023v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2023v2/swagger/index.html) üîó 2024v1: [Customers API](https://api.staging.floriday.io/customers-api-2024v1/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v1/swagger/index.html) üîó 2024v2: [Customers API](https://api.staging.floriday.io/customers-api-2024v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v2/swagger/index.html)   # noqa: E501

    OpenAPI spec version: 2024v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FulfillmentRequestCreateAuction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fulfillment_request_id': 'str',
        'batch_id': 'str',
        'image_url': 'str',
        'number_of_packages': 'int',
        'clock_pre_sales_price': 'float',
        'clock_minimum_price': 'float',
        'delivery_remark': 'str',
        'auction_remark': 'str',
        'service_code': 'int',
        'packing_agent_organization_id': 'str'
    }

    attribute_map = {
        'fulfillment_request_id': 'fulfillmentRequestId',
        'batch_id': 'batchId',
        'image_url': 'imageUrl',
        'number_of_packages': 'numberOfPackages',
        'clock_pre_sales_price': 'clockPreSalesPrice',
        'clock_minimum_price': 'clockMinimumPrice',
        'delivery_remark': 'deliveryRemark',
        'auction_remark': 'auctionRemark',
        'service_code': 'serviceCode',
        'packing_agent_organization_id': 'packingAgentOrganizationId'
    }

    def __init__(self, fulfillment_request_id=None, batch_id=None, image_url=None, number_of_packages=None, clock_pre_sales_price=None, clock_minimum_price=None, delivery_remark=None, auction_remark=None, service_code=None, packing_agent_organization_id=None):  # noqa: E501
        """FulfillmentRequestCreateAuction - a model defined in Swagger"""  # noqa: E501
        self._fulfillment_request_id = None
        self._batch_id = None
        self._image_url = None
        self._number_of_packages = None
        self._clock_pre_sales_price = None
        self._clock_minimum_price = None
        self._delivery_remark = None
        self._auction_remark = None
        self._service_code = None
        self._packing_agent_organization_id = None
        self.discriminator = None
        self.fulfillment_request_id = fulfillment_request_id
        self.batch_id = batch_id
        if image_url is not None:
            self.image_url = image_url
        self.number_of_packages = number_of_packages
        if clock_pre_sales_price is not None:
            self.clock_pre_sales_price = clock_pre_sales_price
        if clock_minimum_price is not None:
            self.clock_minimum_price = clock_minimum_price
        if delivery_remark is not None:
            self.delivery_remark = delivery_remark
        if auction_remark is not None:
            self.auction_remark = auction_remark
        if service_code is not None:
            self.service_code = service_code
        if packing_agent_organization_id is not None:
            self.packing_agent_organization_id = packing_agent_organization_id

    @property
    def fulfillment_request_id(self):
        """Gets the fulfillment_request_id of this FulfillmentRequestCreateAuction.  # noqa: E501


        :return: The fulfillment_request_id of this FulfillmentRequestCreateAuction.  # noqa: E501
        :rtype: str
        """
        return self._fulfillment_request_id

    @fulfillment_request_id.setter
    def fulfillment_request_id(self, fulfillment_request_id):
        """Sets the fulfillment_request_id of this FulfillmentRequestCreateAuction.


        :param fulfillment_request_id: The fulfillment_request_id of this FulfillmentRequestCreateAuction.  # noqa: E501
        :type: str
        """
        if fulfillment_request_id is None:
            raise ValueError("Invalid value for `fulfillment_request_id`, must not be `None`")  # noqa: E501

        self._fulfillment_request_id = fulfillment_request_id

    @property
    def batch_id(self):
        """Gets the batch_id of this FulfillmentRequestCreateAuction.  # noqa: E501


        :return: The batch_id of this FulfillmentRequestCreateAuction.  # noqa: E501
        :rtype: str
        """
        return self._batch_id

    @batch_id.setter
    def batch_id(self, batch_id):
        """Sets the batch_id of this FulfillmentRequestCreateAuction.


        :param batch_id: The batch_id of this FulfillmentRequestCreateAuction.  # noqa: E501
        :type: str
        """
        if batch_id is None:
            raise ValueError("Invalid value for `batch_id`, must not be `None`")  # noqa: E501

        self._batch_id = batch_id

    @property
    def image_url(self):
        """Gets the image_url of this FulfillmentRequestCreateAuction.  # noqa: E501

        Image URLs posted as Floriday media must conform with the following format https://image.floriday.io/.  # noqa: E501

        :return: The image_url of this FulfillmentRequestCreateAuction.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this FulfillmentRequestCreateAuction.

        Image URLs posted as Floriday media must conform with the following format https://image.floriday.io/.  # noqa: E501

        :param image_url: The image_url of this FulfillmentRequestCreateAuction.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def number_of_packages(self):
        """Gets the number_of_packages of this FulfillmentRequestCreateAuction.  # noqa: E501


        :return: The number_of_packages of this FulfillmentRequestCreateAuction.  # noqa: E501
        :rtype: int
        """
        return self._number_of_packages

    @number_of_packages.setter
    def number_of_packages(self, number_of_packages):
        """Sets the number_of_packages of this FulfillmentRequestCreateAuction.


        :param number_of_packages: The number_of_packages of this FulfillmentRequestCreateAuction.  # noqa: E501
        :type: int
        """
        if number_of_packages is None:
            raise ValueError("Invalid value for `number_of_packages`, must not be `None`")  # noqa: E501

        self._number_of_packages = number_of_packages

    @property
    def clock_pre_sales_price(self):
        """Gets the clock_pre_sales_price of this FulfillmentRequestCreateAuction.  # noqa: E501


        :return: The clock_pre_sales_price of this FulfillmentRequestCreateAuction.  # noqa: E501
        :rtype: float
        """
        return self._clock_pre_sales_price

    @clock_pre_sales_price.setter
    def clock_pre_sales_price(self, clock_pre_sales_price):
        """Sets the clock_pre_sales_price of this FulfillmentRequestCreateAuction.


        :param clock_pre_sales_price: The clock_pre_sales_price of this FulfillmentRequestCreateAuction.  # noqa: E501
        :type: float
        """

        self._clock_pre_sales_price = clock_pre_sales_price

    @property
    def clock_minimum_price(self):
        """Gets the clock_minimum_price of this FulfillmentRequestCreateAuction.  # noqa: E501


        :return: The clock_minimum_price of this FulfillmentRequestCreateAuction.  # noqa: E501
        :rtype: float
        """
        return self._clock_minimum_price

    @clock_minimum_price.setter
    def clock_minimum_price(self, clock_minimum_price):
        """Sets the clock_minimum_price of this FulfillmentRequestCreateAuction.


        :param clock_minimum_price: The clock_minimum_price of this FulfillmentRequestCreateAuction.  # noqa: E501
        :type: float
        """

        self._clock_minimum_price = clock_minimum_price

    @property
    def delivery_remark(self):
        """Gets the delivery_remark of this FulfillmentRequestCreateAuction.  # noqa: E501

        Used as delivery remarks when creating a FulfillmentOrder.  # noqa: E501

        :return: The delivery_remark of this FulfillmentRequestCreateAuction.  # noqa: E501
        :rtype: str
        """
        return self._delivery_remark

    @delivery_remark.setter
    def delivery_remark(self, delivery_remark):
        """Sets the delivery_remark of this FulfillmentRequestCreateAuction.

        Used as delivery remarks when creating a FulfillmentOrder.  # noqa: E501

        :param delivery_remark: The delivery_remark of this FulfillmentRequestCreateAuction.  # noqa: E501
        :type: str
        """

        self._delivery_remark = delivery_remark

    @property
    def auction_remark(self):
        """Gets the auction_remark of this FulfillmentRequestCreateAuction.  # noqa: E501

        Used as a remark for the auctioneer.  # noqa: E501

        :return: The auction_remark of this FulfillmentRequestCreateAuction.  # noqa: E501
        :rtype: str
        """
        return self._auction_remark

    @auction_remark.setter
    def auction_remark(self, auction_remark):
        """Sets the auction_remark of this FulfillmentRequestCreateAuction.

        Used as a remark for the auctioneer.  # noqa: E501

        :param auction_remark: The auction_remark of this FulfillmentRequestCreateAuction.  # noqa: E501
        :type: str
        """

        self._auction_remark = auction_remark

    @property
    def service_code(self):
        """Gets the service_code of this FulfillmentRequestCreateAuction.  # noqa: E501


        :return: The service_code of this FulfillmentRequestCreateAuction.  # noqa: E501
        :rtype: int
        """
        return self._service_code

    @service_code.setter
    def service_code(self, service_code):
        """Sets the service_code of this FulfillmentRequestCreateAuction.


        :param service_code: The service_code of this FulfillmentRequestCreateAuction.  # noqa: E501
        :type: int
        """

        self._service_code = service_code

    @property
    def packing_agent_organization_id(self):
        """Gets the packing_agent_organization_id of this FulfillmentRequestCreateAuction.  # noqa: E501


        :return: The packing_agent_organization_id of this FulfillmentRequestCreateAuction.  # noqa: E501
        :rtype: str
        """
        return self._packing_agent_organization_id

    @packing_agent_organization_id.setter
    def packing_agent_organization_id(self, packing_agent_organization_id):
        """Sets the packing_agent_organization_id of this FulfillmentRequestCreateAuction.


        :param packing_agent_organization_id: The packing_agent_organization_id of this FulfillmentRequestCreateAuction.  # noqa: E501
        :type: str
        """

        self._packing_agent_organization_id = packing_agent_organization_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FulfillmentRequestCreateAuction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FulfillmentRequestCreateAuction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
