# coding: utf-8

"""
    Main - Floriday Suppliers API

    ÔªøEvery endpoint requires at least the `role:app` scope and the header `X-Api-Key` populated with your given API-key. Most endpoints also require an additional scope which is listed in their descriptions.  - üóù [Authorization server (staging)](https://idm.staging.floriday.io/oauth2/ausmw6b47z1BnlHkw0h7/.well-known/oauth-authorization-server) - üóù [Authorization server (live)](https://idm.floriday.io/oauth2/aus3testdcf2vyfs70i7/.well-known/oauth-authorization-server) - üìö [Documentation](https://developer.floriday.io/docs/welcome) - ‚ñ∂ [Coding screencast: getting started (NL)](https://www.youtube.com/watch?v=fdqzP7_Y_s8)  ---  _The current state of this version 2024v1 is **Main**._ * This version will be deprecated after October 2024. * This version will be removed after April 2025.  ---  üîó 2023v2: [Customers API](https://api.staging.floriday.io/customers-api-2023v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2023v2/swagger/index.html) üîó 2024v1: [Customers API](https://api.staging.floriday.io/customers-api-2024v1/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v1/swagger/index.html) üîó 2024v2: [Customers API](https://api.staging.floriday.io/customers-api-2024v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v2/swagger/index.html)   # noqa: E501

    OpenAPI spec version: 2024v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClockSupplyLinePackingConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pieces_per_package': 'int',
        'package': 'Package',
        'packages_per_layer': 'int',
        'layers_per_load_carrier': 'int',
        'load_carrier': 'SupplyLoadCarrierType'
    }

    attribute_map = {
        'pieces_per_package': 'piecesPerPackage',
        'package': 'package',
        'packages_per_layer': 'packagesPerLayer',
        'layers_per_load_carrier': 'layersPerLoadCarrier',
        'load_carrier': 'loadCarrier'
    }

    def __init__(self, pieces_per_package=None, package=None, packages_per_layer=None, layers_per_load_carrier=None, load_carrier=None):  # noqa: E501
        """ClockSupplyLinePackingConfiguration - a model defined in Swagger"""  # noqa: E501
        self._pieces_per_package = None
        self._package = None
        self._packages_per_layer = None
        self._layers_per_load_carrier = None
        self._load_carrier = None
        self.discriminator = None
        self.pieces_per_package = pieces_per_package
        self.package = package
        self.packages_per_layer = packages_per_layer
        self.layers_per_load_carrier = layers_per_load_carrier
        self.load_carrier = load_carrier

    @property
    def pieces_per_package(self):
        """Gets the pieces_per_package of this ClockSupplyLinePackingConfiguration.  # noqa: E501


        :return: The pieces_per_package of this ClockSupplyLinePackingConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._pieces_per_package

    @pieces_per_package.setter
    def pieces_per_package(self, pieces_per_package):
        """Sets the pieces_per_package of this ClockSupplyLinePackingConfiguration.


        :param pieces_per_package: The pieces_per_package of this ClockSupplyLinePackingConfiguration.  # noqa: E501
        :type: int
        """
        if pieces_per_package is None:
            raise ValueError("Invalid value for `pieces_per_package`, must not be `None`")  # noqa: E501

        self._pieces_per_package = pieces_per_package

    @property
    def package(self):
        """Gets the package of this ClockSupplyLinePackingConfiguration.  # noqa: E501


        :return: The package of this ClockSupplyLinePackingConfiguration.  # noqa: E501
        :rtype: Package
        """
        return self._package

    @package.setter
    def package(self, package):
        """Sets the package of this ClockSupplyLinePackingConfiguration.


        :param package: The package of this ClockSupplyLinePackingConfiguration.  # noqa: E501
        :type: Package
        """
        if package is None:
            raise ValueError("Invalid value for `package`, must not be `None`")  # noqa: E501

        self._package = package

    @property
    def packages_per_layer(self):
        """Gets the packages_per_layer of this ClockSupplyLinePackingConfiguration.  # noqa: E501


        :return: The packages_per_layer of this ClockSupplyLinePackingConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._packages_per_layer

    @packages_per_layer.setter
    def packages_per_layer(self, packages_per_layer):
        """Sets the packages_per_layer of this ClockSupplyLinePackingConfiguration.


        :param packages_per_layer: The packages_per_layer of this ClockSupplyLinePackingConfiguration.  # noqa: E501
        :type: int
        """
        if packages_per_layer is None:
            raise ValueError("Invalid value for `packages_per_layer`, must not be `None`")  # noqa: E501

        self._packages_per_layer = packages_per_layer

    @property
    def layers_per_load_carrier(self):
        """Gets the layers_per_load_carrier of this ClockSupplyLinePackingConfiguration.  # noqa: E501


        :return: The layers_per_load_carrier of this ClockSupplyLinePackingConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._layers_per_load_carrier

    @layers_per_load_carrier.setter
    def layers_per_load_carrier(self, layers_per_load_carrier):
        """Sets the layers_per_load_carrier of this ClockSupplyLinePackingConfiguration.


        :param layers_per_load_carrier: The layers_per_load_carrier of this ClockSupplyLinePackingConfiguration.  # noqa: E501
        :type: int
        """
        if layers_per_load_carrier is None:
            raise ValueError("Invalid value for `layers_per_load_carrier`, must not be `None`")  # noqa: E501

        self._layers_per_load_carrier = layers_per_load_carrier

    @property
    def load_carrier(self):
        """Gets the load_carrier of this ClockSupplyLinePackingConfiguration.  # noqa: E501


        :return: The load_carrier of this ClockSupplyLinePackingConfiguration.  # noqa: E501
        :rtype: SupplyLoadCarrierType
        """
        return self._load_carrier

    @load_carrier.setter
    def load_carrier(self, load_carrier):
        """Sets the load_carrier of this ClockSupplyLinePackingConfiguration.


        :param load_carrier: The load_carrier of this ClockSupplyLinePackingConfiguration.  # noqa: E501
        :type: SupplyLoadCarrierType
        """
        if load_carrier is None:
            raise ValueError("Invalid value for `load_carrier`, must not be `None`")  # noqa: E501

        self._load_carrier = load_carrier

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClockSupplyLinePackingConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClockSupplyLinePackingConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
