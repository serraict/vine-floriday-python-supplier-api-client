# coding: utf-8

"""
    Main - Floriday Suppliers API

    ÔªøEvery endpoint requires at least the `role:app` scope and the header `X-Api-Key` populated with your given API-key. Most endpoints also require an additional scope which is listed in their descriptions.  - üóù [Authorization server (staging)](https://idm.staging.floriday.io/oauth2/ausmw6b47z1BnlHkw0h7/.well-known/oauth-authorization-server) - üóù [Authorization server (live)](https://idm.floriday.io/oauth2/aus3testdcf2vyfs70i7/.well-known/oauth-authorization-server) - üìö [Documentation](https://developer.floriday.io/docs/welcome) - ‚ñ∂ [Coding screencast: getting started (NL)](https://www.youtube.com/watch?v=fdqzP7_Y_s8)  ---  _The current state of this version 2024v1 is **Main**._ * This version will be deprecated after October 2024. * This version will be removed after April 2025.  ---  üîó 2023v2: [Customers API](https://api.staging.floriday.io/customers-api-2023v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2023v2/swagger/index.html) üîó 2024v1: [Customers API](https://api.staging.floriday.io/customers-api-2024v1/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v1/swagger/index.html) üîó 2024v2: [Customers API](https://api.staging.floriday.io/customers-api-2024v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v2/swagger/index.html)   # noqa: E501

    OpenAPI spec version: 2024v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LoadCarrierConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'load_carrier_items': 'list[LoadCarrierItem]',
        'load_carrier_type': 'LoadCarrierType',
        'number_of_additional_layers': 'int',
        'document_reference': 'str',
        'delivery_note_codes': 'list[str]',
        'sort_index': 'int',
        'load_carrier_reference': 'str',
        'is_received': 'bool',
        'receipt_date_time': 'datetime'
    }

    attribute_map = {
        'load_carrier_items': 'loadCarrierItems',
        'load_carrier_type': 'loadCarrierType',
        'number_of_additional_layers': 'numberOfAdditionalLayers',
        'document_reference': 'documentReference',
        'delivery_note_codes': 'deliveryNoteCodes',
        'sort_index': 'sortIndex',
        'load_carrier_reference': 'loadCarrierReference',
        'is_received': 'isReceived',
        'receipt_date_time': 'receiptDateTime'
    }

    def __init__(self, load_carrier_items=None, load_carrier_type=None, number_of_additional_layers=None, document_reference=None, delivery_note_codes=None, sort_index=None, load_carrier_reference=None, is_received=None, receipt_date_time=None):  # noqa: E501
        """LoadCarrierConfiguration - a model defined in Swagger"""  # noqa: E501
        self._load_carrier_items = None
        self._load_carrier_type = None
        self._number_of_additional_layers = None
        self._document_reference = None
        self._delivery_note_codes = None
        self._sort_index = None
        self._load_carrier_reference = None
        self._is_received = None
        self._receipt_date_time = None
        self.discriminator = None
        self.load_carrier_items = load_carrier_items
        self.load_carrier_type = load_carrier_type
        self.number_of_additional_layers = number_of_additional_layers
        if document_reference is not None:
            self.document_reference = document_reference
        self.delivery_note_codes = delivery_note_codes
        self.sort_index = sort_index
        if load_carrier_reference is not None:
            self.load_carrier_reference = load_carrier_reference
        self.is_received = is_received
        if receipt_date_time is not None:
            self.receipt_date_time = receipt_date_time

    @property
    def load_carrier_items(self):
        """Gets the load_carrier_items of this LoadCarrierConfiguration.  # noqa: E501


        :return: The load_carrier_items of this LoadCarrierConfiguration.  # noqa: E501
        :rtype: list[LoadCarrierItem]
        """
        return self._load_carrier_items

    @load_carrier_items.setter
    def load_carrier_items(self, load_carrier_items):
        """Sets the load_carrier_items of this LoadCarrierConfiguration.


        :param load_carrier_items: The load_carrier_items of this LoadCarrierConfiguration.  # noqa: E501
        :type: list[LoadCarrierItem]
        """
        if load_carrier_items is None:
            raise ValueError("Invalid value for `load_carrier_items`, must not be `None`")  # noqa: E501

        self._load_carrier_items = load_carrier_items

    @property
    def load_carrier_type(self):
        """Gets the load_carrier_type of this LoadCarrierConfiguration.  # noqa: E501


        :return: The load_carrier_type of this LoadCarrierConfiguration.  # noqa: E501
        :rtype: LoadCarrierType
        """
        return self._load_carrier_type

    @load_carrier_type.setter
    def load_carrier_type(self, load_carrier_type):
        """Sets the load_carrier_type of this LoadCarrierConfiguration.


        :param load_carrier_type: The load_carrier_type of this LoadCarrierConfiguration.  # noqa: E501
        :type: LoadCarrierType
        """
        if load_carrier_type is None:
            raise ValueError("Invalid value for `load_carrier_type`, must not be `None`")  # noqa: E501

        self._load_carrier_type = load_carrier_type

    @property
    def number_of_additional_layers(self):
        """Gets the number_of_additional_layers of this LoadCarrierConfiguration.  # noqa: E501


        :return: The number_of_additional_layers of this LoadCarrierConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._number_of_additional_layers

    @number_of_additional_layers.setter
    def number_of_additional_layers(self, number_of_additional_layers):
        """Sets the number_of_additional_layers of this LoadCarrierConfiguration.


        :param number_of_additional_layers: The number_of_additional_layers of this LoadCarrierConfiguration.  # noqa: E501
        :type: int
        """
        if number_of_additional_layers is None:
            raise ValueError("Invalid value for `number_of_additional_layers`, must not be `None`")  # noqa: E501

        self._number_of_additional_layers = number_of_additional_layers

    @property
    def document_reference(self):
        """Gets the document_reference of this LoadCarrierConfiguration.  # noqa: E501


        :return: The document_reference of this LoadCarrierConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._document_reference

    @document_reference.setter
    def document_reference(self, document_reference):
        """Sets the document_reference of this LoadCarrierConfiguration.


        :param document_reference: The document_reference of this LoadCarrierConfiguration.  # noqa: E501
        :type: str
        """

        self._document_reference = document_reference

    @property
    def delivery_note_codes(self):
        """Gets the delivery_note_codes of this LoadCarrierConfiguration.  # noqa: E501


        :return: The delivery_note_codes of this LoadCarrierConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._delivery_note_codes

    @delivery_note_codes.setter
    def delivery_note_codes(self, delivery_note_codes):
        """Sets the delivery_note_codes of this LoadCarrierConfiguration.


        :param delivery_note_codes: The delivery_note_codes of this LoadCarrierConfiguration.  # noqa: E501
        :type: list[str]
        """
        if delivery_note_codes is None:
            raise ValueError("Invalid value for `delivery_note_codes`, must not be `None`")  # noqa: E501

        self._delivery_note_codes = delivery_note_codes

    @property
    def sort_index(self):
        """Gets the sort_index of this LoadCarrierConfiguration.  # noqa: E501

        Used to determine the position of the load carrier within the shipment. Duplicate numbers will yield indeterministic sequencing.  # noqa: E501

        :return: The sort_index of this LoadCarrierConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._sort_index

    @sort_index.setter
    def sort_index(self, sort_index):
        """Sets the sort_index of this LoadCarrierConfiguration.

        Used to determine the position of the load carrier within the shipment. Duplicate numbers will yield indeterministic sequencing.  # noqa: E501

        :param sort_index: The sort_index of this LoadCarrierConfiguration.  # noqa: E501
        :type: int
        """
        if sort_index is None:
            raise ValueError("Invalid value for `sort_index`, must not be `None`")  # noqa: E501

        self._sort_index = sort_index

    @property
    def load_carrier_reference(self):
        """Gets the load_carrier_reference of this LoadCarrierConfiguration.  # noqa: E501

        When present, uniquely references a load carrier within a collection of load carrier configurations; Appears on a PAB.  # noqa: E501

        :return: The load_carrier_reference of this LoadCarrierConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._load_carrier_reference

    @load_carrier_reference.setter
    def load_carrier_reference(self, load_carrier_reference):
        """Sets the load_carrier_reference of this LoadCarrierConfiguration.

        When present, uniquely references a load carrier within a collection of load carrier configurations; Appears on a PAB.  # noqa: E501

        :param load_carrier_reference: The load_carrier_reference of this LoadCarrierConfiguration.  # noqa: E501
        :type: str
        """

        self._load_carrier_reference = load_carrier_reference

    @property
    def is_received(self):
        """Gets the is_received of this LoadCarrierConfiguration.  # noqa: E501


        :return: The is_received of this LoadCarrierConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._is_received

    @is_received.setter
    def is_received(self, is_received):
        """Sets the is_received of this LoadCarrierConfiguration.


        :param is_received: The is_received of this LoadCarrierConfiguration.  # noqa: E501
        :type: bool
        """
        if is_received is None:
            raise ValueError("Invalid value for `is_received`, must not be `None`")  # noqa: E501

        self._is_received = is_received

    @property
    def receipt_date_time(self):
        """Gets the receipt_date_time of this LoadCarrierConfiguration.  # noqa: E501


        :return: The receipt_date_time of this LoadCarrierConfiguration.  # noqa: E501
        :rtype: datetime
        """
        return self._receipt_date_time

    @receipt_date_time.setter
    def receipt_date_time(self, receipt_date_time):
        """Sets the receipt_date_time of this LoadCarrierConfiguration.


        :param receipt_date_time: The receipt_date_time of this LoadCarrierConfiguration.  # noqa: E501
        :type: datetime
        """

        self._receipt_date_time = receipt_date_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoadCarrierConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoadCarrierConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
