# coding: utf-8

"""
    Main - Floriday Suppliers API

    ÔªøEvery endpoint requires at least the `role:app` scope and the header `X-Api-Key` populated with your given API-key. Most endpoints also require an additional scope which is listed in their descriptions.  - üóù [Authorization server (staging)](https://idm.staging.floriday.io/oauth2/ausmw6b47z1BnlHkw0h7/.well-known/oauth-authorization-server) - üóù [Authorization server (live)](https://idm.floriday.io/oauth2/aus3testdcf2vyfs70i7/.well-known/oauth-authorization-server) - üìö [Documentation](https://developer.floriday.io/docs/welcome) - ‚ñ∂ [Coding screencast: getting started (NL)](https://www.youtube.com/watch?v=fdqzP7_Y_s8)  ---  _The current state of this version 2024v1 is **Main**._ * This version will be deprecated after October 2024. * This version will be removed after April 2025.  ---  üîó 2023v2: [Customers API](https://api.staging.floriday.io/customers-api-2023v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2023v2/swagger/index.html) üîó 2024v1: [Customers API](https://api.staging.floriday.io/customers-api-2024v1/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v1/swagger/index.html) üîó 2024v2: [Customers API](https://api.staging.floriday.io/customers-api-2024v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v2/swagger/index.html)   # noqa: E501

    OpenAPI spec version: 2024v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DeliveryCondition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'delivery_condition_id': 'str',
        'delivery_regions': 'list[DeliveryRegion]',
        'minimum_quantity': 'Quantity',
        'incoterm': 'Incoterm',
        'order_time_zone': 'str',
        'delivery_time_zone': 'str',
        'delivery_condition_times': 'list[DeliveryConditionTimeFrame]',
        'delivery_costs': 'list[DeliveryCost]',
        'non_working_day_delivery_condition': 'NonWorkingDayDeliveryCondition'
    }

    attribute_map = {
        'delivery_condition_id': 'deliveryConditionId',
        'delivery_regions': 'deliveryRegions',
        'minimum_quantity': 'minimumQuantity',
        'incoterm': 'incoterm',
        'order_time_zone': 'orderTimeZone',
        'delivery_time_zone': 'deliveryTimeZone',
        'delivery_condition_times': 'deliveryConditionTimes',
        'delivery_costs': 'deliveryCosts',
        'non_working_day_delivery_condition': 'nonWorkingDayDeliveryCondition'
    }

    def __init__(self, delivery_condition_id=None, delivery_regions=None, minimum_quantity=None, incoterm=None, order_time_zone=None, delivery_time_zone=None, delivery_condition_times=None, delivery_costs=None, non_working_day_delivery_condition=None):  # noqa: E501
        """DeliveryCondition - a model defined in Swagger"""  # noqa: E501
        self._delivery_condition_id = None
        self._delivery_regions = None
        self._minimum_quantity = None
        self._incoterm = None
        self._order_time_zone = None
        self._delivery_time_zone = None
        self._delivery_condition_times = None
        self._delivery_costs = None
        self._non_working_day_delivery_condition = None
        self.discriminator = None
        self.delivery_condition_id = delivery_condition_id
        self.delivery_regions = delivery_regions
        self.minimum_quantity = minimum_quantity
        self.incoterm = incoterm
        self.order_time_zone = order_time_zone
        self.delivery_time_zone = delivery_time_zone
        if delivery_condition_times is not None:
            self.delivery_condition_times = delivery_condition_times
        if delivery_costs is not None:
            self.delivery_costs = delivery_costs
        if non_working_day_delivery_condition is not None:
            self.non_working_day_delivery_condition = non_working_day_delivery_condition

    @property
    def delivery_condition_id(self):
        """Gets the delivery_condition_id of this DeliveryCondition.  # noqa: E501


        :return: The delivery_condition_id of this DeliveryCondition.  # noqa: E501
        :rtype: str
        """
        return self._delivery_condition_id

    @delivery_condition_id.setter
    def delivery_condition_id(self, delivery_condition_id):
        """Sets the delivery_condition_id of this DeliveryCondition.


        :param delivery_condition_id: The delivery_condition_id of this DeliveryCondition.  # noqa: E501
        :type: str
        """
        if delivery_condition_id is None:
            raise ValueError("Invalid value for `delivery_condition_id`, must not be `None`")  # noqa: E501

        self._delivery_condition_id = delivery_condition_id

    @property
    def delivery_regions(self):
        """Gets the delivery_regions of this DeliveryCondition.  # noqa: E501


        :return: The delivery_regions of this DeliveryCondition.  # noqa: E501
        :rtype: list[DeliveryRegion]
        """
        return self._delivery_regions

    @delivery_regions.setter
    def delivery_regions(self, delivery_regions):
        """Sets the delivery_regions of this DeliveryCondition.


        :param delivery_regions: The delivery_regions of this DeliveryCondition.  # noqa: E501
        :type: list[DeliveryRegion]
        """
        if delivery_regions is None:
            raise ValueError("Invalid value for `delivery_regions`, must not be `None`")  # noqa: E501

        self._delivery_regions = delivery_regions

    @property
    def minimum_quantity(self):
        """Gets the minimum_quantity of this DeliveryCondition.  # noqa: E501


        :return: The minimum_quantity of this DeliveryCondition.  # noqa: E501
        :rtype: Quantity
        """
        return self._minimum_quantity

    @minimum_quantity.setter
    def minimum_quantity(self, minimum_quantity):
        """Sets the minimum_quantity of this DeliveryCondition.


        :param minimum_quantity: The minimum_quantity of this DeliveryCondition.  # noqa: E501
        :type: Quantity
        """
        if minimum_quantity is None:
            raise ValueError("Invalid value for `minimum_quantity`, must not be `None`")  # noqa: E501

        self._minimum_quantity = minimum_quantity

    @property
    def incoterm(self):
        """Gets the incoterm of this DeliveryCondition.  # noqa: E501


        :return: The incoterm of this DeliveryCondition.  # noqa: E501
        :rtype: Incoterm
        """
        return self._incoterm

    @incoterm.setter
    def incoterm(self, incoterm):
        """Sets the incoterm of this DeliveryCondition.


        :param incoterm: The incoterm of this DeliveryCondition.  # noqa: E501
        :type: Incoterm
        """
        if incoterm is None:
            raise ValueError("Invalid value for `incoterm`, must not be `None`")  # noqa: E501

        self._incoterm = incoterm

    @property
    def order_time_zone(self):
        """Gets the order_time_zone of this DeliveryCondition.  # noqa: E501


        :return: The order_time_zone of this DeliveryCondition.  # noqa: E501
        :rtype: str
        """
        return self._order_time_zone

    @order_time_zone.setter
    def order_time_zone(self, order_time_zone):
        """Sets the order_time_zone of this DeliveryCondition.


        :param order_time_zone: The order_time_zone of this DeliveryCondition.  # noqa: E501
        :type: str
        """
        if order_time_zone is None:
            raise ValueError("Invalid value for `order_time_zone`, must not be `None`")  # noqa: E501

        self._order_time_zone = order_time_zone

    @property
    def delivery_time_zone(self):
        """Gets the delivery_time_zone of this DeliveryCondition.  # noqa: E501


        :return: The delivery_time_zone of this DeliveryCondition.  # noqa: E501
        :rtype: str
        """
        return self._delivery_time_zone

    @delivery_time_zone.setter
    def delivery_time_zone(self, delivery_time_zone):
        """Sets the delivery_time_zone of this DeliveryCondition.


        :param delivery_time_zone: The delivery_time_zone of this DeliveryCondition.  # noqa: E501
        :type: str
        """
        if delivery_time_zone is None:
            raise ValueError("Invalid value for `delivery_time_zone`, must not be `None`")  # noqa: E501

        self._delivery_time_zone = delivery_time_zone

    @property
    def delivery_condition_times(self):
        """Gets the delivery_condition_times of this DeliveryCondition.  # noqa: E501


        :return: The delivery_condition_times of this DeliveryCondition.  # noqa: E501
        :rtype: list[DeliveryConditionTimeFrame]
        """
        return self._delivery_condition_times

    @delivery_condition_times.setter
    def delivery_condition_times(self, delivery_condition_times):
        """Sets the delivery_condition_times of this DeliveryCondition.


        :param delivery_condition_times: The delivery_condition_times of this DeliveryCondition.  # noqa: E501
        :type: list[DeliveryConditionTimeFrame]
        """

        self._delivery_condition_times = delivery_condition_times

    @property
    def delivery_costs(self):
        """Gets the delivery_costs of this DeliveryCondition.  # noqa: E501


        :return: The delivery_costs of this DeliveryCondition.  # noqa: E501
        :rtype: list[DeliveryCost]
        """
        return self._delivery_costs

    @delivery_costs.setter
    def delivery_costs(self, delivery_costs):
        """Sets the delivery_costs of this DeliveryCondition.


        :param delivery_costs: The delivery_costs of this DeliveryCondition.  # noqa: E501
        :type: list[DeliveryCost]
        """

        self._delivery_costs = delivery_costs

    @property
    def non_working_day_delivery_condition(self):
        """Gets the non_working_day_delivery_condition of this DeliveryCondition.  # noqa: E501


        :return: The non_working_day_delivery_condition of this DeliveryCondition.  # noqa: E501
        :rtype: NonWorkingDayDeliveryCondition
        """
        return self._non_working_day_delivery_condition

    @non_working_day_delivery_condition.setter
    def non_working_day_delivery_condition(self, non_working_day_delivery_condition):
        """Sets the non_working_day_delivery_condition of this DeliveryCondition.


        :param non_working_day_delivery_condition: The non_working_day_delivery_condition of this DeliveryCondition.  # noqa: E501
        :type: NonWorkingDayDeliveryCondition
        """

        self._non_working_day_delivery_condition = non_working_day_delivery_condition

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeliveryCondition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeliveryCondition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
