# coding: utf-8

"""
    Main - Floriday Suppliers API

    ÔªøEvery endpoint requires at least the `role:app` scope and the header `X-Api-Key` populated with your given API-key. Most endpoints also require an additional scope which is listed in their descriptions.  - üóù [Authorization server (staging)](https://idm.staging.floriday.io/oauth2/ausmw6b47z1BnlHkw0h7/.well-known/oauth-authorization-server) - üóù [Authorization server (live)](https://idm.floriday.io/oauth2/aus3testdcf2vyfs70i7/.well-known/oauth-authorization-server) - üìö [Documentation](https://developer.floriday.io/docs/welcome) - ‚ñ∂ [Coding screencast: getting started (NL)](https://www.youtube.com/watch?v=fdqzP7_Y_s8)  ---  _The current state of this version 2024v1 is **Main**._ * This version will be deprecated after October 2024. * This version will be removed after April 2025.  ---  üîó 2023v2: [Customers API](https://api.staging.floriday.io/customers-api-2023v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2023v2/swagger/index.html) üîó 2024v1: [Customers API](https://api.staging.floriday.io/customers-api-2024v1/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v1/swagger/index.html) üîó 2024v2: [Customers API](https://api.staging.floriday.io/customers-api-2024v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v2/swagger/index.html)   # noqa: E501

    OpenAPI spec version: 2024v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BundledOffer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bundled_offer_id': 'str',
        'warehouse_id': 'str',
        'price_per_bundle': 'Price',
        'is_draft': 'bool',
        'image_url': 'str',
        'title': 'str',
        'description': 'str',
        'default_photo_code': 'str',
        'included_services': 'list[CommercialService]',
        'number_of_bundles': 'int',
        'is_customer_specific': 'bool',
        'customer_organization_ids': 'list[str]',
        'order_period': 'TradePeriod',
        'delivery_period': 'TradePeriod',
        'agreement_reference': 'AgreementReference',
        'creation_date_time': 'datetime',
        'last_modified_date_time': 'datetime',
        'sequence_number': 'int',
        'bundled_offer_lines': 'list[BundledOfferLine]',
        'is_deleted': 'bool'
    }

    attribute_map = {
        'bundled_offer_id': 'bundledOfferId',
        'warehouse_id': 'warehouseId',
        'price_per_bundle': 'pricePerBundle',
        'is_draft': 'isDraft',
        'image_url': 'imageUrl',
        'title': 'title',
        'description': 'description',
        'default_photo_code': 'defaultPhotoCode',
        'included_services': 'includedServices',
        'number_of_bundles': 'numberOfBundles',
        'is_customer_specific': 'isCustomerSpecific',
        'customer_organization_ids': 'customerOrganizationIds',
        'order_period': 'orderPeriod',
        'delivery_period': 'deliveryPeriod',
        'agreement_reference': 'agreementReference',
        'creation_date_time': 'creationDateTime',
        'last_modified_date_time': 'lastModifiedDateTime',
        'sequence_number': 'sequenceNumber',
        'bundled_offer_lines': 'bundledOfferLines',
        'is_deleted': 'isDeleted'
    }

    def __init__(self, bundled_offer_id=None, warehouse_id=None, price_per_bundle=None, is_draft=None, image_url=None, title=None, description=None, default_photo_code=None, included_services=None, number_of_bundles=None, is_customer_specific=None, customer_organization_ids=None, order_period=None, delivery_period=None, agreement_reference=None, creation_date_time=None, last_modified_date_time=None, sequence_number=None, bundled_offer_lines=None, is_deleted=None):  # noqa: E501
        """BundledOffer - a model defined in Swagger"""  # noqa: E501
        self._bundled_offer_id = None
        self._warehouse_id = None
        self._price_per_bundle = None
        self._is_draft = None
        self._image_url = None
        self._title = None
        self._description = None
        self._default_photo_code = None
        self._included_services = None
        self._number_of_bundles = None
        self._is_customer_specific = None
        self._customer_organization_ids = None
        self._order_period = None
        self._delivery_period = None
        self._agreement_reference = None
        self._creation_date_time = None
        self._last_modified_date_time = None
        self._sequence_number = None
        self._bundled_offer_lines = None
        self._is_deleted = None
        self.discriminator = None
        self.bundled_offer_id = bundled_offer_id
        if warehouse_id is not None:
            self.warehouse_id = warehouse_id
        self.price_per_bundle = price_per_bundle
        self.is_draft = is_draft
        if image_url is not None:
            self.image_url = image_url
        self.title = title
        self.description = description
        if default_photo_code is not None:
            self.default_photo_code = default_photo_code
        self.included_services = included_services
        self.number_of_bundles = number_of_bundles
        self.is_customer_specific = is_customer_specific
        self.customer_organization_ids = customer_organization_ids
        self.order_period = order_period
        self.delivery_period = delivery_period
        if agreement_reference is not None:
            self.agreement_reference = agreement_reference
        if creation_date_time is not None:
            self.creation_date_time = creation_date_time
        if last_modified_date_time is not None:
            self.last_modified_date_time = last_modified_date_time
        self.sequence_number = sequence_number
        self.bundled_offer_lines = bundled_offer_lines
        self.is_deleted = is_deleted

    @property
    def bundled_offer_id(self):
        """Gets the bundled_offer_id of this BundledOffer.  # noqa: E501


        :return: The bundled_offer_id of this BundledOffer.  # noqa: E501
        :rtype: str
        """
        return self._bundled_offer_id

    @bundled_offer_id.setter
    def bundled_offer_id(self, bundled_offer_id):
        """Sets the bundled_offer_id of this BundledOffer.


        :param bundled_offer_id: The bundled_offer_id of this BundledOffer.  # noqa: E501
        :type: str
        """
        if bundled_offer_id is None:
            raise ValueError("Invalid value for `bundled_offer_id`, must not be `None`")  # noqa: E501

        self._bundled_offer_id = bundled_offer_id

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this BundledOffer.  # noqa: E501


        :return: The warehouse_id of this BundledOffer.  # noqa: E501
        :rtype: str
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this BundledOffer.


        :param warehouse_id: The warehouse_id of this BundledOffer.  # noqa: E501
        :type: str
        """

        self._warehouse_id = warehouse_id

    @property
    def price_per_bundle(self):
        """Gets the price_per_bundle of this BundledOffer.  # noqa: E501


        :return: The price_per_bundle of this BundledOffer.  # noqa: E501
        :rtype: Price
        """
        return self._price_per_bundle

    @price_per_bundle.setter
    def price_per_bundle(self, price_per_bundle):
        """Sets the price_per_bundle of this BundledOffer.


        :param price_per_bundle: The price_per_bundle of this BundledOffer.  # noqa: E501
        :type: Price
        """
        if price_per_bundle is None:
            raise ValueError("Invalid value for `price_per_bundle`, must not be `None`")  # noqa: E501

        self._price_per_bundle = price_per_bundle

    @property
    def is_draft(self):
        """Gets the is_draft of this BundledOffer.  # noqa: E501


        :return: The is_draft of this BundledOffer.  # noqa: E501
        :rtype: bool
        """
        return self._is_draft

    @is_draft.setter
    def is_draft(self, is_draft):
        """Sets the is_draft of this BundledOffer.


        :param is_draft: The is_draft of this BundledOffer.  # noqa: E501
        :type: bool
        """
        if is_draft is None:
            raise ValueError("Invalid value for `is_draft`, must not be `None`")  # noqa: E501

        self._is_draft = is_draft

    @property
    def image_url(self):
        """Gets the image_url of this BundledOffer.  # noqa: E501


        :return: The image_url of this BundledOffer.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this BundledOffer.


        :param image_url: The image_url of this BundledOffer.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def title(self):
        """Gets the title of this BundledOffer.  # noqa: E501


        :return: The title of this BundledOffer.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this BundledOffer.


        :param title: The title of this BundledOffer.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def description(self):
        """Gets the description of this BundledOffer.  # noqa: E501


        :return: The description of this BundledOffer.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BundledOffer.


        :param description: The description of this BundledOffer.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def default_photo_code(self):
        """Gets the default_photo_code of this BundledOffer.  # noqa: E501


        :return: The default_photo_code of this BundledOffer.  # noqa: E501
        :rtype: str
        """
        return self._default_photo_code

    @default_photo_code.setter
    def default_photo_code(self, default_photo_code):
        """Sets the default_photo_code of this BundledOffer.


        :param default_photo_code: The default_photo_code of this BundledOffer.  # noqa: E501
        :type: str
        """

        self._default_photo_code = default_photo_code

    @property
    def included_services(self):
        """Gets the included_services of this BundledOffer.  # noqa: E501


        :return: The included_services of this BundledOffer.  # noqa: E501
        :rtype: list[CommercialService]
        """
        return self._included_services

    @included_services.setter
    def included_services(self, included_services):
        """Sets the included_services of this BundledOffer.


        :param included_services: The included_services of this BundledOffer.  # noqa: E501
        :type: list[CommercialService]
        """
        if included_services is None:
            raise ValueError("Invalid value for `included_services`, must not be `None`")  # noqa: E501

        self._included_services = included_services

    @property
    def number_of_bundles(self):
        """Gets the number_of_bundles of this BundledOffer.  # noqa: E501


        :return: The number_of_bundles of this BundledOffer.  # noqa: E501
        :rtype: int
        """
        return self._number_of_bundles

    @number_of_bundles.setter
    def number_of_bundles(self, number_of_bundles):
        """Sets the number_of_bundles of this BundledOffer.


        :param number_of_bundles: The number_of_bundles of this BundledOffer.  # noqa: E501
        :type: int
        """
        if number_of_bundles is None:
            raise ValueError("Invalid value for `number_of_bundles`, must not be `None`")  # noqa: E501

        self._number_of_bundles = number_of_bundles

    @property
    def is_customer_specific(self):
        """Gets the is_customer_specific of this BundledOffer.  # noqa: E501


        :return: The is_customer_specific of this BundledOffer.  # noqa: E501
        :rtype: bool
        """
        return self._is_customer_specific

    @is_customer_specific.setter
    def is_customer_specific(self, is_customer_specific):
        """Sets the is_customer_specific of this BundledOffer.


        :param is_customer_specific: The is_customer_specific of this BundledOffer.  # noqa: E501
        :type: bool
        """
        if is_customer_specific is None:
            raise ValueError("Invalid value for `is_customer_specific`, must not be `None`")  # noqa: E501

        self._is_customer_specific = is_customer_specific

    @property
    def customer_organization_ids(self):
        """Gets the customer_organization_ids of this BundledOffer.  # noqa: E501


        :return: The customer_organization_ids of this BundledOffer.  # noqa: E501
        :rtype: list[str]
        """
        return self._customer_organization_ids

    @customer_organization_ids.setter
    def customer_organization_ids(self, customer_organization_ids):
        """Sets the customer_organization_ids of this BundledOffer.


        :param customer_organization_ids: The customer_organization_ids of this BundledOffer.  # noqa: E501
        :type: list[str]
        """
        if customer_organization_ids is None:
            raise ValueError("Invalid value for `customer_organization_ids`, must not be `None`")  # noqa: E501

        self._customer_organization_ids = customer_organization_ids

    @property
    def order_period(self):
        """Gets the order_period of this BundledOffer.  # noqa: E501


        :return: The order_period of this BundledOffer.  # noqa: E501
        :rtype: TradePeriod
        """
        return self._order_period

    @order_period.setter
    def order_period(self, order_period):
        """Sets the order_period of this BundledOffer.


        :param order_period: The order_period of this BundledOffer.  # noqa: E501
        :type: TradePeriod
        """
        if order_period is None:
            raise ValueError("Invalid value for `order_period`, must not be `None`")  # noqa: E501

        self._order_period = order_period

    @property
    def delivery_period(self):
        """Gets the delivery_period of this BundledOffer.  # noqa: E501


        :return: The delivery_period of this BundledOffer.  # noqa: E501
        :rtype: TradePeriod
        """
        return self._delivery_period

    @delivery_period.setter
    def delivery_period(self, delivery_period):
        """Sets the delivery_period of this BundledOffer.


        :param delivery_period: The delivery_period of this BundledOffer.  # noqa: E501
        :type: TradePeriod
        """
        if delivery_period is None:
            raise ValueError("Invalid value for `delivery_period`, must not be `None`")  # noqa: E501

        self._delivery_period = delivery_period

    @property
    def agreement_reference(self):
        """Gets the agreement_reference of this BundledOffer.  # noqa: E501


        :return: The agreement_reference of this BundledOffer.  # noqa: E501
        :rtype: AgreementReference
        """
        return self._agreement_reference

    @agreement_reference.setter
    def agreement_reference(self, agreement_reference):
        """Sets the agreement_reference of this BundledOffer.


        :param agreement_reference: The agreement_reference of this BundledOffer.  # noqa: E501
        :type: AgreementReference
        """

        self._agreement_reference = agreement_reference

    @property
    def creation_date_time(self):
        """Gets the creation_date_time of this BundledOffer.  # noqa: E501


        :return: The creation_date_time of this BundledOffer.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date_time

    @creation_date_time.setter
    def creation_date_time(self, creation_date_time):
        """Sets the creation_date_time of this BundledOffer.


        :param creation_date_time: The creation_date_time of this BundledOffer.  # noqa: E501
        :type: datetime
        """

        self._creation_date_time = creation_date_time

    @property
    def last_modified_date_time(self):
        """Gets the last_modified_date_time of this BundledOffer.  # noqa: E501


        :return: The last_modified_date_time of this BundledOffer.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_date_time

    @last_modified_date_time.setter
    def last_modified_date_time(self, last_modified_date_time):
        """Sets the last_modified_date_time of this BundledOffer.


        :param last_modified_date_time: The last_modified_date_time of this BundledOffer.  # noqa: E501
        :type: datetime
        """

        self._last_modified_date_time = last_modified_date_time

    @property
    def sequence_number(self):
        """Gets the sequence_number of this BundledOffer.  # noqa: E501


        :return: The sequence_number of this BundledOffer.  # noqa: E501
        :rtype: int
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this BundledOffer.


        :param sequence_number: The sequence_number of this BundledOffer.  # noqa: E501
        :type: int
        """
        if sequence_number is None:
            raise ValueError("Invalid value for `sequence_number`, must not be `None`")  # noqa: E501

        self._sequence_number = sequence_number

    @property
    def bundled_offer_lines(self):
        """Gets the bundled_offer_lines of this BundledOffer.  # noqa: E501


        :return: The bundled_offer_lines of this BundledOffer.  # noqa: E501
        :rtype: list[BundledOfferLine]
        """
        return self._bundled_offer_lines

    @bundled_offer_lines.setter
    def bundled_offer_lines(self, bundled_offer_lines):
        """Sets the bundled_offer_lines of this BundledOffer.


        :param bundled_offer_lines: The bundled_offer_lines of this BundledOffer.  # noqa: E501
        :type: list[BundledOfferLine]
        """
        if bundled_offer_lines is None:
            raise ValueError("Invalid value for `bundled_offer_lines`, must not be `None`")  # noqa: E501

        self._bundled_offer_lines = bundled_offer_lines

    @property
    def is_deleted(self):
        """Gets the is_deleted of this BundledOffer.  # noqa: E501


        :return: The is_deleted of this BundledOffer.  # noqa: E501
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this BundledOffer.


        :param is_deleted: The is_deleted of this BundledOffer.  # noqa: E501
        :type: bool
        """
        if is_deleted is None:
            raise ValueError("Invalid value for `is_deleted`, must not be `None`")  # noqa: E501

        self._is_deleted = is_deleted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BundledOffer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BundledOffer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
