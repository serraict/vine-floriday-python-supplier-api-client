# coding: utf-8

"""
    Main - Floriday Suppliers API

    ÔªøEvery endpoint requires at least the `role:app` scope and the header `X-Api-Key` populated with your given API-key. Most endpoints also require an additional scope which is listed in their descriptions.  - üóù [Authorization server (staging)](https://idm.staging.floriday.io/oauth2/ausmw6b47z1BnlHkw0h7/.well-known/oauth-authorization-server) - üóù [Authorization server (live)](https://idm.floriday.io/oauth2/aus3testdcf2vyfs70i7/.well-known/oauth-authorization-server) - üìö [Documentation](https://developer.floriday.io/docs/welcome) - ‚ñ∂ [Coding screencast: getting started (NL)](https://www.youtube.com/watch?v=fdqzP7_Y_s8)  ---  _The current state of this version 2024v1 is **Main**._ * This version will be deprecated after October 2024. * This version will be removed after April 2025.  ---  üîó 2023v2: [Customers API](https://api.staging.floriday.io/customers-api-2023v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2023v2/swagger/index.html) üîó 2024v1: [Customers API](https://api.staging.floriday.io/customers-api-2024v1/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v1/swagger/index.html) üîó 2024v2: [Customers API](https://api.staging.floriday.io/customers-api-2024v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v2/swagger/index.html)   # noqa: E501

    OpenAPI spec version: 2024v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AdditionalService(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'additional_service_id': 'str',
        'commercial_service_type': 'CommercialServiceType',
        'name': 'str',
        'description': 'str',
        'warehouse_ids': 'list[str]',
        'price': 'AllOfAdditionalServicePrice',
        'unit': 'AdditionalServiceUnit',
        'customer_organization_ids': 'list[str]',
        'is_customer_specific': 'bool',
        'sticker_information': 'AllOfAdditionalServiceStickerInformation',
        'is_available': 'bool',
        'is_deleted': 'bool',
        'sequence_number': 'int'
    }

    attribute_map = {
        'additional_service_id': 'additionalServiceId',
        'commercial_service_type': 'commercialServiceType',
        'name': 'name',
        'description': 'description',
        'warehouse_ids': 'warehouseIds',
        'price': 'price',
        'unit': 'unit',
        'customer_organization_ids': 'customerOrganizationIds',
        'is_customer_specific': 'isCustomerSpecific',
        'sticker_information': 'stickerInformation',
        'is_available': 'isAvailable',
        'is_deleted': 'isDeleted',
        'sequence_number': 'sequenceNumber'
    }

    def __init__(self, additional_service_id=None, commercial_service_type=None, name=None, description=None, warehouse_ids=None, price=None, unit=None, customer_organization_ids=None, is_customer_specific=None, sticker_information=None, is_available=None, is_deleted=None, sequence_number=None):  # noqa: E501
        """AdditionalService - a model defined in Swagger"""  # noqa: E501
        self._additional_service_id = None
        self._commercial_service_type = None
        self._name = None
        self._description = None
        self._warehouse_ids = None
        self._price = None
        self._unit = None
        self._customer_organization_ids = None
        self._is_customer_specific = None
        self._sticker_information = None
        self._is_available = None
        self._is_deleted = None
        self._sequence_number = None
        self.discriminator = None
        self.additional_service_id = additional_service_id
        self.commercial_service_type = commercial_service_type
        self.name = name
        if description is not None:
            self.description = description
        self.warehouse_ids = warehouse_ids
        self.price = price
        self.unit = unit
        if customer_organization_ids is not None:
            self.customer_organization_ids = customer_organization_ids
        self.is_customer_specific = is_customer_specific
        if sticker_information is not None:
            self.sticker_information = sticker_information
        self.is_available = is_available
        self.is_deleted = is_deleted
        self.sequence_number = sequence_number

    @property
    def additional_service_id(self):
        """Gets the additional_service_id of this AdditionalService.  # noqa: E501


        :return: The additional_service_id of this AdditionalService.  # noqa: E501
        :rtype: str
        """
        return self._additional_service_id

    @additional_service_id.setter
    def additional_service_id(self, additional_service_id):
        """Sets the additional_service_id of this AdditionalService.


        :param additional_service_id: The additional_service_id of this AdditionalService.  # noqa: E501
        :type: str
        """
        if additional_service_id is None:
            raise ValueError("Invalid value for `additional_service_id`, must not be `None`")  # noqa: E501

        self._additional_service_id = additional_service_id

    @property
    def commercial_service_type(self):
        """Gets the commercial_service_type of this AdditionalService.  # noqa: E501


        :return: The commercial_service_type of this AdditionalService.  # noqa: E501
        :rtype: CommercialServiceType
        """
        return self._commercial_service_type

    @commercial_service_type.setter
    def commercial_service_type(self, commercial_service_type):
        """Sets the commercial_service_type of this AdditionalService.


        :param commercial_service_type: The commercial_service_type of this AdditionalService.  # noqa: E501
        :type: CommercialServiceType
        """
        if commercial_service_type is None:
            raise ValueError("Invalid value for `commercial_service_type`, must not be `None`")  # noqa: E501

        self._commercial_service_type = commercial_service_type

    @property
    def name(self):
        """Gets the name of this AdditionalService.  # noqa: E501


        :return: The name of this AdditionalService.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AdditionalService.


        :param name: The name of this AdditionalService.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this AdditionalService.  # noqa: E501


        :return: The description of this AdditionalService.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AdditionalService.


        :param description: The description of this AdditionalService.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def warehouse_ids(self):
        """Gets the warehouse_ids of this AdditionalService.  # noqa: E501


        :return: The warehouse_ids of this AdditionalService.  # noqa: E501
        :rtype: list[str]
        """
        return self._warehouse_ids

    @warehouse_ids.setter
    def warehouse_ids(self, warehouse_ids):
        """Sets the warehouse_ids of this AdditionalService.


        :param warehouse_ids: The warehouse_ids of this AdditionalService.  # noqa: E501
        :type: list[str]
        """
        if warehouse_ids is None:
            raise ValueError("Invalid value for `warehouse_ids`, must not be `None`")  # noqa: E501

        self._warehouse_ids = warehouse_ids

    @property
    def price(self):
        """Gets the price of this AdditionalService.  # noqa: E501

        The extra costs that will be billed when choosing this additional service  # noqa: E501

        :return: The price of this AdditionalService.  # noqa: E501
        :rtype: AllOfAdditionalServicePrice
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this AdditionalService.

        The extra costs that will be billed when choosing this additional service  # noqa: E501

        :param price: The price of this AdditionalService.  # noqa: E501
        :type: AllOfAdditionalServicePrice
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def unit(self):
        """Gets the unit of this AdditionalService.  # noqa: E501


        :return: The unit of this AdditionalService.  # noqa: E501
        :rtype: AdditionalServiceUnit
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this AdditionalService.


        :param unit: The unit of this AdditionalService.  # noqa: E501
        :type: AdditionalServiceUnit
        """
        if unit is None:
            raise ValueError("Invalid value for `unit`, must not be `None`")  # noqa: E501

        self._unit = unit

    @property
    def customer_organization_ids(self):
        """Gets the customer_organization_ids of this AdditionalService.  # noqa: E501


        :return: The customer_organization_ids of this AdditionalService.  # noqa: E501
        :rtype: list[str]
        """
        return self._customer_organization_ids

    @customer_organization_ids.setter
    def customer_organization_ids(self, customer_organization_ids):
        """Sets the customer_organization_ids of this AdditionalService.


        :param customer_organization_ids: The customer_organization_ids of this AdditionalService.  # noqa: E501
        :type: list[str]
        """

        self._customer_organization_ids = customer_organization_ids

    @property
    def is_customer_specific(self):
        """Gets the is_customer_specific of this AdditionalService.  # noqa: E501

        The additional service is customer-specific for one or more customers.  # noqa: E501

        :return: The is_customer_specific of this AdditionalService.  # noqa: E501
        :rtype: bool
        """
        return self._is_customer_specific

    @is_customer_specific.setter
    def is_customer_specific(self, is_customer_specific):
        """Sets the is_customer_specific of this AdditionalService.

        The additional service is customer-specific for one or more customers.  # noqa: E501

        :param is_customer_specific: The is_customer_specific of this AdditionalService.  # noqa: E501
        :type: bool
        """
        if is_customer_specific is None:
            raise ValueError("Invalid value for `is_customer_specific`, must not be `None`")  # noqa: E501

        self._is_customer_specific = is_customer_specific

    @property
    def sticker_information(self):
        """Gets the sticker_information of this AdditionalService.  # noqa: E501

        Optional information related to stickers.  # noqa: E501

        :return: The sticker_information of this AdditionalService.  # noqa: E501
        :rtype: AllOfAdditionalServiceStickerInformation
        """
        return self._sticker_information

    @sticker_information.setter
    def sticker_information(self, sticker_information):
        """Sets the sticker_information of this AdditionalService.

        Optional information related to stickers.  # noqa: E501

        :param sticker_information: The sticker_information of this AdditionalService.  # noqa: E501
        :type: AllOfAdditionalServiceStickerInformation
        """

        self._sticker_information = sticker_information

    @property
    def is_available(self):
        """Gets the is_available of this AdditionalService.  # noqa: E501

        Indicates if the additional service is currently available for use  # noqa: E501

        :return: The is_available of this AdditionalService.  # noqa: E501
        :rtype: bool
        """
        return self._is_available

    @is_available.setter
    def is_available(self, is_available):
        """Sets the is_available of this AdditionalService.

        Indicates if the additional service is currently available for use  # noqa: E501

        :param is_available: The is_available of this AdditionalService.  # noqa: E501
        :type: bool
        """
        if is_available is None:
            raise ValueError("Invalid value for `is_available`, must not be `None`")  # noqa: E501

        self._is_available = is_available

    @property
    def is_deleted(self):
        """Gets the is_deleted of this AdditionalService.  # noqa: E501


        :return: The is_deleted of this AdditionalService.  # noqa: E501
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this AdditionalService.


        :param is_deleted: The is_deleted of this AdditionalService.  # noqa: E501
        :type: bool
        """
        if is_deleted is None:
            raise ValueError("Invalid value for `is_deleted`, must not be `None`")  # noqa: E501

        self._is_deleted = is_deleted

    @property
    def sequence_number(self):
        """Gets the sequence_number of this AdditionalService.  # noqa: E501


        :return: The sequence_number of this AdditionalService.  # noqa: E501
        :rtype: int
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this AdditionalService.


        :param sequence_number: The sequence_number of this AdditionalService.  # noqa: E501
        :type: int
        """
        if sequence_number is None:
            raise ValueError("Invalid value for `sequence_number`, must not be `None`")  # noqa: E501

        self._sequence_number = sequence_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdditionalService, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdditionalService):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
