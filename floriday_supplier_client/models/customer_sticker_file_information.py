# coding: utf-8

"""
    Main - Floriday Suppliers API

    ÔªøEvery endpoint requires at least the `role:app` scope and the header `X-Api-Key` populated with your given API-key. Most endpoints also require an additional scope which is listed in their descriptions.  - üóù [Authorization server (staging)](https://idm.staging.floriday.io/oauth2/ausmw6b47z1BnlHkw0h7/.well-known/oauth-authorization-server) - üóù [Authorization server (live)](https://idm.floriday.io/oauth2/aus3testdcf2vyfs70i7/.well-known/oauth-authorization-server) - üìö [Documentation](https://developer.floriday.io/docs/welcome) - ‚ñ∂ [Coding screencast: getting started (NL)](https://www.youtube.com/watch?v=fdqzP7_Y_s8)  ---  _The current state of this version 2024v1 is **Main**._ * This version will be deprecated after October 2024. * This version will be removed after April 2025.  ---  üîó 2023v2: [Customers API](https://api.staging.floriday.io/customers-api-2023v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2023v2/swagger/index.html) üîó 2024v1: [Customers API](https://api.staging.floriday.io/customers-api-2024v1/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v1/swagger/index.html) üîó 2024v2: [Customers API](https://api.staging.floriday.io/customers-api-2024v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v2/swagger/index.html)   # noqa: E501

    OpenAPI spec version: 2024v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustomerStickerFileInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'upload_layout': 'StickerUploadLayout',
        'number_of_pages': 'int',
        'number_of_copies': 'int',
        'deliver_separately': 'bool',
        'sticker_provided_by': 'StickerProvidedBy',
        'should_be_printed': 'bool',
        'parent_id': 'str'
    }

    attribute_map = {
        'upload_layout': 'uploadLayout',
        'number_of_pages': 'numberOfPages',
        'number_of_copies': 'numberOfCopies',
        'deliver_separately': 'deliverSeparately',
        'sticker_provided_by': 'stickerProvidedBy',
        'should_be_printed': 'shouldBePrinted',
        'parent_id': 'parentId'
    }

    def __init__(self, upload_layout=None, number_of_pages=None, number_of_copies=None, deliver_separately=None, sticker_provided_by=None, should_be_printed=None, parent_id=None):  # noqa: E501
        """CustomerStickerFileInformation - a model defined in Swagger"""  # noqa: E501
        self._upload_layout = None
        self._number_of_pages = None
        self._number_of_copies = None
        self._deliver_separately = None
        self._sticker_provided_by = None
        self._should_be_printed = None
        self._parent_id = None
        self.discriminator = None
        self.upload_layout = upload_layout
        self.number_of_pages = number_of_pages
        self.number_of_copies = number_of_copies
        self.deliver_separately = deliver_separately
        self.sticker_provided_by = sticker_provided_by
        self.should_be_printed = should_be_printed
        if parent_id is not None:
            self.parent_id = parent_id

    @property
    def upload_layout(self):
        """Gets the upload_layout of this CustomerStickerFileInformation.  # noqa: E501


        :return: The upload_layout of this CustomerStickerFileInformation.  # noqa: E501
        :rtype: StickerUploadLayout
        """
        return self._upload_layout

    @upload_layout.setter
    def upload_layout(self, upload_layout):
        """Sets the upload_layout of this CustomerStickerFileInformation.


        :param upload_layout: The upload_layout of this CustomerStickerFileInformation.  # noqa: E501
        :type: StickerUploadLayout
        """
        if upload_layout is None:
            raise ValueError("Invalid value for `upload_layout`, must not be `None`")  # noqa: E501

        self._upload_layout = upload_layout

    @property
    def number_of_pages(self):
        """Gets the number_of_pages of this CustomerStickerFileInformation.  # noqa: E501


        :return: The number_of_pages of this CustomerStickerFileInformation.  # noqa: E501
        :rtype: int
        """
        return self._number_of_pages

    @number_of_pages.setter
    def number_of_pages(self, number_of_pages):
        """Sets the number_of_pages of this CustomerStickerFileInformation.


        :param number_of_pages: The number_of_pages of this CustomerStickerFileInformation.  # noqa: E501
        :type: int
        """
        if number_of_pages is None:
            raise ValueError("Invalid value for `number_of_pages`, must not be `None`")  # noqa: E501

        self._number_of_pages = number_of_pages

    @property
    def number_of_copies(self):
        """Gets the number_of_copies of this CustomerStickerFileInformation.  # noqa: E501


        :return: The number_of_copies of this CustomerStickerFileInformation.  # noqa: E501
        :rtype: int
        """
        return self._number_of_copies

    @number_of_copies.setter
    def number_of_copies(self, number_of_copies):
        """Sets the number_of_copies of this CustomerStickerFileInformation.


        :param number_of_copies: The number_of_copies of this CustomerStickerFileInformation.  # noqa: E501
        :type: int
        """
        if number_of_copies is None:
            raise ValueError("Invalid value for `number_of_copies`, must not be `None`")  # noqa: E501

        self._number_of_copies = number_of_copies

    @property
    def deliver_separately(self):
        """Gets the deliver_separately of this CustomerStickerFileInformation.  # noqa: E501


        :return: The deliver_separately of this CustomerStickerFileInformation.  # noqa: E501
        :rtype: bool
        """
        return self._deliver_separately

    @deliver_separately.setter
    def deliver_separately(self, deliver_separately):
        """Sets the deliver_separately of this CustomerStickerFileInformation.


        :param deliver_separately: The deliver_separately of this CustomerStickerFileInformation.  # noqa: E501
        :type: bool
        """
        if deliver_separately is None:
            raise ValueError("Invalid value for `deliver_separately`, must not be `None`")  # noqa: E501

        self._deliver_separately = deliver_separately

    @property
    def sticker_provided_by(self):
        """Gets the sticker_provided_by of this CustomerStickerFileInformation.  # noqa: E501


        :return: The sticker_provided_by of this CustomerStickerFileInformation.  # noqa: E501
        :rtype: StickerProvidedBy
        """
        return self._sticker_provided_by

    @sticker_provided_by.setter
    def sticker_provided_by(self, sticker_provided_by):
        """Sets the sticker_provided_by of this CustomerStickerFileInformation.


        :param sticker_provided_by: The sticker_provided_by of this CustomerStickerFileInformation.  # noqa: E501
        :type: StickerProvidedBy
        """
        if sticker_provided_by is None:
            raise ValueError("Invalid value for `sticker_provided_by`, must not be `None`")  # noqa: E501

        self._sticker_provided_by = sticker_provided_by

    @property
    def should_be_printed(self):
        """Gets the should_be_printed of this CustomerStickerFileInformation.  # noqa: E501


        :return: The should_be_printed of this CustomerStickerFileInformation.  # noqa: E501
        :rtype: bool
        """
        return self._should_be_printed

    @should_be_printed.setter
    def should_be_printed(self, should_be_printed):
        """Sets the should_be_printed of this CustomerStickerFileInformation.


        :param should_be_printed: The should_be_printed of this CustomerStickerFileInformation.  # noqa: E501
        :type: bool
        """
        if should_be_printed is None:
            raise ValueError("Invalid value for `should_be_printed`, must not be `None`")  # noqa: E501

        self._should_be_printed = should_be_printed

    @property
    def parent_id(self):
        """Gets the parent_id of this CustomerStickerFileInformation.  # noqa: E501


        :return: The parent_id of this CustomerStickerFileInformation.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this CustomerStickerFileInformation.


        :param parent_id: The parent_id of this CustomerStickerFileInformation.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomerStickerFileInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomerStickerFileInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
