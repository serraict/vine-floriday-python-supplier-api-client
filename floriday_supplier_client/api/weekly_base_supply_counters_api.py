# coding: utf-8

"""
    Main - Floriday Suppliers API

    ﻿Every endpoint requires at least the `role:app` scope and the header `X-Api-Key` populated with your given API-key. Most endpoints also require an additional scope which is listed in their descriptions.  - 🗝 [Authorization server (staging)](https://idm.staging.floriday.io/oauth2/ausmw6b47z1BnlHkw0h7/.well-known/oauth-authorization-server) - 🗝 [Authorization server (live)](https://idm.floriday.io/oauth2/aus3testdcf2vyfs70i7/.well-known/oauth-authorization-server) - 📚 [Documentation](https://developer.floriday.io/docs/welcome) - ▶ [Coding screencast: getting started (NL)](https://www.youtube.com/watch?v=fdqzP7_Y_s8)  ---  _The current state of this version 2024v1 is **Main**._ * This version will be deprecated after October 2024. * This version will be removed after April 2025.  ---  🔗 2023v2: [Customers API](https://api.staging.floriday.io/customers-api-2023v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2023v2/swagger/index.html) 🔗 2024v1: [Customers API](https://api.staging.floriday.io/customers-api-2024v1/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v1/swagger/index.html) 🔗 2024v2: [Customers API](https://api.staging.floriday.io/customers-api-2024v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v2/swagger/index.html)   # noqa: E501

    OpenAPI spec version: 2024v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from floriday_supplier_client.api_client import ApiClient


class WeeklyBaseSupplyCountersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_weekly_base_supply_counter_template_to_trade_item_async(self, body, weekly_base_supply_counter_template_id, **kwargs):  # noqa: E501
        """supply:write - Add WeeklyBaseSupplyCounterTemplate to trade item.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_weekly_base_supply_counter_template_to_trade_item_async(body, weekly_base_supply_counter_template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WeeklyBaseSupplyCounterTemplateToTradeItem body: (required)
        :param str weekly_base_supply_counter_template_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_weekly_base_supply_counter_template_to_trade_item_async_with_http_info(body, weekly_base_supply_counter_template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_weekly_base_supply_counter_template_to_trade_item_async_with_http_info(body, weekly_base_supply_counter_template_id, **kwargs)  # noqa: E501
            return data

    def add_weekly_base_supply_counter_template_to_trade_item_async_with_http_info(self, body, weekly_base_supply_counter_template_id, **kwargs):  # noqa: E501
        """supply:write - Add WeeklyBaseSupplyCounterTemplate to trade item.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_weekly_base_supply_counter_template_to_trade_item_async_with_http_info(body, weekly_base_supply_counter_template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WeeklyBaseSupplyCounterTemplateToTradeItem body: (required)
        :param str weekly_base_supply_counter_template_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'weekly_base_supply_counter_template_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_weekly_base_supply_counter_template_to_trade_item_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_weekly_base_supply_counter_template_to_trade_item_async`")  # noqa: E501
        # verify the required parameter 'weekly_base_supply_counter_template_id' is set
        if ('weekly_base_supply_counter_template_id' not in params or
                params['weekly_base_supply_counter_template_id'] is None):
            raise ValueError("Missing the required parameter `weekly_base_supply_counter_template_id` when calling `add_weekly_base_supply_counter_template_to_trade_item_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'weekly_base_supply_counter_template_id' in params:
            path_params['weeklyBaseSupplyCounterTemplateId'] = params['weekly_base_supply_counter_template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT Token', 'X-Api-Key']  # noqa: E501

        return self.api_client.call_api(
            '/weekly-base-supply-counters/templates/{weeklyBaseSupplyCounterTemplateId}/add-to-trade-item', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def claim_number_of_pieces_from_weekly_base_supply_counter(self, body, weekly_base_supply_counter_id, **kwargs):  # noqa: E501
        """supply:write - Claim NumberOfPieces from weekly base supply counter.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.claim_number_of_pieces_from_weekly_base_supply_counter(body, weekly_base_supply_counter_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClaimFromWeeklyBaseSupplyCounter body: (required)
        :param str weekly_base_supply_counter_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.claim_number_of_pieces_from_weekly_base_supply_counter_with_http_info(body, weekly_base_supply_counter_id, **kwargs)  # noqa: E501
        else:
            (data) = self.claim_number_of_pieces_from_weekly_base_supply_counter_with_http_info(body, weekly_base_supply_counter_id, **kwargs)  # noqa: E501
            return data

    def claim_number_of_pieces_from_weekly_base_supply_counter_with_http_info(self, body, weekly_base_supply_counter_id, **kwargs):  # noqa: E501
        """supply:write - Claim NumberOfPieces from weekly base supply counter.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.claim_number_of_pieces_from_weekly_base_supply_counter_with_http_info(body, weekly_base_supply_counter_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClaimFromWeeklyBaseSupplyCounter body: (required)
        :param str weekly_base_supply_counter_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'weekly_base_supply_counter_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method claim_number_of_pieces_from_weekly_base_supply_counter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `claim_number_of_pieces_from_weekly_base_supply_counter`")  # noqa: E501
        # verify the required parameter 'weekly_base_supply_counter_id' is set
        if ('weekly_base_supply_counter_id' not in params or
                params['weekly_base_supply_counter_id'] is None):
            raise ValueError("Missing the required parameter `weekly_base_supply_counter_id` when calling `claim_number_of_pieces_from_weekly_base_supply_counter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'weekly_base_supply_counter_id' in params:
            path_params['weeklyBaseSupplyCounterId'] = params['weekly_base_supply_counter_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT Token', 'X-Api-Key']  # noqa: E501

        return self.api_client.call_api(
            '/weekly-base-supply-counters/claim/{weeklyBaseSupplyCounterId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_weekly_base_supply_counter_template(self, weekly_base_supply_counter_template_id, **kwargs):  # noqa: E501
        """supply:write - Delete weekly base supply counter template.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_weekly_base_supply_counter_template(weekly_base_supply_counter_template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str weekly_base_supply_counter_template_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_weekly_base_supply_counter_template_with_http_info(weekly_base_supply_counter_template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_weekly_base_supply_counter_template_with_http_info(weekly_base_supply_counter_template_id, **kwargs)  # noqa: E501
            return data

    def delete_weekly_base_supply_counter_template_with_http_info(self, weekly_base_supply_counter_template_id, **kwargs):  # noqa: E501
        """supply:write - Delete weekly base supply counter template.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_weekly_base_supply_counter_template_with_http_info(weekly_base_supply_counter_template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str weekly_base_supply_counter_template_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['weekly_base_supply_counter_template_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_weekly_base_supply_counter_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'weekly_base_supply_counter_template_id' is set
        if ('weekly_base_supply_counter_template_id' not in params or
                params['weekly_base_supply_counter_template_id'] is None):
            raise ValueError("Missing the required parameter `weekly_base_supply_counter_template_id` when calling `delete_weekly_base_supply_counter_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'weekly_base_supply_counter_template_id' in params:
            path_params['weeklyBaseSupplyCounterTemplateId'] = params['weekly_base_supply_counter_template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT Token', 'X-Api-Key']  # noqa: E501

        return self.api_client.call_api(
            '/weekly-base-supply-counters/templates/{weeklyBaseSupplyCounterTemplateId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_weekly_base_supply_counter(self, weekly_base_supply_counter_id, **kwargs):  # noqa: E501
        """supply:read - Returns a weekly base supply counter.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_weekly_base_supply_counter(weekly_base_supply_counter_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str weekly_base_supply_counter_id: (required)
        :return: WeeklyBaseSupplyCounter
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_weekly_base_supply_counter_with_http_info(weekly_base_supply_counter_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_weekly_base_supply_counter_with_http_info(weekly_base_supply_counter_id, **kwargs)  # noqa: E501
            return data

    def get_weekly_base_supply_counter_with_http_info(self, weekly_base_supply_counter_id, **kwargs):  # noqa: E501
        """supply:read - Returns a weekly base supply counter.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_weekly_base_supply_counter_with_http_info(weekly_base_supply_counter_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str weekly_base_supply_counter_id: (required)
        :return: WeeklyBaseSupplyCounter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['weekly_base_supply_counter_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_weekly_base_supply_counter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'weekly_base_supply_counter_id' is set
        if ('weekly_base_supply_counter_id' not in params or
                params['weekly_base_supply_counter_id'] is None):
            raise ValueError("Missing the required parameter `weekly_base_supply_counter_id` when calling `get_weekly_base_supply_counter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'weekly_base_supply_counter_id' in params:
            path_params['weeklyBaseSupplyCounterId'] = params['weekly_base_supply_counter_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT Token', 'X-Api-Key']  # noqa: E501

        return self.api_client.call_api(
            '/weekly-base-supply-counters/{weeklyBaseSupplyCounterId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WeeklyBaseSupplyCounter',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_weekly_base_supply_counter_by_template_id(self, weekly_base_supply_counter_template_id, **kwargs):  # noqa: E501
        """supply:read - Returns weekly base supply counters by templateId.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_weekly_base_supply_counter_by_template_id(weekly_base_supply_counter_template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str weekly_base_supply_counter_template_id: (required)
        :return: list[WeeklyBaseSupplyCounter]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_weekly_base_supply_counter_by_template_id_with_http_info(weekly_base_supply_counter_template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_weekly_base_supply_counter_by_template_id_with_http_info(weekly_base_supply_counter_template_id, **kwargs)  # noqa: E501
            return data

    def get_weekly_base_supply_counter_by_template_id_with_http_info(self, weekly_base_supply_counter_template_id, **kwargs):  # noqa: E501
        """supply:read - Returns weekly base supply counters by templateId.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_weekly_base_supply_counter_by_template_id_with_http_info(weekly_base_supply_counter_template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str weekly_base_supply_counter_template_id: (required)
        :return: list[WeeklyBaseSupplyCounter]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['weekly_base_supply_counter_template_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_weekly_base_supply_counter_by_template_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'weekly_base_supply_counter_template_id' is set
        if ('weekly_base_supply_counter_template_id' not in params or
                params['weekly_base_supply_counter_template_id'] is None):
            raise ValueError("Missing the required parameter `weekly_base_supply_counter_template_id` when calling `get_weekly_base_supply_counter_by_template_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'weekly_base_supply_counter_template_id' in params:
            path_params['weeklyBaseSupplyCounterTemplateId'] = params['weekly_base_supply_counter_template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT Token', 'X-Api-Key']  # noqa: E501

        return self.api_client.call_api(
            '/weekly-base-supply-counters/by-template-id/{weeklyBaseSupplyCounterTemplateId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[WeeklyBaseSupplyCounter]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_weekly_base_supply_template_by_id(self, weekly_base_supply_counter_template_id, **kwargs):  # noqa: E501
        """supply:read - Returns a weekly base supply counter template.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_weekly_base_supply_template_by_id(weekly_base_supply_counter_template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str weekly_base_supply_counter_template_id: (required)
        :return: WeeklyBaseSupplyCounterTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_weekly_base_supply_template_by_id_with_http_info(weekly_base_supply_counter_template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_weekly_base_supply_template_by_id_with_http_info(weekly_base_supply_counter_template_id, **kwargs)  # noqa: E501
            return data

    def get_weekly_base_supply_template_by_id_with_http_info(self, weekly_base_supply_counter_template_id, **kwargs):  # noqa: E501
        """supply:read - Returns a weekly base supply counter template.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_weekly_base_supply_template_by_id_with_http_info(weekly_base_supply_counter_template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str weekly_base_supply_counter_template_id: (required)
        :return: WeeklyBaseSupplyCounterTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['weekly_base_supply_counter_template_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_weekly_base_supply_template_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'weekly_base_supply_counter_template_id' is set
        if ('weekly_base_supply_counter_template_id' not in params or
                params['weekly_base_supply_counter_template_id'] is None):
            raise ValueError("Missing the required parameter `weekly_base_supply_counter_template_id` when calling `get_weekly_base_supply_template_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'weekly_base_supply_counter_template_id' in params:
            path_params['weeklyBaseSupplyCounterTemplateId'] = params['weekly_base_supply_counter_template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT Token', 'X-Api-Key']  # noqa: E501

        return self.api_client.call_api(
            '/weekly-base-supply-counters/templates/{weeklyBaseSupplyCounterTemplateId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WeeklyBaseSupplyCounterTemplate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_weekly_base_supply_templates(self, **kwargs):  # noqa: E501
        """supply:read - Returns weekly base supply counter templates.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_weekly_base_supply_templates(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[WeeklyBaseSupplyCounterTemplate]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_weekly_base_supply_templates_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_weekly_base_supply_templates_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_weekly_base_supply_templates_with_http_info(self, **kwargs):  # noqa: E501
        """supply:read - Returns weekly base supply counter templates.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_weekly_base_supply_templates_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[WeeklyBaseSupplyCounterTemplate]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_weekly_base_supply_templates" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT Token', 'X-Api-Key']  # noqa: E501

        return self.api_client.call_api(
            '/weekly-base-supply-counters/templates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[WeeklyBaseSupplyCounterTemplate]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upsert_weekly_base_supply_counter_template(self, body, **kwargs):  # noqa: E501
        """supply:write - Upsert weekly base supply counter template.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upsert_weekly_base_supply_counter_template(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EditWeeklyBaseSupplyCounterTemplate body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upsert_weekly_base_supply_counter_template_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.upsert_weekly_base_supply_counter_template_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def upsert_weekly_base_supply_counter_template_with_http_info(self, body, **kwargs):  # noqa: E501
        """supply:write - Upsert weekly base supply counter template.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upsert_weekly_base_supply_counter_template_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EditWeeklyBaseSupplyCounterTemplate body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upsert_weekly_base_supply_counter_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `upsert_weekly_base_supply_counter_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT Token', 'X-Api-Key']  # noqa: E501

        return self.api_client.call_api(
            '/weekly-base-supply-counters/templates', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
