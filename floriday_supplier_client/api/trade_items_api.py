# coding: utf-8

"""
    Main - Floriday Suppliers API

    ﻿Every endpoint requires at least the `role:app` scope and the header `X-Api-Key` populated with your given API-key. Most endpoints also require an additional scope which is listed in their descriptions.  - 🗝 [Authorization server (staging)](https://idm.staging.floriday.io/oauth2/ausmw6b47z1BnlHkw0h7/.well-known/oauth-authorization-server) - 🗝 [Authorization server (live)](https://idm.floriday.io/oauth2/aus3testdcf2vyfs70i7/.well-known/oauth-authorization-server) - 📚 [Documentation](https://developer.floriday.io/docs/welcome) - ▶ [Coding screencast: getting started (NL)](https://www.youtube.com/watch?v=fdqzP7_Y_s8)  ---  _The current state of this version 2024v1 is **Main**._ * This version will be deprecated after October 2024. * This version will be removed after April 2025.  ---  🔗 2023v2: [Customers API](https://api.staging.floriday.io/customers-api-2023v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2023v2/swagger/index.html) 🔗 2024v1: [Customers API](https://api.staging.floriday.io/customers-api-2024v1/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v1/swagger/index.html) 🔗 2024v2: [Customers API](https://api.staging.floriday.io/customers-api-2024v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v2/swagger/index.html)   # noqa: E501

    OpenAPI spec version: 2024v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from floriday_supplier_client.api_client import ApiClient


class TradeItemsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_trade_item(self, body, **kwargs):  # noqa: E501
        """catalog:write - Creates a new trade item.  # noqa: E501

        Photo URLs posted as Floriday media must conform with the following format https://image.floriday.io/mediaId.jpg  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_trade_item(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TradeItemBase body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_trade_item_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_trade_item_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def add_trade_item_with_http_info(self, body, **kwargs):  # noqa: E501
        """catalog:write - Creates a new trade item.  # noqa: E501

        Photo URLs posted as Floriday media must conform with the following format https://image.floriday.io/mediaId.jpg  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_trade_item_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TradeItemBase body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_trade_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_trade_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT Token', 'X-Api-Key']  # noqa: E501

        return self.api_client.call_api(
            '/trade-items', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_trade_item_variant(self, body, **kwargs):  # noqa: E501
        """catalog:write - Creates a new trade item variant.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_trade_item_variant(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TradeItemVariant body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_trade_item_variant_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_trade_item_variant_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def add_trade_item_variant_with_http_info(self, body, **kwargs):  # noqa: E501
        """catalog:write - Creates a new trade item variant.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_trade_item_variant_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TradeItemVariant body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_trade_item_variant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_trade_item_variant`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT Token', 'X-Api-Key']  # noqa: E501

        return self.api_client.call_api(
            '/trade-items/variants', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_trade_item(self, trade_item_id, **kwargs):  # noqa: E501
        """catalog:write - Deletes a trade item.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_trade_item(trade_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str trade_item_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_trade_item_with_http_info(trade_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_trade_item_with_http_info(trade_item_id, **kwargs)  # noqa: E501
            return data

    def delete_trade_item_with_http_info(self, trade_item_id, **kwargs):  # noqa: E501
        """catalog:write - Deletes a trade item.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_trade_item_with_http_info(trade_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str trade_item_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['trade_item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_trade_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'trade_item_id' is set
        if ('trade_item_id' not in params or
                params['trade_item_id'] is None):
            raise ValueError("Missing the required parameter `trade_item_id` when calling `delete_trade_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'trade_item_id' in params:
            path_params['tradeItemId'] = params['trade_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT Token', 'X-Api-Key']  # noqa: E501

        return self.api_client.call_api(
            '/trade-items/{tradeItemId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_trade_item(self, body, trade_item_id, **kwargs):  # noqa: E501
        """catalog:write - Updates a trade item.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_trade_item(body, trade_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TradeItemUpdate body: (required)
        :param str trade_item_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_trade_item_with_http_info(body, trade_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_trade_item_with_http_info(body, trade_item_id, **kwargs)  # noqa: E501
            return data

    def edit_trade_item_with_http_info(self, body, trade_item_id, **kwargs):  # noqa: E501
        """catalog:write - Updates a trade item.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_trade_item_with_http_info(body, trade_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TradeItemUpdate body: (required)
        :param str trade_item_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'trade_item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_trade_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `edit_trade_item`")  # noqa: E501
        # verify the required parameter 'trade_item_id' is set
        if ('trade_item_id' not in params or
                params['trade_item_id'] is None):
            raise ValueError("Missing the required parameter `trade_item_id` when calling `edit_trade_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'trade_item_id' in params:
            path_params['tradeItemId'] = params['trade_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT Token', 'X-Api-Key']  # noqa: E501

        return self.api_client.call_api(
            '/trade-items/{tradeItemId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_trade_item_variant(self, body, trade_item_id, **kwargs):  # noqa: E501
        """catalog:write - Update a trade item variant.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_trade_item_variant(body, trade_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TradeItemVariantUpdate body: (required)
        :param str trade_item_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_trade_item_variant_with_http_info(body, trade_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_trade_item_variant_with_http_info(body, trade_item_id, **kwargs)  # noqa: E501
            return data

    def edit_trade_item_variant_with_http_info(self, body, trade_item_id, **kwargs):  # noqa: E501
        """catalog:write - Update a trade item variant.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_trade_item_variant_with_http_info(body, trade_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TradeItemVariantUpdate body: (required)
        :param str trade_item_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'trade_item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_trade_item_variant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `edit_trade_item_variant`")  # noqa: E501
        # verify the required parameter 'trade_item_id' is set
        if ('trade_item_id' not in params or
                params['trade_item_id'] is None):
            raise ValueError("Missing the required parameter `trade_item_id` when calling `edit_trade_item_variant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'trade_item_id' in params:
            path_params['tradeItemId'] = params['trade_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT Token', 'X-Api-Key']  # noqa: E501

        return self.api_client.call_api(
            '/trade-items/variants/{tradeItemId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_trade_item_by_id(self, trade_item_id, **kwargs):  # noqa: E501
        """catalog:read - Returns a trade item.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_trade_item_by_id(trade_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str trade_item_id: (required)
        :return: TradeItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_trade_item_by_id_with_http_info(trade_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_trade_item_by_id_with_http_info(trade_item_id, **kwargs)  # noqa: E501
            return data

    def get_trade_item_by_id_with_http_info(self, trade_item_id, **kwargs):  # noqa: E501
        """catalog:read - Returns a trade item.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_trade_item_by_id_with_http_info(trade_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str trade_item_id: (required)
        :return: TradeItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['trade_item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_trade_item_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'trade_item_id' is set
        if ('trade_item_id' not in params or
                params['trade_item_id'] is None):
            raise ValueError("Missing the required parameter `trade_item_id` when calling `get_trade_item_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'trade_item_id' in params:
            path_params['tradeItemId'] = params['trade_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT Token', 'X-Api-Key']  # noqa: E501

        return self.api_client.call_api(
            '/trade-items/{tradeItemId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TradeItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_trade_item_by_id_and_version(self, trade_item_id, version, **kwargs):  # noqa: E501
        """catalog:read - Returns a trade item.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_trade_item_by_id_and_version(trade_item_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str trade_item_id: (required)
        :param int version: (required)
        :return: TradeItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_trade_item_by_id_and_version_with_http_info(trade_item_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_trade_item_by_id_and_version_with_http_info(trade_item_id, version, **kwargs)  # noqa: E501
            return data

    def get_trade_item_by_id_and_version_with_http_info(self, trade_item_id, version, **kwargs):  # noqa: E501
        """catalog:read - Returns a trade item.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_trade_item_by_id_and_version_with_http_info(trade_item_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str trade_item_id: (required)
        :param int version: (required)
        :return: TradeItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['trade_item_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_trade_item_by_id_and_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'trade_item_id' is set
        if ('trade_item_id' not in params or
                params['trade_item_id'] is None):
            raise ValueError("Missing the required parameter `trade_item_id` when calling `get_trade_item_by_id_and_version`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_trade_item_by_id_and_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'trade_item_id' in params:
            path_params['tradeItemId'] = params['trade_item_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT Token', 'X-Api-Key']  # noqa: E501

        return self.api_client.call_api(
            '/trade-items/{tradeItemId}/{version}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TradeItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_trade_items(self, **kwargs):  # noqa: E501
        """catalog:read - Returns trade items.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_trade_items(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page:
        :param int limit_result:
        :param bool include_deleted:
        :return: list[TradeItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_trade_items_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_trade_items_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_trade_items_with_http_info(self, **kwargs):  # noqa: E501
        """catalog:read - Returns trade items.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_trade_items_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page:
        :param int limit_result:
        :param bool include_deleted:
        :return: list[TradeItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'limit_result', 'include_deleted']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_trade_items" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'limit_result' in params:
            query_params.append(('limitResult', params['limit_result']))  # noqa: E501
        if 'include_deleted' in params:
            query_params.append(('includeDeleted', params['include_deleted']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT Token', 'X-Api-Key']  # noqa: E501

        return self.api_client.call_api(
            '/trade-items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TradeItem]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_trade_items_by_sequence_number(self, sequence_number, **kwargs):  # noqa: E501
        """catalog:read - rate limit: 2.0 per second - burst limit: 200 - Returns a list of max 1000 trade items starting from a specified sequence number.  # noqa: E501

        **Synchronization endpoint** Fetches the succeeding modified records (including deleted records) based on `Limit` and the given `SequenceNumber`.  **Note** Your data is up to date when your given `SequenceNumber` is equal to the received `MaximumSequenceNumber`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_trade_items_by_sequence_number(sequence_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sequence_number: (required)
        :param int limit_result:
        :return: SyncResultOfTradeItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_trade_items_by_sequence_number_with_http_info(sequence_number, **kwargs)  # noqa: E501
        else:
            (data) = self.get_trade_items_by_sequence_number_with_http_info(sequence_number, **kwargs)  # noqa: E501
            return data

    def get_trade_items_by_sequence_number_with_http_info(self, sequence_number, **kwargs):  # noqa: E501
        """catalog:read - rate limit: 2.0 per second - burst limit: 200 - Returns a list of max 1000 trade items starting from a specified sequence number.  # noqa: E501

        **Synchronization endpoint** Fetches the succeeding modified records (including deleted records) based on `Limit` and the given `SequenceNumber`.  **Note** Your data is up to date when your given `SequenceNumber` is equal to the received `MaximumSequenceNumber`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_trade_items_by_sequence_number_with_http_info(sequence_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sequence_number: (required)
        :param int limit_result:
        :return: SyncResultOfTradeItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sequence_number', 'limit_result']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_trade_items_by_sequence_number" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sequence_number' is set
        if ('sequence_number' not in params or
                params['sequence_number'] is None):
            raise ValueError("Missing the required parameter `sequence_number` when calling `get_trade_items_by_sequence_number`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sequence_number' in params:
            path_params['sequenceNumber'] = params['sequence_number']  # noqa: E501

        query_params = []
        if 'limit_result' in params:
            query_params.append(('limitResult', params['limit_result']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT Token', 'X-Api-Key']  # noqa: E501

        return self.api_client.call_api(
            '/trade-items/sync/{sequenceNumber}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SyncResultOfTradeItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_trade_items_max_sequence(self, **kwargs):  # noqa: E501
        """catalog:read - Returns the maximum sequence number found in trade items.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_trade_items_max_sequence(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_trade_items_max_sequence_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_trade_items_max_sequence_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_trade_items_max_sequence_with_http_info(self, **kwargs):  # noqa: E501
        """catalog:read - Returns the maximum sequence number found in trade items.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_trade_items_max_sequence_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_trade_items_max_sequence" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT Token', 'X-Api-Key']  # noqa: E501

        return self.api_client.call_api(
            '/trade-items/current-max-sequence', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_trade_items_summary(self, **kwargs):  # noqa: E501
        """catalog:read - rate limit: 2.0 per second - burst limit: 200 - Returns public trade item information of a supplier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_trade_items_summary(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] trade_item_ids:
        :param str supplier_organization_id:
        :return: list[TradeItemSummary]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_trade_items_summary_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_trade_items_summary_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_trade_items_summary_with_http_info(self, **kwargs):  # noqa: E501
        """catalog:read - rate limit: 2.0 per second - burst limit: 200 - Returns public trade item information of a supplier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_trade_items_summary_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] trade_item_ids:
        :param str supplier_organization_id:
        :return: list[TradeItemSummary]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['trade_item_ids', 'supplier_organization_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_trade_items_summary" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'trade_item_ids' in params:
            query_params.append(('tradeItemIds', params['trade_item_ids']))  # noqa: E501
            collection_formats['tradeItemIds'] = 'multi'  # noqa: E501
        if 'supplier_organization_id' in params:
            query_params.append(('supplierOrganizationId', params['supplier_organization_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT Token', 'X-Api-Key']  # noqa: E501

        return self.api_client.call_api(
            '/trade-items/summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TradeItemSummary]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
