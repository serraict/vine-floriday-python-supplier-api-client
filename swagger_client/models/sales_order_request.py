# coding: utf-8

"""
    Main - Floriday Suppliers API

    ÔªøEvery endpoint requires at least the `role:app` scope and the header `X-Api-Key` populated with your given API-key. Most endpoints also require an additional scope which is listed in their descriptions.  - üóù [Authorization server (staging)](https://idm.staging.floriday.io/oauth2/ausmw6b47z1BnlHkw0h7/.well-known/oauth-authorization-server) - üóù [Authorization server (live)](https://idm.floriday.io/oauth2/aus3testdcf2vyfs70i7/.well-known/oauth-authorization-server) - üìö [Documentation](https://developer.floriday.io/docs/welcome) - ‚ñ∂ [Coding screencast: getting started (NL)](https://www.youtube.com/watch?v=fdqzP7_Y_s8)  ---  _The current state of this version 2024v1 is **Main**._ * This version will be deprecated after October 2024. * This version will be removed after April 2025.  ---  üîó 2023v2: [Customers API](https://api.staging.floriday.io/customers-api-2023v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2023v2/swagger/index.html) üîó 2024v1: [Customers API](https://api.staging.floriday.io/customers-api-2024v1/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v1/swagger/index.html) üîó 2024v2: [Customers API](https://api.staging.floriday.io/customers-api-2024v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v2/swagger/index.html)   # noqa: E501

    OpenAPI spec version: 2024v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SalesOrderRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sales_order_id': 'str',
        'customer_organization_id': 'str',
        'supply_line_id': 'str',
        'number_of_pieces': 'int',
        'price_per_piece': 'AddPrice',
        'customer_order_id': 'str',
        'created_by_user': 'str',
        'packing_configuration': 'SalesOrderPackingConfigurationCreate',
        'order_date_time': 'datetime',
        'delivery': 'AddSalesOrderDelivery',
        'additional_services': 'list[OrderAdditionalService]',
        'send_ekt': 'bool',
        'payment_provider': 'PaymentProviderCreate',
        'delivery_remarks': 'str'
    }

    attribute_map = {
        'sales_order_id': 'salesOrderId',
        'customer_organization_id': 'customerOrganizationId',
        'supply_line_id': 'supplyLineId',
        'number_of_pieces': 'numberOfPieces',
        'price_per_piece': 'pricePerPiece',
        'customer_order_id': 'customerOrderId',
        'created_by_user': 'createdByUser',
        'packing_configuration': 'packingConfiguration',
        'order_date_time': 'orderDateTime',
        'delivery': 'delivery',
        'additional_services': 'additionalServices',
        'send_ekt': 'sendEkt',
        'payment_provider': 'paymentProvider',
        'delivery_remarks': 'deliveryRemarks'
    }

    def __init__(self, sales_order_id=None, customer_organization_id=None, supply_line_id=None, number_of_pieces=None, price_per_piece=None, customer_order_id=None, created_by_user=None, packing_configuration=None, order_date_time=None, delivery=None, additional_services=None, send_ekt=None, payment_provider=None, delivery_remarks=None):  # noqa: E501
        """SalesOrderRequest - a model defined in Swagger"""  # noqa: E501
        self._sales_order_id = None
        self._customer_organization_id = None
        self._supply_line_id = None
        self._number_of_pieces = None
        self._price_per_piece = None
        self._customer_order_id = None
        self._created_by_user = None
        self._packing_configuration = None
        self._order_date_time = None
        self._delivery = None
        self._additional_services = None
        self._send_ekt = None
        self._payment_provider = None
        self._delivery_remarks = None
        self.discriminator = None
        self.sales_order_id = sales_order_id
        self.customer_organization_id = customer_organization_id
        self.supply_line_id = supply_line_id
        self.number_of_pieces = number_of_pieces
        self.price_per_piece = price_per_piece
        if customer_order_id is not None:
            self.customer_order_id = customer_order_id
        if created_by_user is not None:
            self.created_by_user = created_by_user
        self.packing_configuration = packing_configuration
        self.order_date_time = order_date_time
        self.delivery = delivery
        if additional_services is not None:
            self.additional_services = additional_services
        if send_ekt is not None:
            self.send_ekt = send_ekt
        self.payment_provider = payment_provider
        if delivery_remarks is not None:
            self.delivery_remarks = delivery_remarks

    @property
    def sales_order_id(self):
        """Gets the sales_order_id of this SalesOrderRequest.  # noqa: E501


        :return: The sales_order_id of this SalesOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._sales_order_id

    @sales_order_id.setter
    def sales_order_id(self, sales_order_id):
        """Sets the sales_order_id of this SalesOrderRequest.


        :param sales_order_id: The sales_order_id of this SalesOrderRequest.  # noqa: E501
        :type: str
        """
        if sales_order_id is None:
            raise ValueError("Invalid value for `sales_order_id`, must not be `None`")  # noqa: E501

        self._sales_order_id = sales_order_id

    @property
    def customer_organization_id(self):
        """Gets the customer_organization_id of this SalesOrderRequest.  # noqa: E501


        :return: The customer_organization_id of this SalesOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._customer_organization_id

    @customer_organization_id.setter
    def customer_organization_id(self, customer_organization_id):
        """Sets the customer_organization_id of this SalesOrderRequest.


        :param customer_organization_id: The customer_organization_id of this SalesOrderRequest.  # noqa: E501
        :type: str
        """
        if customer_organization_id is None:
            raise ValueError("Invalid value for `customer_organization_id`, must not be `None`")  # noqa: E501

        self._customer_organization_id = customer_organization_id

    @property
    def supply_line_id(self):
        """Gets the supply_line_id of this SalesOrderRequest.  # noqa: E501


        :return: The supply_line_id of this SalesOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._supply_line_id

    @supply_line_id.setter
    def supply_line_id(self, supply_line_id):
        """Sets the supply_line_id of this SalesOrderRequest.


        :param supply_line_id: The supply_line_id of this SalesOrderRequest.  # noqa: E501
        :type: str
        """
        if supply_line_id is None:
            raise ValueError("Invalid value for `supply_line_id`, must not be `None`")  # noqa: E501

        self._supply_line_id = supply_line_id

    @property
    def number_of_pieces(self):
        """Gets the number_of_pieces of this SalesOrderRequest.  # noqa: E501


        :return: The number_of_pieces of this SalesOrderRequest.  # noqa: E501
        :rtype: int
        """
        return self._number_of_pieces

    @number_of_pieces.setter
    def number_of_pieces(self, number_of_pieces):
        """Sets the number_of_pieces of this SalesOrderRequest.


        :param number_of_pieces: The number_of_pieces of this SalesOrderRequest.  # noqa: E501
        :type: int
        """
        if number_of_pieces is None:
            raise ValueError("Invalid value for `number_of_pieces`, must not be `None`")  # noqa: E501

        self._number_of_pieces = number_of_pieces

    @property
    def price_per_piece(self):
        """Gets the price_per_piece of this SalesOrderRequest.  # noqa: E501


        :return: The price_per_piece of this SalesOrderRequest.  # noqa: E501
        :rtype: AddPrice
        """
        return self._price_per_piece

    @price_per_piece.setter
    def price_per_piece(self, price_per_piece):
        """Sets the price_per_piece of this SalesOrderRequest.


        :param price_per_piece: The price_per_piece of this SalesOrderRequest.  # noqa: E501
        :type: AddPrice
        """
        if price_per_piece is None:
            raise ValueError("Invalid value for `price_per_piece`, must not be `None`")  # noqa: E501

        self._price_per_piece = price_per_piece

    @property
    def customer_order_id(self):
        """Gets the customer_order_id of this SalesOrderRequest.  # noqa: E501


        :return: The customer_order_id of this SalesOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._customer_order_id

    @customer_order_id.setter
    def customer_order_id(self, customer_order_id):
        """Sets the customer_order_id of this SalesOrderRequest.


        :param customer_order_id: The customer_order_id of this SalesOrderRequest.  # noqa: E501
        :type: str
        """

        self._customer_order_id = customer_order_id

    @property
    def created_by_user(self):
        """Gets the created_by_user of this SalesOrderRequest.  # noqa: E501

        Used to associate an existing Floriday account with the created sales order. The user will be shown within the Floriday portal as the created user.  # noqa: E501

        :return: The created_by_user of this SalesOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._created_by_user

    @created_by_user.setter
    def created_by_user(self, created_by_user):
        """Sets the created_by_user of this SalesOrderRequest.

        Used to associate an existing Floriday account with the created sales order. The user will be shown within the Floriday portal as the created user.  # noqa: E501

        :param created_by_user: The created_by_user of this SalesOrderRequest.  # noqa: E501
        :type: str
        """

        self._created_by_user = created_by_user

    @property
    def packing_configuration(self):
        """Gets the packing_configuration of this SalesOrderRequest.  # noqa: E501


        :return: The packing_configuration of this SalesOrderRequest.  # noqa: E501
        :rtype: SalesOrderPackingConfigurationCreate
        """
        return self._packing_configuration

    @packing_configuration.setter
    def packing_configuration(self, packing_configuration):
        """Sets the packing_configuration of this SalesOrderRequest.


        :param packing_configuration: The packing_configuration of this SalesOrderRequest.  # noqa: E501
        :type: SalesOrderPackingConfigurationCreate
        """
        if packing_configuration is None:
            raise ValueError("Invalid value for `packing_configuration`, must not be `None`")  # noqa: E501

        self._packing_configuration = packing_configuration

    @property
    def order_date_time(self):
        """Gets the order_date_time of this SalesOrderRequest.  # noqa: E501


        :return: The order_date_time of this SalesOrderRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._order_date_time

    @order_date_time.setter
    def order_date_time(self, order_date_time):
        """Sets the order_date_time of this SalesOrderRequest.


        :param order_date_time: The order_date_time of this SalesOrderRequest.  # noqa: E501
        :type: datetime
        """
        if order_date_time is None:
            raise ValueError("Invalid value for `order_date_time`, must not be `None`")  # noqa: E501

        self._order_date_time = order_date_time

    @property
    def delivery(self):
        """Gets the delivery of this SalesOrderRequest.  # noqa: E501


        :return: The delivery of this SalesOrderRequest.  # noqa: E501
        :rtype: AddSalesOrderDelivery
        """
        return self._delivery

    @delivery.setter
    def delivery(self, delivery):
        """Sets the delivery of this SalesOrderRequest.


        :param delivery: The delivery of this SalesOrderRequest.  # noqa: E501
        :type: AddSalesOrderDelivery
        """
        if delivery is None:
            raise ValueError("Invalid value for `delivery`, must not be `None`")  # noqa: E501

        self._delivery = delivery

    @property
    def additional_services(self):
        """Gets the additional_services of this SalesOrderRequest.  # noqa: E501


        :return: The additional_services of this SalesOrderRequest.  # noqa: E501
        :rtype: list[OrderAdditionalService]
        """
        return self._additional_services

    @additional_services.setter
    def additional_services(self, additional_services):
        """Sets the additional_services of this SalesOrderRequest.


        :param additional_services: The additional_services of this SalesOrderRequest.  # noqa: E501
        :type: list[OrderAdditionalService]
        """

        self._additional_services = additional_services

    @property
    def send_ekt(self):
        """Gets the send_ekt of this SalesOrderRequest.  # noqa: E501


        :return: The send_ekt of this SalesOrderRequest.  # noqa: E501
        :rtype: bool
        """
        return self._send_ekt

    @send_ekt.setter
    def send_ekt(self, send_ekt):
        """Sets the send_ekt of this SalesOrderRequest.


        :param send_ekt: The send_ekt of this SalesOrderRequest.  # noqa: E501
        :type: bool
        """

        self._send_ekt = send_ekt

    @property
    def payment_provider(self):
        """Gets the payment_provider of this SalesOrderRequest.  # noqa: E501


        :return: The payment_provider of this SalesOrderRequest.  # noqa: E501
        :rtype: PaymentProviderCreate
        """
        return self._payment_provider

    @payment_provider.setter
    def payment_provider(self, payment_provider):
        """Sets the payment_provider of this SalesOrderRequest.


        :param payment_provider: The payment_provider of this SalesOrderRequest.  # noqa: E501
        :type: PaymentProviderCreate
        """
        if payment_provider is None:
            raise ValueError("Invalid value for `payment_provider`, must not be `None`")  # noqa: E501

        self._payment_provider = payment_provider

    @property
    def delivery_remarks(self):
        """Gets the delivery_remarks of this SalesOrderRequest.  # noqa: E501


        :return: The delivery_remarks of this SalesOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._delivery_remarks

    @delivery_remarks.setter
    def delivery_remarks(self, delivery_remarks):
        """Sets the delivery_remarks of this SalesOrderRequest.


        :param delivery_remarks: The delivery_remarks of this SalesOrderRequest.  # noqa: E501
        :type: str
        """

        self._delivery_remarks = delivery_remarks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SalesOrderRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SalesOrderRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
