# coding: utf-8

"""
    Main - Floriday Suppliers API

    ÔªøEvery endpoint requires at least the `role:app` scope and the header `X-Api-Key` populated with your given API-key. Most endpoints also require an additional scope which is listed in their descriptions.  - üóù [Authorization server (staging)](https://idm.staging.floriday.io/oauth2/ausmw6b47z1BnlHkw0h7/.well-known/oauth-authorization-server) - üóù [Authorization server (live)](https://idm.floriday.io/oauth2/aus3testdcf2vyfs70i7/.well-known/oauth-authorization-server) - üìö [Documentation](https://developer.floriday.io/docs/welcome) - ‚ñ∂ [Coding screencast: getting started (NL)](https://www.youtube.com/watch?v=fdqzP7_Y_s8)  ---  _The current state of this version 2024v1 is **Main**._ * This version will be deprecated after October 2024. * This version will be removed after April 2025.  ---  üîó 2023v2: [Customers API](https://api.staging.floriday.io/customers-api-2023v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2023v2/swagger/index.html) üîó 2024v1: [Customers API](https://api.staging.floriday.io/customers-api-2024v1/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v1/swagger/index.html) üîó 2024v2: [Customers API](https://api.staging.floriday.io/customers-api-2024v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v2/swagger/index.html)   # noqa: E501

    OpenAPI spec version: 2024v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SupplyRequestLine(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'supply_request_line_id': 'str',
        'supplier_organization_id': 'str',
        'trade_item_id': 'str',
        'trade_item_request_id': 'str',
        'packing_configuration_request_id': 'str',
        'price': 'Price',
        'status': 'RequestStatus',
        'packing_configuration': 'RequestPackingConfiguration',
        'accepted_at_date_time': 'datetime',
        'creation_date_time': 'datetime',
        'last_modified_date_time': 'datetime',
        'is_locked_by_customer': 'bool',
        'supply_line_id': 'str',
        'rejection_reason': 'str',
        'is_deleted': 'bool'
    }

    attribute_map = {
        'supply_request_line_id': 'supplyRequestLineId',
        'supplier_organization_id': 'supplierOrganizationId',
        'trade_item_id': 'tradeItemId',
        'trade_item_request_id': 'tradeItemRequestId',
        'packing_configuration_request_id': 'packingConfigurationRequestId',
        'price': 'price',
        'status': 'status',
        'packing_configuration': 'packingConfiguration',
        'accepted_at_date_time': 'acceptedAtDateTime',
        'creation_date_time': 'creationDateTime',
        'last_modified_date_time': 'lastModifiedDateTime',
        'is_locked_by_customer': 'isLockedByCustomer',
        'supply_line_id': 'supplyLineId',
        'rejection_reason': 'rejectionReason',
        'is_deleted': 'isDeleted'
    }

    def __init__(self, supply_request_line_id=None, supplier_organization_id=None, trade_item_id=None, trade_item_request_id=None, packing_configuration_request_id=None, price=None, status=None, packing_configuration=None, accepted_at_date_time=None, creation_date_time=None, last_modified_date_time=None, is_locked_by_customer=None, supply_line_id=None, rejection_reason=None, is_deleted=None):  # noqa: E501
        """SupplyRequestLine - a model defined in Swagger"""  # noqa: E501
        self._supply_request_line_id = None
        self._supplier_organization_id = None
        self._trade_item_id = None
        self._trade_item_request_id = None
        self._packing_configuration_request_id = None
        self._price = None
        self._status = None
        self._packing_configuration = None
        self._accepted_at_date_time = None
        self._creation_date_time = None
        self._last_modified_date_time = None
        self._is_locked_by_customer = None
        self._supply_line_id = None
        self._rejection_reason = None
        self._is_deleted = None
        self.discriminator = None
        self.supply_request_line_id = supply_request_line_id
        self.supplier_organization_id = supplier_organization_id
        if trade_item_id is not None:
            self.trade_item_id = trade_item_id
        if trade_item_request_id is not None:
            self.trade_item_request_id = trade_item_request_id
        if packing_configuration_request_id is not None:
            self.packing_configuration_request_id = packing_configuration_request_id
        self.price = price
        self.status = status
        if packing_configuration is not None:
            self.packing_configuration = packing_configuration
        if accepted_at_date_time is not None:
            self.accepted_at_date_time = accepted_at_date_time
        self.creation_date_time = creation_date_time
        self.last_modified_date_time = last_modified_date_time
        self.is_locked_by_customer = is_locked_by_customer
        if supply_line_id is not None:
            self.supply_line_id = supply_line_id
        if rejection_reason is not None:
            self.rejection_reason = rejection_reason
        self.is_deleted = is_deleted

    @property
    def supply_request_line_id(self):
        """Gets the supply_request_line_id of this SupplyRequestLine.  # noqa: E501


        :return: The supply_request_line_id of this SupplyRequestLine.  # noqa: E501
        :rtype: str
        """
        return self._supply_request_line_id

    @supply_request_line_id.setter
    def supply_request_line_id(self, supply_request_line_id):
        """Sets the supply_request_line_id of this SupplyRequestLine.


        :param supply_request_line_id: The supply_request_line_id of this SupplyRequestLine.  # noqa: E501
        :type: str
        """
        if supply_request_line_id is None:
            raise ValueError("Invalid value for `supply_request_line_id`, must not be `None`")  # noqa: E501

        self._supply_request_line_id = supply_request_line_id

    @property
    def supplier_organization_id(self):
        """Gets the supplier_organization_id of this SupplyRequestLine.  # noqa: E501


        :return: The supplier_organization_id of this SupplyRequestLine.  # noqa: E501
        :rtype: str
        """
        return self._supplier_organization_id

    @supplier_organization_id.setter
    def supplier_organization_id(self, supplier_organization_id):
        """Sets the supplier_organization_id of this SupplyRequestLine.


        :param supplier_organization_id: The supplier_organization_id of this SupplyRequestLine.  # noqa: E501
        :type: str
        """
        if supplier_organization_id is None:
            raise ValueError("Invalid value for `supplier_organization_id`, must not be `None`")  # noqa: E501

        self._supplier_organization_id = supplier_organization_id

    @property
    def trade_item_id(self):
        """Gets the trade_item_id of this SupplyRequestLine.  # noqa: E501


        :return: The trade_item_id of this SupplyRequestLine.  # noqa: E501
        :rtype: str
        """
        return self._trade_item_id

    @trade_item_id.setter
    def trade_item_id(self, trade_item_id):
        """Sets the trade_item_id of this SupplyRequestLine.


        :param trade_item_id: The trade_item_id of this SupplyRequestLine.  # noqa: E501
        :type: str
        """

        self._trade_item_id = trade_item_id

    @property
    def trade_item_request_id(self):
        """Gets the trade_item_request_id of this SupplyRequestLine.  # noqa: E501


        :return: The trade_item_request_id of this SupplyRequestLine.  # noqa: E501
        :rtype: str
        """
        return self._trade_item_request_id

    @trade_item_request_id.setter
    def trade_item_request_id(self, trade_item_request_id):
        """Sets the trade_item_request_id of this SupplyRequestLine.


        :param trade_item_request_id: The trade_item_request_id of this SupplyRequestLine.  # noqa: E501
        :type: str
        """

        self._trade_item_request_id = trade_item_request_id

    @property
    def packing_configuration_request_id(self):
        """Gets the packing_configuration_request_id of this SupplyRequestLine.  # noqa: E501


        :return: The packing_configuration_request_id of this SupplyRequestLine.  # noqa: E501
        :rtype: str
        """
        return self._packing_configuration_request_id

    @packing_configuration_request_id.setter
    def packing_configuration_request_id(self, packing_configuration_request_id):
        """Sets the packing_configuration_request_id of this SupplyRequestLine.


        :param packing_configuration_request_id: The packing_configuration_request_id of this SupplyRequestLine.  # noqa: E501
        :type: str
        """

        self._packing_configuration_request_id = packing_configuration_request_id

    @property
    def price(self):
        """Gets the price of this SupplyRequestLine.  # noqa: E501


        :return: The price of this SupplyRequestLine.  # noqa: E501
        :rtype: Price
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this SupplyRequestLine.


        :param price: The price of this SupplyRequestLine.  # noqa: E501
        :type: Price
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def status(self):
        """Gets the status of this SupplyRequestLine.  # noqa: E501


        :return: The status of this SupplyRequestLine.  # noqa: E501
        :rtype: RequestStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SupplyRequestLine.


        :param status: The status of this SupplyRequestLine.  # noqa: E501
        :type: RequestStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def packing_configuration(self):
        """Gets the packing_configuration of this SupplyRequestLine.  # noqa: E501


        :return: The packing_configuration of this SupplyRequestLine.  # noqa: E501
        :rtype: RequestPackingConfiguration
        """
        return self._packing_configuration

    @packing_configuration.setter
    def packing_configuration(self, packing_configuration):
        """Sets the packing_configuration of this SupplyRequestLine.


        :param packing_configuration: The packing_configuration of this SupplyRequestLine.  # noqa: E501
        :type: RequestPackingConfiguration
        """

        self._packing_configuration = packing_configuration

    @property
    def accepted_at_date_time(self):
        """Gets the accepted_at_date_time of this SupplyRequestLine.  # noqa: E501


        :return: The accepted_at_date_time of this SupplyRequestLine.  # noqa: E501
        :rtype: datetime
        """
        return self._accepted_at_date_time

    @accepted_at_date_time.setter
    def accepted_at_date_time(self, accepted_at_date_time):
        """Sets the accepted_at_date_time of this SupplyRequestLine.


        :param accepted_at_date_time: The accepted_at_date_time of this SupplyRequestLine.  # noqa: E501
        :type: datetime
        """

        self._accepted_at_date_time = accepted_at_date_time

    @property
    def creation_date_time(self):
        """Gets the creation_date_time of this SupplyRequestLine.  # noqa: E501


        :return: The creation_date_time of this SupplyRequestLine.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date_time

    @creation_date_time.setter
    def creation_date_time(self, creation_date_time):
        """Sets the creation_date_time of this SupplyRequestLine.


        :param creation_date_time: The creation_date_time of this SupplyRequestLine.  # noqa: E501
        :type: datetime
        """
        if creation_date_time is None:
            raise ValueError("Invalid value for `creation_date_time`, must not be `None`")  # noqa: E501

        self._creation_date_time = creation_date_time

    @property
    def last_modified_date_time(self):
        """Gets the last_modified_date_time of this SupplyRequestLine.  # noqa: E501


        :return: The last_modified_date_time of this SupplyRequestLine.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_date_time

    @last_modified_date_time.setter
    def last_modified_date_time(self, last_modified_date_time):
        """Sets the last_modified_date_time of this SupplyRequestLine.


        :param last_modified_date_time: The last_modified_date_time of this SupplyRequestLine.  # noqa: E501
        :type: datetime
        """
        if last_modified_date_time is None:
            raise ValueError("Invalid value for `last_modified_date_time`, must not be `None`")  # noqa: E501

        self._last_modified_date_time = last_modified_date_time

    @property
    def is_locked_by_customer(self):
        """Gets the is_locked_by_customer of this SupplyRequestLine.  # noqa: E501


        :return: The is_locked_by_customer of this SupplyRequestLine.  # noqa: E501
        :rtype: bool
        """
        return self._is_locked_by_customer

    @is_locked_by_customer.setter
    def is_locked_by_customer(self, is_locked_by_customer):
        """Sets the is_locked_by_customer of this SupplyRequestLine.


        :param is_locked_by_customer: The is_locked_by_customer of this SupplyRequestLine.  # noqa: E501
        :type: bool
        """
        if is_locked_by_customer is None:
            raise ValueError("Invalid value for `is_locked_by_customer`, must not be `None`")  # noqa: E501

        self._is_locked_by_customer = is_locked_by_customer

    @property
    def supply_line_id(self):
        """Gets the supply_line_id of this SupplyRequestLine.  # noqa: E501


        :return: The supply_line_id of this SupplyRequestLine.  # noqa: E501
        :rtype: str
        """
        return self._supply_line_id

    @supply_line_id.setter
    def supply_line_id(self, supply_line_id):
        """Sets the supply_line_id of this SupplyRequestLine.


        :param supply_line_id: The supply_line_id of this SupplyRequestLine.  # noqa: E501
        :type: str
        """

        self._supply_line_id = supply_line_id

    @property
    def rejection_reason(self):
        """Gets the rejection_reason of this SupplyRequestLine.  # noqa: E501


        :return: The rejection_reason of this SupplyRequestLine.  # noqa: E501
        :rtype: str
        """
        return self._rejection_reason

    @rejection_reason.setter
    def rejection_reason(self, rejection_reason):
        """Sets the rejection_reason of this SupplyRequestLine.


        :param rejection_reason: The rejection_reason of this SupplyRequestLine.  # noqa: E501
        :type: str
        """

        self._rejection_reason = rejection_reason

    @property
    def is_deleted(self):
        """Gets the is_deleted of this SupplyRequestLine.  # noqa: E501


        :return: The is_deleted of this SupplyRequestLine.  # noqa: E501
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this SupplyRequestLine.


        :param is_deleted: The is_deleted of this SupplyRequestLine.  # noqa: E501
        :type: bool
        """
        if is_deleted is None:
            raise ValueError("Invalid value for `is_deleted`, must not be `None`")  # noqa: E501

        self._is_deleted = is_deleted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SupplyRequestLine, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupplyRequestLine):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
