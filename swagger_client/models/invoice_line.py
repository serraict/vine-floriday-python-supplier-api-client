# coding: utf-8

"""
    Main - Floriday Suppliers API

    ÔªøEvery endpoint requires at least the `role:app` scope and the header `X-Api-Key` populated with your given API-key. Most endpoints also require an additional scope which is listed in their descriptions.  - üóù [Authorization server (staging)](https://idm.staging.floriday.io/oauth2/ausmw6b47z1BnlHkw0h7/.well-known/oauth-authorization-server) - üóù [Authorization server (live)](https://idm.floriday.io/oauth2/aus3testdcf2vyfs70i7/.well-known/oauth-authorization-server) - üìö [Documentation](https://developer.floriday.io/docs/welcome) - ‚ñ∂ [Coding screencast: getting started (NL)](https://www.youtube.com/watch?v=fdqzP7_Y_s8)  ---  _The current state of this version 2024v1 is **Main**._ * This version will be deprecated after October 2024. * This version will be removed after April 2025.  ---  üîó 2023v2: [Customers API](https://api.staging.floriday.io/customers-api-2023v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2023v2/swagger/index.html) üîó 2024v1: [Customers API](https://api.staging.floriday.io/customers-api-2024v1/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v1/swagger/index.html) üîó 2024v2: [Customers API](https://api.staging.floriday.io/customers-api-2024v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v2/swagger/index.html)   # noqa: E501

    OpenAPI spec version: 2024v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InvoiceLine(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'invoice_line_id': 'str',
        'invoice_id': 'str',
        'sales_order_id': 'str',
        'sales_channel_order_id': 'str',
        'delivery_form_reference': 'str',
        'sub_total_amount': 'float',
        'number_of_pieces': 'int',
        'invoice_date': 'datetime',
        'last_modified': 'datetime',
        'sequence_number': 'int'
    }

    attribute_map = {
        'invoice_line_id': 'invoiceLineId',
        'invoice_id': 'invoiceId',
        'sales_order_id': 'salesOrderId',
        'sales_channel_order_id': 'salesChannelOrderId',
        'delivery_form_reference': 'deliveryFormReference',
        'sub_total_amount': 'subTotalAmount',
        'number_of_pieces': 'numberOfPieces',
        'invoice_date': 'invoiceDate',
        'last_modified': 'lastModified',
        'sequence_number': 'sequenceNumber'
    }

    def __init__(self, invoice_line_id=None, invoice_id=None, sales_order_id=None, sales_channel_order_id=None, delivery_form_reference=None, sub_total_amount=None, number_of_pieces=None, invoice_date=None, last_modified=None, sequence_number=None):  # noqa: E501
        """InvoiceLine - a model defined in Swagger"""  # noqa: E501
        self._invoice_line_id = None
        self._invoice_id = None
        self._sales_order_id = None
        self._sales_channel_order_id = None
        self._delivery_form_reference = None
        self._sub_total_amount = None
        self._number_of_pieces = None
        self._invoice_date = None
        self._last_modified = None
        self._sequence_number = None
        self.discriminator = None
        self.invoice_line_id = invoice_line_id
        if invoice_id is not None:
            self.invoice_id = invoice_id
        self.sales_order_id = sales_order_id
        self.sales_channel_order_id = sales_channel_order_id
        self.delivery_form_reference = delivery_form_reference
        self.sub_total_amount = sub_total_amount
        self.number_of_pieces = number_of_pieces
        if invoice_date is not None:
            self.invoice_date = invoice_date
        if last_modified is not None:
            self.last_modified = last_modified
        self.sequence_number = sequence_number

    @property
    def invoice_line_id(self):
        """Gets the invoice_line_id of this InvoiceLine.  # noqa: E501

        Matches the invoice line id from the RFH invoice.  # noqa: E501

        :return: The invoice_line_id of this InvoiceLine.  # noqa: E501
        :rtype: str
        """
        return self._invoice_line_id

    @invoice_line_id.setter
    def invoice_line_id(self, invoice_line_id):
        """Sets the invoice_line_id of this InvoiceLine.

        Matches the invoice line id from the RFH invoice.  # noqa: E501

        :param invoice_line_id: The invoice_line_id of this InvoiceLine.  # noqa: E501
        :type: str
        """
        if invoice_line_id is None:
            raise ValueError("Invalid value for `invoice_line_id`, must not be `None`")  # noqa: E501

        self._invoice_line_id = invoice_line_id

    @property
    def invoice_id(self):
        """Gets the invoice_id of this InvoiceLine.  # noqa: E501

        Matches the invoice id from the RFH invoice.  # noqa: E501

        :return: The invoice_id of this InvoiceLine.  # noqa: E501
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this InvoiceLine.

        Matches the invoice id from the RFH invoice.  # noqa: E501

        :param invoice_id: The invoice_id of this InvoiceLine.  # noqa: E501
        :type: str
        """

        self._invoice_id = invoice_id

    @property
    def sales_order_id(self):
        """Gets the sales_order_id of this InvoiceLine.  # noqa: E501


        :return: The sales_order_id of this InvoiceLine.  # noqa: E501
        :rtype: str
        """
        return self._sales_order_id

    @sales_order_id.setter
    def sales_order_id(self, sales_order_id):
        """Sets the sales_order_id of this InvoiceLine.


        :param sales_order_id: The sales_order_id of this InvoiceLine.  # noqa: E501
        :type: str
        """
        if sales_order_id is None:
            raise ValueError("Invalid value for `sales_order_id`, must not be `None`")  # noqa: E501

        self._sales_order_id = sales_order_id

    @property
    def sales_channel_order_id(self):
        """Gets the sales_channel_order_id of this InvoiceLine.  # noqa: E501


        :return: The sales_channel_order_id of this InvoiceLine.  # noqa: E501
        :rtype: str
        """
        return self._sales_channel_order_id

    @sales_channel_order_id.setter
    def sales_channel_order_id(self, sales_channel_order_id):
        """Sets the sales_channel_order_id of this InvoiceLine.


        :param sales_channel_order_id: The sales_channel_order_id of this InvoiceLine.  # noqa: E501
        :type: str
        """
        if sales_channel_order_id is None:
            raise ValueError("Invalid value for `sales_channel_order_id`, must not be `None`")  # noqa: E501

        self._sales_channel_order_id = sales_channel_order_id

    @property
    def delivery_form_reference(self):
        """Gets the delivery_form_reference of this InvoiceLine.  # noqa: E501


        :return: The delivery_form_reference of this InvoiceLine.  # noqa: E501
        :rtype: str
        """
        return self._delivery_form_reference

    @delivery_form_reference.setter
    def delivery_form_reference(self, delivery_form_reference):
        """Sets the delivery_form_reference of this InvoiceLine.


        :param delivery_form_reference: The delivery_form_reference of this InvoiceLine.  # noqa: E501
        :type: str
        """
        if delivery_form_reference is None:
            raise ValueError("Invalid value for `delivery_form_reference`, must not be `None`")  # noqa: E501

        self._delivery_form_reference = delivery_form_reference

    @property
    def sub_total_amount(self):
        """Gets the sub_total_amount of this InvoiceLine.  # noqa: E501


        :return: The sub_total_amount of this InvoiceLine.  # noqa: E501
        :rtype: float
        """
        return self._sub_total_amount

    @sub_total_amount.setter
    def sub_total_amount(self, sub_total_amount):
        """Sets the sub_total_amount of this InvoiceLine.


        :param sub_total_amount: The sub_total_amount of this InvoiceLine.  # noqa: E501
        :type: float
        """
        if sub_total_amount is None:
            raise ValueError("Invalid value for `sub_total_amount`, must not be `None`")  # noqa: E501

        self._sub_total_amount = sub_total_amount

    @property
    def number_of_pieces(self):
        """Gets the number_of_pieces of this InvoiceLine.  # noqa: E501


        :return: The number_of_pieces of this InvoiceLine.  # noqa: E501
        :rtype: int
        """
        return self._number_of_pieces

    @number_of_pieces.setter
    def number_of_pieces(self, number_of_pieces):
        """Sets the number_of_pieces of this InvoiceLine.


        :param number_of_pieces: The number_of_pieces of this InvoiceLine.  # noqa: E501
        :type: int
        """
        if number_of_pieces is None:
            raise ValueError("Invalid value for `number_of_pieces`, must not be `None`")  # noqa: E501

        self._number_of_pieces = number_of_pieces

    @property
    def invoice_date(self):
        """Gets the invoice_date of this InvoiceLine.  # noqa: E501


        :return: The invoice_date of this InvoiceLine.  # noqa: E501
        :rtype: datetime
        """
        return self._invoice_date

    @invoice_date.setter
    def invoice_date(self, invoice_date):
        """Sets the invoice_date of this InvoiceLine.


        :param invoice_date: The invoice_date of this InvoiceLine.  # noqa: E501
        :type: datetime
        """

        self._invoice_date = invoice_date

    @property
    def last_modified(self):
        """Gets the last_modified of this InvoiceLine.  # noqa: E501


        :return: The last_modified of this InvoiceLine.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this InvoiceLine.


        :param last_modified: The last_modified of this InvoiceLine.  # noqa: E501
        :type: datetime
        """

        self._last_modified = last_modified

    @property
    def sequence_number(self):
        """Gets the sequence_number of this InvoiceLine.  # noqa: E501


        :return: The sequence_number of this InvoiceLine.  # noqa: E501
        :rtype: int
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this InvoiceLine.


        :param sequence_number: The sequence_number of this InvoiceLine.  # noqa: E501
        :type: int
        """
        if sequence_number is None:
            raise ValueError("Invalid value for `sequence_number`, must not be `None`")  # noqa: E501

        self._sequence_number = sequence_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvoiceLine, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvoiceLine):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
