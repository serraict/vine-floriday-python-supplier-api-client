# coding: utf-8

"""
    Main - Floriday Suppliers API

    ÔªøEvery endpoint requires at least the `role:app` scope and the header `X-Api-Key` populated with your given API-key. Most endpoints also require an additional scope which is listed in their descriptions.  - üóù [Authorization server (staging)](https://idm.staging.floriday.io/oauth2/ausmw6b47z1BnlHkw0h7/.well-known/oauth-authorization-server) - üóù [Authorization server (live)](https://idm.floriday.io/oauth2/aus3testdcf2vyfs70i7/.well-known/oauth-authorization-server) - üìö [Documentation](https://developer.floriday.io/docs/welcome) - ‚ñ∂ [Coding screencast: getting started (NL)](https://www.youtube.com/watch?v=fdqzP7_Y_s8)  ---  _The current state of this version 2024v1 is **Main**._ * This version will be deprecated after October 2024. * This version will be removed after April 2025.  ---  üîó 2023v2: [Customers API](https://api.staging.floriday.io/customers-api-2023v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2023v2/swagger/index.html) üîó 2024v1: [Customers API](https://api.staging.floriday.io/customers-api-2024v1/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v1/swagger/index.html) üîó 2024v2: [Customers API](https://api.staging.floriday.io/customers-api-2024v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v2/swagger/index.html)   # noqa: E501

    OpenAPI spec version: 2024v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BatchMutation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'batch_mutation_id': 'str',
        'batch_id': 'str',
        'delta_number_of_pieces': 'int',
        'reason': 'str',
        'target_batch_id': 'str',
        'added_on': 'datetime',
        'type': 'BatchMutationType',
        'sales_order_id': 'str',
        'sequence_number': 'int'
    }

    attribute_map = {
        'batch_mutation_id': 'batchMutationId',
        'batch_id': 'batchId',
        'delta_number_of_pieces': 'deltaNumberOfPieces',
        'reason': 'reason',
        'target_batch_id': 'targetBatchId',
        'added_on': 'addedOn',
        'type': 'type',
        'sales_order_id': 'salesOrderId',
        'sequence_number': 'sequenceNumber'
    }

    def __init__(self, batch_mutation_id=None, batch_id=None, delta_number_of_pieces=None, reason=None, target_batch_id=None, added_on=None, type=None, sales_order_id=None, sequence_number=None):  # noqa: E501
        """BatchMutation - a model defined in Swagger"""  # noqa: E501
        self._batch_mutation_id = None
        self._batch_id = None
        self._delta_number_of_pieces = None
        self._reason = None
        self._target_batch_id = None
        self._added_on = None
        self._type = None
        self._sales_order_id = None
        self._sequence_number = None
        self.discriminator = None
        self.batch_mutation_id = batch_mutation_id
        self.batch_id = batch_id
        self.delta_number_of_pieces = delta_number_of_pieces
        if reason is not None:
            self.reason = reason
        if target_batch_id is not None:
            self.target_batch_id = target_batch_id
        self.added_on = added_on
        self.type = type
        if sales_order_id is not None:
            self.sales_order_id = sales_order_id
        self.sequence_number = sequence_number

    @property
    def batch_mutation_id(self):
        """Gets the batch_mutation_id of this BatchMutation.  # noqa: E501


        :return: The batch_mutation_id of this BatchMutation.  # noqa: E501
        :rtype: str
        """
        return self._batch_mutation_id

    @batch_mutation_id.setter
    def batch_mutation_id(self, batch_mutation_id):
        """Sets the batch_mutation_id of this BatchMutation.


        :param batch_mutation_id: The batch_mutation_id of this BatchMutation.  # noqa: E501
        :type: str
        """
        if batch_mutation_id is None:
            raise ValueError("Invalid value for `batch_mutation_id`, must not be `None`")  # noqa: E501

        self._batch_mutation_id = batch_mutation_id

    @property
    def batch_id(self):
        """Gets the batch_id of this BatchMutation.  # noqa: E501


        :return: The batch_id of this BatchMutation.  # noqa: E501
        :rtype: str
        """
        return self._batch_id

    @batch_id.setter
    def batch_id(self, batch_id):
        """Sets the batch_id of this BatchMutation.


        :param batch_id: The batch_id of this BatchMutation.  # noqa: E501
        :type: str
        """
        if batch_id is None:
            raise ValueError("Invalid value for `batch_id`, must not be `None`")  # noqa: E501

        self._batch_id = batch_id

    @property
    def delta_number_of_pieces(self):
        """Gets the delta_number_of_pieces of this BatchMutation.  # noqa: E501


        :return: The delta_number_of_pieces of this BatchMutation.  # noqa: E501
        :rtype: int
        """
        return self._delta_number_of_pieces

    @delta_number_of_pieces.setter
    def delta_number_of_pieces(self, delta_number_of_pieces):
        """Sets the delta_number_of_pieces of this BatchMutation.


        :param delta_number_of_pieces: The delta_number_of_pieces of this BatchMutation.  # noqa: E501
        :type: int
        """
        if delta_number_of_pieces is None:
            raise ValueError("Invalid value for `delta_number_of_pieces`, must not be `None`")  # noqa: E501

        self._delta_number_of_pieces = delta_number_of_pieces

    @property
    def reason(self):
        """Gets the reason of this BatchMutation.  # noqa: E501


        :return: The reason of this BatchMutation.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this BatchMutation.


        :param reason: The reason of this BatchMutation.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def target_batch_id(self):
        """Gets the target_batch_id of this BatchMutation.  # noqa: E501


        :return: The target_batch_id of this BatchMutation.  # noqa: E501
        :rtype: str
        """
        return self._target_batch_id

    @target_batch_id.setter
    def target_batch_id(self, target_batch_id):
        """Sets the target_batch_id of this BatchMutation.


        :param target_batch_id: The target_batch_id of this BatchMutation.  # noqa: E501
        :type: str
        """

        self._target_batch_id = target_batch_id

    @property
    def added_on(self):
        """Gets the added_on of this BatchMutation.  # noqa: E501


        :return: The added_on of this BatchMutation.  # noqa: E501
        :rtype: datetime
        """
        return self._added_on

    @added_on.setter
    def added_on(self, added_on):
        """Sets the added_on of this BatchMutation.


        :param added_on: The added_on of this BatchMutation.  # noqa: E501
        :type: datetime
        """
        if added_on is None:
            raise ValueError("Invalid value for `added_on`, must not be `None`")  # noqa: E501

        self._added_on = added_on

    @property
    def type(self):
        """Gets the type of this BatchMutation.  # noqa: E501


        :return: The type of this BatchMutation.  # noqa: E501
        :rtype: BatchMutationType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BatchMutation.


        :param type: The type of this BatchMutation.  # noqa: E501
        :type: BatchMutationType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def sales_order_id(self):
        """Gets the sales_order_id of this BatchMutation.  # noqa: E501


        :return: The sales_order_id of this BatchMutation.  # noqa: E501
        :rtype: str
        """
        return self._sales_order_id

    @sales_order_id.setter
    def sales_order_id(self, sales_order_id):
        """Sets the sales_order_id of this BatchMutation.


        :param sales_order_id: The sales_order_id of this BatchMutation.  # noqa: E501
        :type: str
        """

        self._sales_order_id = sales_order_id

    @property
    def sequence_number(self):
        """Gets the sequence_number of this BatchMutation.  # noqa: E501


        :return: The sequence_number of this BatchMutation.  # noqa: E501
        :rtype: int
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this BatchMutation.


        :param sequence_number: The sequence_number of this BatchMutation.  # noqa: E501
        :type: int
        """
        if sequence_number is None:
            raise ValueError("Invalid value for `sequence_number`, must not be `None`")  # noqa: E501

        self._sequence_number = sequence_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BatchMutation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BatchMutation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
