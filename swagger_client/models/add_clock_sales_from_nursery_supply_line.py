# coding: utf-8

"""
    Main - Floriday Suppliers API

    ÔªøEvery endpoint requires at least the `role:app` scope and the header `X-Api-Key` populated with your given API-key. Most endpoints also require an additional scope which is listed in their descriptions.  - üóù [Authorization server (staging)](https://idm.staging.floriday.io/oauth2/ausmw6b47z1BnlHkw0h7/.well-known/oauth-authorization-server) - üóù [Authorization server (live)](https://idm.floriday.io/oauth2/aus3testdcf2vyfs70i7/.well-known/oauth-authorization-server) - üìö [Documentation](https://developer.floriday.io/docs/welcome) - ‚ñ∂ [Coding screencast: getting started (NL)](https://www.youtube.com/watch?v=fdqzP7_Y_s8)  ---  _The current state of this version 2024v1 is **Main**._ * This version will be deprecated after October 2024. * This version will be removed after April 2025.  ---  üîó 2023v2: [Customers API](https://api.staging.floriday.io/customers-api-2023v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2023v2/swagger/index.html) üîó 2024v1: [Customers API](https://api.staging.floriday.io/customers-api-2024v1/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v1/swagger/index.html) üîó 2024v2: [Customers API](https://api.staging.floriday.io/customers-api-2024v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v2/swagger/index.html)   # noqa: E501

    OpenAPI spec version: 2024v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AddClockSalesFromNurserySupplyLine(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'clock_sales_from_nursery_supply_line_id': 'str',
        'trade_item_id': 'str',
        'image_url': 'str',
        'auction_date': 'datetime',
        'despatch_warehouse_id': 'str',
        'batch_id': 'str',
        'batch_reference': 'str',
        'remarks': 'str',
        'minimum_price_per_piece': 'float',
        'currency': 'Currency',
        'number_of_pieces': 'int',
        'load_carrier_type': 'LoadCarrierType',
        'vbn_package_code': 'int',
        'layers_per_load_carrier': 'int',
        'packages_per_layer': 'int',
        'pieces_per_package': 'int'
    }

    attribute_map = {
        'clock_sales_from_nursery_supply_line_id': 'clockSalesFromNurserySupplyLineId',
        'trade_item_id': 'tradeItemId',
        'image_url': 'imageUrl',
        'auction_date': 'auctionDate',
        'despatch_warehouse_id': 'despatchWarehouseId',
        'batch_id': 'batchId',
        'batch_reference': 'batchReference',
        'remarks': 'remarks',
        'minimum_price_per_piece': 'minimumPricePerPiece',
        'currency': 'currency',
        'number_of_pieces': 'numberOfPieces',
        'load_carrier_type': 'loadCarrierType',
        'vbn_package_code': 'vbnPackageCode',
        'layers_per_load_carrier': 'layersPerLoadCarrier',
        'packages_per_layer': 'packagesPerLayer',
        'pieces_per_package': 'piecesPerPackage'
    }

    def __init__(self, clock_sales_from_nursery_supply_line_id=None, trade_item_id=None, image_url=None, auction_date=None, despatch_warehouse_id=None, batch_id=None, batch_reference=None, remarks=None, minimum_price_per_piece=None, currency=None, number_of_pieces=None, load_carrier_type=None, vbn_package_code=None, layers_per_load_carrier=None, packages_per_layer=None, pieces_per_package=None):  # noqa: E501
        """AddClockSalesFromNurserySupplyLine - a model defined in Swagger"""  # noqa: E501
        self._clock_sales_from_nursery_supply_line_id = None
        self._trade_item_id = None
        self._image_url = None
        self._auction_date = None
        self._despatch_warehouse_id = None
        self._batch_id = None
        self._batch_reference = None
        self._remarks = None
        self._minimum_price_per_piece = None
        self._currency = None
        self._number_of_pieces = None
        self._load_carrier_type = None
        self._vbn_package_code = None
        self._layers_per_load_carrier = None
        self._packages_per_layer = None
        self._pieces_per_package = None
        self.discriminator = None
        self.clock_sales_from_nursery_supply_line_id = clock_sales_from_nursery_supply_line_id
        self.trade_item_id = trade_item_id
        self.image_url = image_url
        self.auction_date = auction_date
        self.despatch_warehouse_id = despatch_warehouse_id
        self.batch_id = batch_id
        self.batch_reference = batch_reference
        if remarks is not None:
            self.remarks = remarks
        self.minimum_price_per_piece = minimum_price_per_piece
        self.currency = currency
        self.number_of_pieces = number_of_pieces
        self.load_carrier_type = load_carrier_type
        self.vbn_package_code = vbn_package_code
        self.layers_per_load_carrier = layers_per_load_carrier
        self.packages_per_layer = packages_per_layer
        self.pieces_per_package = pieces_per_package

    @property
    def clock_sales_from_nursery_supply_line_id(self):
        """Gets the clock_sales_from_nursery_supply_line_id of this AddClockSalesFromNurserySupplyLine.  # noqa: E501


        :return: The clock_sales_from_nursery_supply_line_id of this AddClockSalesFromNurserySupplyLine.  # noqa: E501
        :rtype: str
        """
        return self._clock_sales_from_nursery_supply_line_id

    @clock_sales_from_nursery_supply_line_id.setter
    def clock_sales_from_nursery_supply_line_id(self, clock_sales_from_nursery_supply_line_id):
        """Sets the clock_sales_from_nursery_supply_line_id of this AddClockSalesFromNurserySupplyLine.


        :param clock_sales_from_nursery_supply_line_id: The clock_sales_from_nursery_supply_line_id of this AddClockSalesFromNurserySupplyLine.  # noqa: E501
        :type: str
        """
        if clock_sales_from_nursery_supply_line_id is None:
            raise ValueError("Invalid value for `clock_sales_from_nursery_supply_line_id`, must not be `None`")  # noqa: E501

        self._clock_sales_from_nursery_supply_line_id = clock_sales_from_nursery_supply_line_id

    @property
    def trade_item_id(self):
        """Gets the trade_item_id of this AddClockSalesFromNurserySupplyLine.  # noqa: E501


        :return: The trade_item_id of this AddClockSalesFromNurserySupplyLine.  # noqa: E501
        :rtype: str
        """
        return self._trade_item_id

    @trade_item_id.setter
    def trade_item_id(self, trade_item_id):
        """Sets the trade_item_id of this AddClockSalesFromNurserySupplyLine.


        :param trade_item_id: The trade_item_id of this AddClockSalesFromNurserySupplyLine.  # noqa: E501
        :type: str
        """
        if trade_item_id is None:
            raise ValueError("Invalid value for `trade_item_id`, must not be `None`")  # noqa: E501

        self._trade_item_id = trade_item_id

    @property
    def image_url(self):
        """Gets the image_url of this AddClockSalesFromNurserySupplyLine.  # noqa: E501

        Image URLs posted as Floriday media must conform with the following format https://image.floriday.io/.  # noqa: E501

        :return: The image_url of this AddClockSalesFromNurserySupplyLine.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this AddClockSalesFromNurserySupplyLine.

        Image URLs posted as Floriday media must conform with the following format https://image.floriday.io/.  # noqa: E501

        :param image_url: The image_url of this AddClockSalesFromNurserySupplyLine.  # noqa: E501
        :type: str
        """
        if image_url is None:
            raise ValueError("Invalid value for `image_url`, must not be `None`")  # noqa: E501

        self._image_url = image_url

    @property
    def auction_date(self):
        """Gets the auction_date of this AddClockSalesFromNurserySupplyLine.  # noqa: E501


        :return: The auction_date of this AddClockSalesFromNurserySupplyLine.  # noqa: E501
        :rtype: datetime
        """
        return self._auction_date

    @auction_date.setter
    def auction_date(self, auction_date):
        """Sets the auction_date of this AddClockSalesFromNurserySupplyLine.


        :param auction_date: The auction_date of this AddClockSalesFromNurserySupplyLine.  # noqa: E501
        :type: datetime
        """
        if auction_date is None:
            raise ValueError("Invalid value for `auction_date`, must not be `None`")  # noqa: E501

        self._auction_date = auction_date

    @property
    def despatch_warehouse_id(self):
        """Gets the despatch_warehouse_id of this AddClockSalesFromNurserySupplyLine.  # noqa: E501


        :return: The despatch_warehouse_id of this AddClockSalesFromNurserySupplyLine.  # noqa: E501
        :rtype: str
        """
        return self._despatch_warehouse_id

    @despatch_warehouse_id.setter
    def despatch_warehouse_id(self, despatch_warehouse_id):
        """Sets the despatch_warehouse_id of this AddClockSalesFromNurserySupplyLine.


        :param despatch_warehouse_id: The despatch_warehouse_id of this AddClockSalesFromNurserySupplyLine.  # noqa: E501
        :type: str
        """
        if despatch_warehouse_id is None:
            raise ValueError("Invalid value for `despatch_warehouse_id`, must not be `None`")  # noqa: E501

        self._despatch_warehouse_id = despatch_warehouse_id

    @property
    def batch_id(self):
        """Gets the batch_id of this AddClockSalesFromNurserySupplyLine.  # noqa: E501


        :return: The batch_id of this AddClockSalesFromNurserySupplyLine.  # noqa: E501
        :rtype: str
        """
        return self._batch_id

    @batch_id.setter
    def batch_id(self, batch_id):
        """Sets the batch_id of this AddClockSalesFromNurserySupplyLine.


        :param batch_id: The batch_id of this AddClockSalesFromNurserySupplyLine.  # noqa: E501
        :type: str
        """
        if batch_id is None:
            raise ValueError("Invalid value for `batch_id`, must not be `None`")  # noqa: E501

        self._batch_id = batch_id

    @property
    def batch_reference(self):
        """Gets the batch_reference of this AddClockSalesFromNurserySupplyLine.  # noqa: E501


        :return: The batch_reference of this AddClockSalesFromNurserySupplyLine.  # noqa: E501
        :rtype: str
        """
        return self._batch_reference

    @batch_reference.setter
    def batch_reference(self, batch_reference):
        """Sets the batch_reference of this AddClockSalesFromNurserySupplyLine.


        :param batch_reference: The batch_reference of this AddClockSalesFromNurserySupplyLine.  # noqa: E501
        :type: str
        """
        if batch_reference is None:
            raise ValueError("Invalid value for `batch_reference`, must not be `None`")  # noqa: E501

        self._batch_reference = batch_reference

    @property
    def remarks(self):
        """Gets the remarks of this AddClockSalesFromNurserySupplyLine.  # noqa: E501


        :return: The remarks of this AddClockSalesFromNurserySupplyLine.  # noqa: E501
        :rtype: str
        """
        return self._remarks

    @remarks.setter
    def remarks(self, remarks):
        """Sets the remarks of this AddClockSalesFromNurserySupplyLine.


        :param remarks: The remarks of this AddClockSalesFromNurserySupplyLine.  # noqa: E501
        :type: str
        """

        self._remarks = remarks

    @property
    def minimum_price_per_piece(self):
        """Gets the minimum_price_per_piece of this AddClockSalesFromNurserySupplyLine.  # noqa: E501


        :return: The minimum_price_per_piece of this AddClockSalesFromNurserySupplyLine.  # noqa: E501
        :rtype: float
        """
        return self._minimum_price_per_piece

    @minimum_price_per_piece.setter
    def minimum_price_per_piece(self, minimum_price_per_piece):
        """Sets the minimum_price_per_piece of this AddClockSalesFromNurserySupplyLine.


        :param minimum_price_per_piece: The minimum_price_per_piece of this AddClockSalesFromNurserySupplyLine.  # noqa: E501
        :type: float
        """
        if minimum_price_per_piece is None:
            raise ValueError("Invalid value for `minimum_price_per_piece`, must not be `None`")  # noqa: E501

        self._minimum_price_per_piece = minimum_price_per_piece

    @property
    def currency(self):
        """Gets the currency of this AddClockSalesFromNurserySupplyLine.  # noqa: E501


        :return: The currency of this AddClockSalesFromNurserySupplyLine.  # noqa: E501
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this AddClockSalesFromNurserySupplyLine.


        :param currency: The currency of this AddClockSalesFromNurserySupplyLine.  # noqa: E501
        :type: Currency
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def number_of_pieces(self):
        """Gets the number_of_pieces of this AddClockSalesFromNurserySupplyLine.  # noqa: E501


        :return: The number_of_pieces of this AddClockSalesFromNurserySupplyLine.  # noqa: E501
        :rtype: int
        """
        return self._number_of_pieces

    @number_of_pieces.setter
    def number_of_pieces(self, number_of_pieces):
        """Sets the number_of_pieces of this AddClockSalesFromNurserySupplyLine.


        :param number_of_pieces: The number_of_pieces of this AddClockSalesFromNurserySupplyLine.  # noqa: E501
        :type: int
        """
        if number_of_pieces is None:
            raise ValueError("Invalid value for `number_of_pieces`, must not be `None`")  # noqa: E501

        self._number_of_pieces = number_of_pieces

    @property
    def load_carrier_type(self):
        """Gets the load_carrier_type of this AddClockSalesFromNurserySupplyLine.  # noqa: E501


        :return: The load_carrier_type of this AddClockSalesFromNurserySupplyLine.  # noqa: E501
        :rtype: LoadCarrierType
        """
        return self._load_carrier_type

    @load_carrier_type.setter
    def load_carrier_type(self, load_carrier_type):
        """Sets the load_carrier_type of this AddClockSalesFromNurserySupplyLine.


        :param load_carrier_type: The load_carrier_type of this AddClockSalesFromNurserySupplyLine.  # noqa: E501
        :type: LoadCarrierType
        """
        if load_carrier_type is None:
            raise ValueError("Invalid value for `load_carrier_type`, must not be `None`")  # noqa: E501

        self._load_carrier_type = load_carrier_type

    @property
    def vbn_package_code(self):
        """Gets the vbn_package_code of this AddClockSalesFromNurserySupplyLine.  # noqa: E501


        :return: The vbn_package_code of this AddClockSalesFromNurserySupplyLine.  # noqa: E501
        :rtype: int
        """
        return self._vbn_package_code

    @vbn_package_code.setter
    def vbn_package_code(self, vbn_package_code):
        """Sets the vbn_package_code of this AddClockSalesFromNurserySupplyLine.


        :param vbn_package_code: The vbn_package_code of this AddClockSalesFromNurserySupplyLine.  # noqa: E501
        :type: int
        """
        if vbn_package_code is None:
            raise ValueError("Invalid value for `vbn_package_code`, must not be `None`")  # noqa: E501

        self._vbn_package_code = vbn_package_code

    @property
    def layers_per_load_carrier(self):
        """Gets the layers_per_load_carrier of this AddClockSalesFromNurserySupplyLine.  # noqa: E501


        :return: The layers_per_load_carrier of this AddClockSalesFromNurserySupplyLine.  # noqa: E501
        :rtype: int
        """
        return self._layers_per_load_carrier

    @layers_per_load_carrier.setter
    def layers_per_load_carrier(self, layers_per_load_carrier):
        """Sets the layers_per_load_carrier of this AddClockSalesFromNurserySupplyLine.


        :param layers_per_load_carrier: The layers_per_load_carrier of this AddClockSalesFromNurserySupplyLine.  # noqa: E501
        :type: int
        """
        if layers_per_load_carrier is None:
            raise ValueError("Invalid value for `layers_per_load_carrier`, must not be `None`")  # noqa: E501

        self._layers_per_load_carrier = layers_per_load_carrier

    @property
    def packages_per_layer(self):
        """Gets the packages_per_layer of this AddClockSalesFromNurserySupplyLine.  # noqa: E501


        :return: The packages_per_layer of this AddClockSalesFromNurserySupplyLine.  # noqa: E501
        :rtype: int
        """
        return self._packages_per_layer

    @packages_per_layer.setter
    def packages_per_layer(self, packages_per_layer):
        """Sets the packages_per_layer of this AddClockSalesFromNurserySupplyLine.


        :param packages_per_layer: The packages_per_layer of this AddClockSalesFromNurserySupplyLine.  # noqa: E501
        :type: int
        """
        if packages_per_layer is None:
            raise ValueError("Invalid value for `packages_per_layer`, must not be `None`")  # noqa: E501

        self._packages_per_layer = packages_per_layer

    @property
    def pieces_per_package(self):
        """Gets the pieces_per_package of this AddClockSalesFromNurserySupplyLine.  # noqa: E501


        :return: The pieces_per_package of this AddClockSalesFromNurserySupplyLine.  # noqa: E501
        :rtype: int
        """
        return self._pieces_per_package

    @pieces_per_package.setter
    def pieces_per_package(self, pieces_per_package):
        """Sets the pieces_per_package of this AddClockSalesFromNurserySupplyLine.


        :param pieces_per_package: The pieces_per_package of this AddClockSalesFromNurserySupplyLine.  # noqa: E501
        :type: int
        """
        if pieces_per_package is None:
            raise ValueError("Invalid value for `pieces_per_package`, must not be `None`")  # noqa: E501

        self._pieces_per_package = pieces_per_package

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddClockSalesFromNurserySupplyLine, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddClockSalesFromNurserySupplyLine):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
