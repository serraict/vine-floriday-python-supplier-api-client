# coding: utf-8

"""
    Main - Floriday Suppliers API

    ÔªøEvery endpoint requires at least the `role:app` scope and the header `X-Api-Key` populated with your given API-key. Most endpoints also require an additional scope which is listed in their descriptions.  - üóù [Authorization server (staging)](https://idm.staging.floriday.io/oauth2/ausmw6b47z1BnlHkw0h7/.well-known/oauth-authorization-server) - üóù [Authorization server (live)](https://idm.floriday.io/oauth2/aus3testdcf2vyfs70i7/.well-known/oauth-authorization-server) - üìö [Documentation](https://developer.floriday.io/docs/welcome) - ‚ñ∂ [Coding screencast: getting started (NL)](https://www.youtube.com/watch?v=fdqzP7_Y_s8)  ---  _The current state of this version 2024v1 is **Main**._ * This version will be deprecated after October 2024. * This version will be removed after April 2025.  ---  üîó 2023v2: [Customers API](https://api.staging.floriday.io/customers-api-2023v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2023v2/swagger/index.html) üîó 2024v1: [Customers API](https://api.staging.floriday.io/customers-api-2024v1/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v1/swagger/index.html) üîó 2024v2: [Customers API](https://api.staging.floriday.io/customers-api-2024v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v2/swagger/index.html)   # noqa: E501

    OpenAPI spec version: 2024v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustomerSticker(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sticker_id': 'str',
        'customer_organization_id': 'str',
        'supplier_organization_id': 'str',
        'delivery_date_time': 'datetime',
        'sticker_type': 'StickerType',
        'sales_order_id': 'str',
        'despatch_warehouse_id': 'str',
        'additional_information': 'str',
        'sticker_size': 'Size',
        'is_handled': 'bool',
        'last_requested_on': 'datetime',
        'is_deleted': 'bool',
        'sequence_number': 'int',
        'sticker_file_information': 'CustomerStickerFileInformation',
        'compositions': 'list[CustomerStickerComposition]'
    }

    attribute_map = {
        'sticker_id': 'stickerId',
        'customer_organization_id': 'customerOrganizationId',
        'supplier_organization_id': 'supplierOrganizationId',
        'delivery_date_time': 'deliveryDateTime',
        'sticker_type': 'stickerType',
        'sales_order_id': 'salesOrderId',
        'despatch_warehouse_id': 'despatchWarehouseId',
        'additional_information': 'additionalInformation',
        'sticker_size': 'stickerSize',
        'is_handled': 'isHandled',
        'last_requested_on': 'lastRequestedOn',
        'is_deleted': 'isDeleted',
        'sequence_number': 'sequenceNumber',
        'sticker_file_information': 'stickerFileInformation',
        'compositions': 'compositions'
    }

    def __init__(self, sticker_id=None, customer_organization_id=None, supplier_organization_id=None, delivery_date_time=None, sticker_type=None, sales_order_id=None, despatch_warehouse_id=None, additional_information=None, sticker_size=None, is_handled=None, last_requested_on=None, is_deleted=None, sequence_number=None, sticker_file_information=None, compositions=None):  # noqa: E501
        """CustomerSticker - a model defined in Swagger"""  # noqa: E501
        self._sticker_id = None
        self._customer_organization_id = None
        self._supplier_organization_id = None
        self._delivery_date_time = None
        self._sticker_type = None
        self._sales_order_id = None
        self._despatch_warehouse_id = None
        self._additional_information = None
        self._sticker_size = None
        self._is_handled = None
        self._last_requested_on = None
        self._is_deleted = None
        self._sequence_number = None
        self._sticker_file_information = None
        self._compositions = None
        self.discriminator = None
        self.sticker_id = sticker_id
        self.customer_organization_id = customer_organization_id
        self.supplier_organization_id = supplier_organization_id
        self.delivery_date_time = delivery_date_time
        self.sticker_type = sticker_type
        if sales_order_id is not None:
            self.sales_order_id = sales_order_id
        self.despatch_warehouse_id = despatch_warehouse_id
        if additional_information is not None:
            self.additional_information = additional_information
        if sticker_size is not None:
            self.sticker_size = sticker_size
        self.is_handled = is_handled
        if last_requested_on is not None:
            self.last_requested_on = last_requested_on
        self.is_deleted = is_deleted
        self.sequence_number = sequence_number
        if sticker_file_information is not None:
            self.sticker_file_information = sticker_file_information
        self.compositions = compositions

    @property
    def sticker_id(self):
        """Gets the sticker_id of this CustomerSticker.  # noqa: E501


        :return: The sticker_id of this CustomerSticker.  # noqa: E501
        :rtype: str
        """
        return self._sticker_id

    @sticker_id.setter
    def sticker_id(self, sticker_id):
        """Sets the sticker_id of this CustomerSticker.


        :param sticker_id: The sticker_id of this CustomerSticker.  # noqa: E501
        :type: str
        """
        if sticker_id is None:
            raise ValueError("Invalid value for `sticker_id`, must not be `None`")  # noqa: E501

        self._sticker_id = sticker_id

    @property
    def customer_organization_id(self):
        """Gets the customer_organization_id of this CustomerSticker.  # noqa: E501


        :return: The customer_organization_id of this CustomerSticker.  # noqa: E501
        :rtype: str
        """
        return self._customer_organization_id

    @customer_organization_id.setter
    def customer_organization_id(self, customer_organization_id):
        """Sets the customer_organization_id of this CustomerSticker.


        :param customer_organization_id: The customer_organization_id of this CustomerSticker.  # noqa: E501
        :type: str
        """
        if customer_organization_id is None:
            raise ValueError("Invalid value for `customer_organization_id`, must not be `None`")  # noqa: E501

        self._customer_organization_id = customer_organization_id

    @property
    def supplier_organization_id(self):
        """Gets the supplier_organization_id of this CustomerSticker.  # noqa: E501


        :return: The supplier_organization_id of this CustomerSticker.  # noqa: E501
        :rtype: str
        """
        return self._supplier_organization_id

    @supplier_organization_id.setter
    def supplier_organization_id(self, supplier_organization_id):
        """Sets the supplier_organization_id of this CustomerSticker.


        :param supplier_organization_id: The supplier_organization_id of this CustomerSticker.  # noqa: E501
        :type: str
        """
        if supplier_organization_id is None:
            raise ValueError("Invalid value for `supplier_organization_id`, must not be `None`")  # noqa: E501

        self._supplier_organization_id = supplier_organization_id

    @property
    def delivery_date_time(self):
        """Gets the delivery_date_time of this CustomerSticker.  # noqa: E501


        :return: The delivery_date_time of this CustomerSticker.  # noqa: E501
        :rtype: datetime
        """
        return self._delivery_date_time

    @delivery_date_time.setter
    def delivery_date_time(self, delivery_date_time):
        """Sets the delivery_date_time of this CustomerSticker.


        :param delivery_date_time: The delivery_date_time of this CustomerSticker.  # noqa: E501
        :type: datetime
        """
        if delivery_date_time is None:
            raise ValueError("Invalid value for `delivery_date_time`, must not be `None`")  # noqa: E501

        self._delivery_date_time = delivery_date_time

    @property
    def sticker_type(self):
        """Gets the sticker_type of this CustomerSticker.  # noqa: E501


        :return: The sticker_type of this CustomerSticker.  # noqa: E501
        :rtype: StickerType
        """
        return self._sticker_type

    @sticker_type.setter
    def sticker_type(self, sticker_type):
        """Sets the sticker_type of this CustomerSticker.


        :param sticker_type: The sticker_type of this CustomerSticker.  # noqa: E501
        :type: StickerType
        """
        if sticker_type is None:
            raise ValueError("Invalid value for `sticker_type`, must not be `None`")  # noqa: E501

        self._sticker_type = sticker_type

    @property
    def sales_order_id(self):
        """Gets the sales_order_id of this CustomerSticker.  # noqa: E501


        :return: The sales_order_id of this CustomerSticker.  # noqa: E501
        :rtype: str
        """
        return self._sales_order_id

    @sales_order_id.setter
    def sales_order_id(self, sales_order_id):
        """Sets the sales_order_id of this CustomerSticker.


        :param sales_order_id: The sales_order_id of this CustomerSticker.  # noqa: E501
        :type: str
        """

        self._sales_order_id = sales_order_id

    @property
    def despatch_warehouse_id(self):
        """Gets the despatch_warehouse_id of this CustomerSticker.  # noqa: E501


        :return: The despatch_warehouse_id of this CustomerSticker.  # noqa: E501
        :rtype: str
        """
        return self._despatch_warehouse_id

    @despatch_warehouse_id.setter
    def despatch_warehouse_id(self, despatch_warehouse_id):
        """Sets the despatch_warehouse_id of this CustomerSticker.


        :param despatch_warehouse_id: The despatch_warehouse_id of this CustomerSticker.  # noqa: E501
        :type: str
        """
        if despatch_warehouse_id is None:
            raise ValueError("Invalid value for `despatch_warehouse_id`, must not be `None`")  # noqa: E501

        self._despatch_warehouse_id = despatch_warehouse_id

    @property
    def additional_information(self):
        """Gets the additional_information of this CustomerSticker.  # noqa: E501


        :return: The additional_information of this CustomerSticker.  # noqa: E501
        :rtype: str
        """
        return self._additional_information

    @additional_information.setter
    def additional_information(self, additional_information):
        """Sets the additional_information of this CustomerSticker.


        :param additional_information: The additional_information of this CustomerSticker.  # noqa: E501
        :type: str
        """

        self._additional_information = additional_information

    @property
    def sticker_size(self):
        """Gets the sticker_size of this CustomerSticker.  # noqa: E501


        :return: The sticker_size of this CustomerSticker.  # noqa: E501
        :rtype: Size
        """
        return self._sticker_size

    @sticker_size.setter
    def sticker_size(self, sticker_size):
        """Sets the sticker_size of this CustomerSticker.


        :param sticker_size: The sticker_size of this CustomerSticker.  # noqa: E501
        :type: Size
        """

        self._sticker_size = sticker_size

    @property
    def is_handled(self):
        """Gets the is_handled of this CustomerSticker.  # noqa: E501


        :return: The is_handled of this CustomerSticker.  # noqa: E501
        :rtype: bool
        """
        return self._is_handled

    @is_handled.setter
    def is_handled(self, is_handled):
        """Sets the is_handled of this CustomerSticker.


        :param is_handled: The is_handled of this CustomerSticker.  # noqa: E501
        :type: bool
        """
        if is_handled is None:
            raise ValueError("Invalid value for `is_handled`, must not be `None`")  # noqa: E501

        self._is_handled = is_handled

    @property
    def last_requested_on(self):
        """Gets the last_requested_on of this CustomerSticker.  # noqa: E501


        :return: The last_requested_on of this CustomerSticker.  # noqa: E501
        :rtype: datetime
        """
        return self._last_requested_on

    @last_requested_on.setter
    def last_requested_on(self, last_requested_on):
        """Sets the last_requested_on of this CustomerSticker.


        :param last_requested_on: The last_requested_on of this CustomerSticker.  # noqa: E501
        :type: datetime
        """

        self._last_requested_on = last_requested_on

    @property
    def is_deleted(self):
        """Gets the is_deleted of this CustomerSticker.  # noqa: E501


        :return: The is_deleted of this CustomerSticker.  # noqa: E501
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this CustomerSticker.


        :param is_deleted: The is_deleted of this CustomerSticker.  # noqa: E501
        :type: bool
        """
        if is_deleted is None:
            raise ValueError("Invalid value for `is_deleted`, must not be `None`")  # noqa: E501

        self._is_deleted = is_deleted

    @property
    def sequence_number(self):
        """Gets the sequence_number of this CustomerSticker.  # noqa: E501


        :return: The sequence_number of this CustomerSticker.  # noqa: E501
        :rtype: int
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this CustomerSticker.


        :param sequence_number: The sequence_number of this CustomerSticker.  # noqa: E501
        :type: int
        """
        if sequence_number is None:
            raise ValueError("Invalid value for `sequence_number`, must not be `None`")  # noqa: E501

        self._sequence_number = sequence_number

    @property
    def sticker_file_information(self):
        """Gets the sticker_file_information of this CustomerSticker.  # noqa: E501


        :return: The sticker_file_information of this CustomerSticker.  # noqa: E501
        :rtype: CustomerStickerFileInformation
        """
        return self._sticker_file_information

    @sticker_file_information.setter
    def sticker_file_information(self, sticker_file_information):
        """Sets the sticker_file_information of this CustomerSticker.


        :param sticker_file_information: The sticker_file_information of this CustomerSticker.  # noqa: E501
        :type: CustomerStickerFileInformation
        """

        self._sticker_file_information = sticker_file_information

    @property
    def compositions(self):
        """Gets the compositions of this CustomerSticker.  # noqa: E501


        :return: The compositions of this CustomerSticker.  # noqa: E501
        :rtype: list[CustomerStickerComposition]
        """
        return self._compositions

    @compositions.setter
    def compositions(self, compositions):
        """Sets the compositions of this CustomerSticker.


        :param compositions: The compositions of this CustomerSticker.  # noqa: E501
        :type: list[CustomerStickerComposition]
        """
        if compositions is None:
            raise ValueError("Invalid value for `compositions`, must not be `None`")  # noqa: E501

        self._compositions = compositions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomerSticker, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomerSticker):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
