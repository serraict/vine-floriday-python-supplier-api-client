# coding: utf-8

"""
    Main - Floriday Suppliers API

    ÔªøEvery endpoint requires at least the `role:app` scope and the header `X-Api-Key` populated with your given API-key. Most endpoints also require an additional scope which is listed in their descriptions.  - üóù [Authorization server (staging)](https://idm.staging.floriday.io/oauth2/ausmw6b47z1BnlHkw0h7/.well-known/oauth-authorization-server) - üóù [Authorization server (live)](https://idm.floriday.io/oauth2/aus3testdcf2vyfs70i7/.well-known/oauth-authorization-server) - üìö [Documentation](https://developer.floriday.io/docs/welcome) - ‚ñ∂ [Coding screencast: getting started (NL)](https://www.youtube.com/watch?v=fdqzP7_Y_s8)  ---  _The current state of this version 2024v1 is **Main**._ * This version will be deprecated after October 2024. * This version will be removed after April 2025.  ---  üîó 2023v2: [Customers API](https://api.staging.floriday.io/customers-api-2023v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2023v2/swagger/index.html) üîó 2024v1: [Customers API](https://api.staging.floriday.io/customers-api-2024v1/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v1/swagger/index.html) üîó 2024v2: [Customers API](https://api.staging.floriday.io/customers-api-2024v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v2/swagger/index.html)   # noqa: E501

    OpenAPI spec version: 2024v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DeliveryConditionSet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'delivery_condition_set_id': 'str',
        'delivery_condition_set_name': 'str',
        'warehouse_ids': 'list[str]',
        'customers': 'list[str]',
        'delivery_conditions': 'list[DeliveryCondition]',
        'additional_services': 'list[AdditionalService]',
        'is_deleted': 'bool',
        'is_customer_specific': 'bool',
        'sequence_number': 'int',
        'version': 'int'
    }

    attribute_map = {
        'delivery_condition_set_id': 'deliveryConditionSetId',
        'delivery_condition_set_name': 'deliveryConditionSetName',
        'warehouse_ids': 'warehouseIds',
        'customers': 'customers',
        'delivery_conditions': 'deliveryConditions',
        'additional_services': 'additionalServices',
        'is_deleted': 'isDeleted',
        'is_customer_specific': 'isCustomerSpecific',
        'sequence_number': 'sequenceNumber',
        'version': 'version'
    }

    def __init__(self, delivery_condition_set_id=None, delivery_condition_set_name=None, warehouse_ids=None, customers=None, delivery_conditions=None, additional_services=None, is_deleted=None, is_customer_specific=None, sequence_number=None, version=None):  # noqa: E501
        """DeliveryConditionSet - a model defined in Swagger"""  # noqa: E501
        self._delivery_condition_set_id = None
        self._delivery_condition_set_name = None
        self._warehouse_ids = None
        self._customers = None
        self._delivery_conditions = None
        self._additional_services = None
        self._is_deleted = None
        self._is_customer_specific = None
        self._sequence_number = None
        self._version = None
        self.discriminator = None
        self.delivery_condition_set_id = delivery_condition_set_id
        self.delivery_condition_set_name = delivery_condition_set_name
        if warehouse_ids is not None:
            self.warehouse_ids = warehouse_ids
        if customers is not None:
            self.customers = customers
        self.delivery_conditions = delivery_conditions
        if additional_services is not None:
            self.additional_services = additional_services
        self.is_deleted = is_deleted
        self.is_customer_specific = is_customer_specific
        self.sequence_number = sequence_number
        self.version = version

    @property
    def delivery_condition_set_id(self):
        """Gets the delivery_condition_set_id of this DeliveryConditionSet.  # noqa: E501


        :return: The delivery_condition_set_id of this DeliveryConditionSet.  # noqa: E501
        :rtype: str
        """
        return self._delivery_condition_set_id

    @delivery_condition_set_id.setter
    def delivery_condition_set_id(self, delivery_condition_set_id):
        """Sets the delivery_condition_set_id of this DeliveryConditionSet.


        :param delivery_condition_set_id: The delivery_condition_set_id of this DeliveryConditionSet.  # noqa: E501
        :type: str
        """
        if delivery_condition_set_id is None:
            raise ValueError("Invalid value for `delivery_condition_set_id`, must not be `None`")  # noqa: E501

        self._delivery_condition_set_id = delivery_condition_set_id

    @property
    def delivery_condition_set_name(self):
        """Gets the delivery_condition_set_name of this DeliveryConditionSet.  # noqa: E501


        :return: The delivery_condition_set_name of this DeliveryConditionSet.  # noqa: E501
        :rtype: str
        """
        return self._delivery_condition_set_name

    @delivery_condition_set_name.setter
    def delivery_condition_set_name(self, delivery_condition_set_name):
        """Sets the delivery_condition_set_name of this DeliveryConditionSet.


        :param delivery_condition_set_name: The delivery_condition_set_name of this DeliveryConditionSet.  # noqa: E501
        :type: str
        """
        if delivery_condition_set_name is None:
            raise ValueError("Invalid value for `delivery_condition_set_name`, must not be `None`")  # noqa: E501

        self._delivery_condition_set_name = delivery_condition_set_name

    @property
    def warehouse_ids(self):
        """Gets the warehouse_ids of this DeliveryConditionSet.  # noqa: E501


        :return: The warehouse_ids of this DeliveryConditionSet.  # noqa: E501
        :rtype: list[str]
        """
        return self._warehouse_ids

    @warehouse_ids.setter
    def warehouse_ids(self, warehouse_ids):
        """Sets the warehouse_ids of this DeliveryConditionSet.


        :param warehouse_ids: The warehouse_ids of this DeliveryConditionSet.  # noqa: E501
        :type: list[str]
        """

        self._warehouse_ids = warehouse_ids

    @property
    def customers(self):
        """Gets the customers of this DeliveryConditionSet.  # noqa: E501


        :return: The customers of this DeliveryConditionSet.  # noqa: E501
        :rtype: list[str]
        """
        return self._customers

    @customers.setter
    def customers(self, customers):
        """Sets the customers of this DeliveryConditionSet.


        :param customers: The customers of this DeliveryConditionSet.  # noqa: E501
        :type: list[str]
        """

        self._customers = customers

    @property
    def delivery_conditions(self):
        """Gets the delivery_conditions of this DeliveryConditionSet.  # noqa: E501


        :return: The delivery_conditions of this DeliveryConditionSet.  # noqa: E501
        :rtype: list[DeliveryCondition]
        """
        return self._delivery_conditions

    @delivery_conditions.setter
    def delivery_conditions(self, delivery_conditions):
        """Sets the delivery_conditions of this DeliveryConditionSet.


        :param delivery_conditions: The delivery_conditions of this DeliveryConditionSet.  # noqa: E501
        :type: list[DeliveryCondition]
        """
        if delivery_conditions is None:
            raise ValueError("Invalid value for `delivery_conditions`, must not be `None`")  # noqa: E501

        self._delivery_conditions = delivery_conditions

    @property
    def additional_services(self):
        """Gets the additional_services of this DeliveryConditionSet.  # noqa: E501


        :return: The additional_services of this DeliveryConditionSet.  # noqa: E501
        :rtype: list[AdditionalService]
        """
        return self._additional_services

    @additional_services.setter
    def additional_services(self, additional_services):
        """Sets the additional_services of this DeliveryConditionSet.


        :param additional_services: The additional_services of this DeliveryConditionSet.  # noqa: E501
        :type: list[AdditionalService]
        """

        self._additional_services = additional_services

    @property
    def is_deleted(self):
        """Gets the is_deleted of this DeliveryConditionSet.  # noqa: E501


        :return: The is_deleted of this DeliveryConditionSet.  # noqa: E501
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this DeliveryConditionSet.


        :param is_deleted: The is_deleted of this DeliveryConditionSet.  # noqa: E501
        :type: bool
        """
        if is_deleted is None:
            raise ValueError("Invalid value for `is_deleted`, must not be `None`")  # noqa: E501

        self._is_deleted = is_deleted

    @property
    def is_customer_specific(self):
        """Gets the is_customer_specific of this DeliveryConditionSet.  # noqa: E501


        :return: The is_customer_specific of this DeliveryConditionSet.  # noqa: E501
        :rtype: bool
        """
        return self._is_customer_specific

    @is_customer_specific.setter
    def is_customer_specific(self, is_customer_specific):
        """Sets the is_customer_specific of this DeliveryConditionSet.


        :param is_customer_specific: The is_customer_specific of this DeliveryConditionSet.  # noqa: E501
        :type: bool
        """
        if is_customer_specific is None:
            raise ValueError("Invalid value for `is_customer_specific`, must not be `None`")  # noqa: E501

        self._is_customer_specific = is_customer_specific

    @property
    def sequence_number(self):
        """Gets the sequence_number of this DeliveryConditionSet.  # noqa: E501


        :return: The sequence_number of this DeliveryConditionSet.  # noqa: E501
        :rtype: int
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this DeliveryConditionSet.


        :param sequence_number: The sequence_number of this DeliveryConditionSet.  # noqa: E501
        :type: int
        """
        if sequence_number is None:
            raise ValueError("Invalid value for `sequence_number`, must not be `None`")  # noqa: E501

        self._sequence_number = sequence_number

    @property
    def version(self):
        """Gets the version of this DeliveryConditionSet.  # noqa: E501


        :return: The version of this DeliveryConditionSet.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this DeliveryConditionSet.


        :param version: The version of this DeliveryConditionSet.  # noqa: E501
        :type: int
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeliveryConditionSet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeliveryConditionSet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
