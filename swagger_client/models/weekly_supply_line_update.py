# coding: utf-8

"""
    Main - Floriday Suppliers API

    ÔªøEvery endpoint requires at least the `role:app` scope and the header `X-Api-Key` populated with your given API-key. Most endpoints also require an additional scope which is listed in their descriptions.  - üóù [Authorization server (staging)](https://idm.staging.floriday.io/oauth2/ausmw6b47z1BnlHkw0h7/.well-known/oauth-authorization-server) - üóù [Authorization server (live)](https://idm.floriday.io/oauth2/aus3testdcf2vyfs70i7/.well-known/oauth-authorization-server) - üìö [Documentation](https://developer.floriday.io/docs/welcome) - ‚ñ∂ [Coding screencast: getting started (NL)](https://www.youtube.com/watch?v=fdqzP7_Y_s8)  ---  _The current state of this version 2024v1 is **Main**._ * This version will be deprecated after October 2024. * This version will be removed after April 2025.  ---  üîó 2023v2: [Customers API](https://api.staging.floriday.io/customers-api-2023v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2023v2/swagger/index.html) üîó 2024v1: [Customers API](https://api.staging.floriday.io/customers-api-2024v1/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v1/swagger/index.html) üîó 2024v2: [Customers API](https://api.staging.floriday.io/customers-api-2024v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v2/swagger/index.html)   # noqa: E501

    OpenAPI spec version: 2024v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WeeklySupplyLineUpdate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'price_per_piece': 'Price',
        'number_of_pieces': 'int',
        'allowed_customer_organization_ids': 'list[str]',
        'sales_unit': 'SalesUnit',
        'is_promo': 'bool'
    }

    attribute_map = {
        'price_per_piece': 'pricePerPiece',
        'number_of_pieces': 'numberOfPieces',
        'allowed_customer_organization_ids': 'allowedCustomerOrganizationIds',
        'sales_unit': 'salesUnit',
        'is_promo': 'isPromo'
    }

    def __init__(self, price_per_piece=None, number_of_pieces=None, allowed_customer_organization_ids=None, sales_unit=None, is_promo=None):  # noqa: E501
        """WeeklySupplyLineUpdate - a model defined in Swagger"""  # noqa: E501
        self._price_per_piece = None
        self._number_of_pieces = None
        self._allowed_customer_organization_ids = None
        self._sales_unit = None
        self._is_promo = None
        self.discriminator = None
        self.price_per_piece = price_per_piece
        self.number_of_pieces = number_of_pieces
        if allowed_customer_organization_ids is not None:
            self.allowed_customer_organization_ids = allowed_customer_organization_ids
        if sales_unit is not None:
            self.sales_unit = sales_unit
        if is_promo is not None:
            self.is_promo = is_promo

    @property
    def price_per_piece(self):
        """Gets the price_per_piece of this WeeklySupplyLineUpdate.  # noqa: E501


        :return: The price_per_piece of this WeeklySupplyLineUpdate.  # noqa: E501
        :rtype: Price
        """
        return self._price_per_piece

    @price_per_piece.setter
    def price_per_piece(self, price_per_piece):
        """Sets the price_per_piece of this WeeklySupplyLineUpdate.


        :param price_per_piece: The price_per_piece of this WeeklySupplyLineUpdate.  # noqa: E501
        :type: Price
        """
        if price_per_piece is None:
            raise ValueError("Invalid value for `price_per_piece`, must not be `None`")  # noqa: E501

        self._price_per_piece = price_per_piece

    @property
    def number_of_pieces(self):
        """Gets the number_of_pieces of this WeeklySupplyLineUpdate.  # noqa: E501


        :return: The number_of_pieces of this WeeklySupplyLineUpdate.  # noqa: E501
        :rtype: int
        """
        return self._number_of_pieces

    @number_of_pieces.setter
    def number_of_pieces(self, number_of_pieces):
        """Sets the number_of_pieces of this WeeklySupplyLineUpdate.


        :param number_of_pieces: The number_of_pieces of this WeeklySupplyLineUpdate.  # noqa: E501
        :type: int
        """
        if number_of_pieces is None:
            raise ValueError("Invalid value for `number_of_pieces`, must not be `None`")  # noqa: E501

        self._number_of_pieces = number_of_pieces

    @property
    def allowed_customer_organization_ids(self):
        """Gets the allowed_customer_organization_ids of this WeeklySupplyLineUpdate.  # noqa: E501


        :return: The allowed_customer_organization_ids of this WeeklySupplyLineUpdate.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_customer_organization_ids

    @allowed_customer_organization_ids.setter
    def allowed_customer_organization_ids(self, allowed_customer_organization_ids):
        """Sets the allowed_customer_organization_ids of this WeeklySupplyLineUpdate.


        :param allowed_customer_organization_ids: The allowed_customer_organization_ids of this WeeklySupplyLineUpdate.  # noqa: E501
        :type: list[str]
        """

        self._allowed_customer_organization_ids = allowed_customer_organization_ids

    @property
    def sales_unit(self):
        """Gets the sales_unit of this WeeklySupplyLineUpdate.  # noqa: E501


        :return: The sales_unit of this WeeklySupplyLineUpdate.  # noqa: E501
        :rtype: SalesUnit
        """
        return self._sales_unit

    @sales_unit.setter
    def sales_unit(self, sales_unit):
        """Sets the sales_unit of this WeeklySupplyLineUpdate.


        :param sales_unit: The sales_unit of this WeeklySupplyLineUpdate.  # noqa: E501
        :type: SalesUnit
        """

        self._sales_unit = sales_unit

    @property
    def is_promo(self):
        """Gets the is_promo of this WeeklySupplyLineUpdate.  # noqa: E501


        :return: The is_promo of this WeeklySupplyLineUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._is_promo

    @is_promo.setter
    def is_promo(self, is_promo):
        """Sets the is_promo of this WeeklySupplyLineUpdate.


        :param is_promo: The is_promo of this WeeklySupplyLineUpdate.  # noqa: E501
        :type: bool
        """

        self._is_promo = is_promo

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WeeklySupplyLineUpdate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WeeklySupplyLineUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
