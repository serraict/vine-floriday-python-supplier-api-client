# coding: utf-8

"""
    Main - Floriday Suppliers API

    ÔªøEvery endpoint requires at least the `role:app` scope and the header `X-Api-Key` populated with your given API-key. Most endpoints also require an additional scope which is listed in their descriptions.  - üóù [Authorization server (staging)](https://idm.staging.floriday.io/oauth2/ausmw6b47z1BnlHkw0h7/.well-known/oauth-authorization-server) - üóù [Authorization server (live)](https://idm.floriday.io/oauth2/aus3testdcf2vyfs70i7/.well-known/oauth-authorization-server) - üìö [Documentation](https://developer.floriday.io/docs/welcome) - ‚ñ∂ [Coding screencast: getting started (NL)](https://www.youtube.com/watch?v=fdqzP7_Y_s8)  ---  _The current state of this version 2024v1 is **Main**._ * This version will be deprecated after October 2024. * This version will be removed after April 2025.  ---  üîó 2023v2: [Customers API](https://api.staging.floriday.io/customers-api-2023v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2023v2/swagger/index.html) üîó 2024v1: [Customers API](https://api.staging.floriday.io/customers-api-2024v1/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v1/swagger/index.html) üîó 2024v2: [Customers API](https://api.staging.floriday.io/customers-api-2024v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v2/swagger/index.html)   # noqa: E501

    OpenAPI spec version: 2024v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PublicHoliday(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    NONE = "NONE"
    NEW_YEARS_DAY = "NEW_YEARS_DAY"
    GOOD_FRIDAY = "GOOD_FRIDAY"
    EASTER_SUNDAY = "EASTER_SUNDAY"
    EASTER_MONDAY = "EASTER_MONDAY"
    DUTCH_KINGS_DAY = "DUTCH_KINGS_DAY"
    DUTCH_LIBERATION_DAY = "DUTCH_LIBERATION_DAY"
    INTERNATIONAL_LABOUR_DAY = "INTERNATIONAL_LABOUR_DAY"
    ASCENSION_DAY = "ASCENSION_DAY"
    WHIT_SUNDAY = "WHIT_SUNDAY"
    WHIT_MONDAY = "WHIT_MONDAY"
    CORPUS_CHRISTI = "CORPUS_CHRISTI"
    GERMAN_UNITY_DAY = "GERMAN_UNITY_DAY"
    ALL_SAINTS_DAY = "ALL_SAINTS_DAY"
    CHRISTMAS_EVE = "CHRISTMAS_EVE"
    FIRST_DAY_OF_CHRISTMAS = "FIRST_DAY_OF_CHRISTMAS"
    SECOND_DAY_OF_CHRISTMAS = "SECOND_DAY_OF_CHRISTMAS"
    NEW_YEARS_EVE = "NEW_YEARS_EVE"
    BELGIAN_NATIONAL_DAY = "BELGIAN_NATIONAL_DAY"
    BELGIAN_ARMISTICE_DAY = "BELGIAN_ARMISTICE_DAY"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """PublicHoliday - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PublicHoliday, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublicHoliday):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
