# coding: utf-8

"""
    Main - Floriday Suppliers API

    ÔªøEvery endpoint requires at least the `role:app` scope and the header `X-Api-Key` populated with your given API-key. Most endpoints also require an additional scope which is listed in their descriptions.  - üóù [Authorization server (staging)](https://idm.staging.floriday.io/oauth2/ausmw6b47z1BnlHkw0h7/.well-known/oauth-authorization-server) - üóù [Authorization server (live)](https://idm.floriday.io/oauth2/aus3testdcf2vyfs70i7/.well-known/oauth-authorization-server) - üìö [Documentation](https://developer.floriday.io/docs/welcome) - ‚ñ∂ [Coding screencast: getting started (NL)](https://www.youtube.com/watch?v=fdqzP7_Y_s8)  ---  _The current state of this version 2024v1 is **Main**._ * This version will be deprecated after October 2024. * This version will be removed after April 2025.  ---  üîó 2023v2: [Customers API](https://api.staging.floriday.io/customers-api-2023v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2023v2/swagger/index.html) üîó 2024v1: [Customers API](https://api.staging.floriday.io/customers-api-2024v1/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v1/swagger/index.html) üîó 2024v2: [Customers API](https://api.staging.floriday.io/customers-api-2024v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v2/swagger/index.html)   # noqa: E501

    OpenAPI spec version: 2024v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TradeItemSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'trade_item_id': 'str',
        'supplier_article_code': 'str',
        'vbn_product_code': 'int',
        'trade_item_name': 'TradeItemName',
        'characteristics': 'list[Characteristic]',
        'photos': 'list[Photo]',
        'is_customer_specific': 'bool',
        'supplier_organization_id': 'str',
        'is_deleted': 'bool',
        'parent_id': 'str'
    }

    attribute_map = {
        'trade_item_id': 'tradeItemId',
        'supplier_article_code': 'supplierArticleCode',
        'vbn_product_code': 'vbnProductCode',
        'trade_item_name': 'tradeItemName',
        'characteristics': 'characteristics',
        'photos': 'photos',
        'is_customer_specific': 'isCustomerSpecific',
        'supplier_organization_id': 'supplierOrganizationId',
        'is_deleted': 'isDeleted',
        'parent_id': 'parentId'
    }

    def __init__(self, trade_item_id=None, supplier_article_code=None, vbn_product_code=None, trade_item_name=None, characteristics=None, photos=None, is_customer_specific=None, supplier_organization_id=None, is_deleted=None, parent_id=None):  # noqa: E501
        """TradeItemSummary - a model defined in Swagger"""  # noqa: E501
        self._trade_item_id = None
        self._supplier_article_code = None
        self._vbn_product_code = None
        self._trade_item_name = None
        self._characteristics = None
        self._photos = None
        self._is_customer_specific = None
        self._supplier_organization_id = None
        self._is_deleted = None
        self._parent_id = None
        self.discriminator = None
        self.trade_item_id = trade_item_id
        self.supplier_article_code = supplier_article_code
        self.vbn_product_code = vbn_product_code
        self.trade_item_name = trade_item_name
        self.characteristics = characteristics
        self.photos = photos
        self.is_customer_specific = is_customer_specific
        self.supplier_organization_id = supplier_organization_id
        self.is_deleted = is_deleted
        if parent_id is not None:
            self.parent_id = parent_id

    @property
    def trade_item_id(self):
        """Gets the trade_item_id of this TradeItemSummary.  # noqa: E501


        :return: The trade_item_id of this TradeItemSummary.  # noqa: E501
        :rtype: str
        """
        return self._trade_item_id

    @trade_item_id.setter
    def trade_item_id(self, trade_item_id):
        """Sets the trade_item_id of this TradeItemSummary.


        :param trade_item_id: The trade_item_id of this TradeItemSummary.  # noqa: E501
        :type: str
        """
        if trade_item_id is None:
            raise ValueError("Invalid value for `trade_item_id`, must not be `None`")  # noqa: E501

        self._trade_item_id = trade_item_id

    @property
    def supplier_article_code(self):
        """Gets the supplier_article_code of this TradeItemSummary.  # noqa: E501


        :return: The supplier_article_code of this TradeItemSummary.  # noqa: E501
        :rtype: str
        """
        return self._supplier_article_code

    @supplier_article_code.setter
    def supplier_article_code(self, supplier_article_code):
        """Sets the supplier_article_code of this TradeItemSummary.


        :param supplier_article_code: The supplier_article_code of this TradeItemSummary.  # noqa: E501
        :type: str
        """
        if supplier_article_code is None:
            raise ValueError("Invalid value for `supplier_article_code`, must not be `None`")  # noqa: E501

        self._supplier_article_code = supplier_article_code

    @property
    def vbn_product_code(self):
        """Gets the vbn_product_code of this TradeItemSummary.  # noqa: E501


        :return: The vbn_product_code of this TradeItemSummary.  # noqa: E501
        :rtype: int
        """
        return self._vbn_product_code

    @vbn_product_code.setter
    def vbn_product_code(self, vbn_product_code):
        """Sets the vbn_product_code of this TradeItemSummary.


        :param vbn_product_code: The vbn_product_code of this TradeItemSummary.  # noqa: E501
        :type: int
        """
        if vbn_product_code is None:
            raise ValueError("Invalid value for `vbn_product_code`, must not be `None`")  # noqa: E501

        self._vbn_product_code = vbn_product_code

    @property
    def trade_item_name(self):
        """Gets the trade_item_name of this TradeItemSummary.  # noqa: E501


        :return: The trade_item_name of this TradeItemSummary.  # noqa: E501
        :rtype: TradeItemName
        """
        return self._trade_item_name

    @trade_item_name.setter
    def trade_item_name(self, trade_item_name):
        """Sets the trade_item_name of this TradeItemSummary.


        :param trade_item_name: The trade_item_name of this TradeItemSummary.  # noqa: E501
        :type: TradeItemName
        """
        if trade_item_name is None:
            raise ValueError("Invalid value for `trade_item_name`, must not be `None`")  # noqa: E501

        self._trade_item_name = trade_item_name

    @property
    def characteristics(self):
        """Gets the characteristics of this TradeItemSummary.  # noqa: E501


        :return: The characteristics of this TradeItemSummary.  # noqa: E501
        :rtype: list[Characteristic]
        """
        return self._characteristics

    @characteristics.setter
    def characteristics(self, characteristics):
        """Sets the characteristics of this TradeItemSummary.


        :param characteristics: The characteristics of this TradeItemSummary.  # noqa: E501
        :type: list[Characteristic]
        """
        if characteristics is None:
            raise ValueError("Invalid value for `characteristics`, must not be `None`")  # noqa: E501

        self._characteristics = characteristics

    @property
    def photos(self):
        """Gets the photos of this TradeItemSummary.  # noqa: E501


        :return: The photos of this TradeItemSummary.  # noqa: E501
        :rtype: list[Photo]
        """
        return self._photos

    @photos.setter
    def photos(self, photos):
        """Sets the photos of this TradeItemSummary.


        :param photos: The photos of this TradeItemSummary.  # noqa: E501
        :type: list[Photo]
        """
        if photos is None:
            raise ValueError("Invalid value for `photos`, must not be `None`")  # noqa: E501

        self._photos = photos

    @property
    def is_customer_specific(self):
        """Gets the is_customer_specific of this TradeItemSummary.  # noqa: E501


        :return: The is_customer_specific of this TradeItemSummary.  # noqa: E501
        :rtype: bool
        """
        return self._is_customer_specific

    @is_customer_specific.setter
    def is_customer_specific(self, is_customer_specific):
        """Sets the is_customer_specific of this TradeItemSummary.


        :param is_customer_specific: The is_customer_specific of this TradeItemSummary.  # noqa: E501
        :type: bool
        """
        if is_customer_specific is None:
            raise ValueError("Invalid value for `is_customer_specific`, must not be `None`")  # noqa: E501

        self._is_customer_specific = is_customer_specific

    @property
    def supplier_organization_id(self):
        """Gets the supplier_organization_id of this TradeItemSummary.  # noqa: E501


        :return: The supplier_organization_id of this TradeItemSummary.  # noqa: E501
        :rtype: str
        """
        return self._supplier_organization_id

    @supplier_organization_id.setter
    def supplier_organization_id(self, supplier_organization_id):
        """Sets the supplier_organization_id of this TradeItemSummary.


        :param supplier_organization_id: The supplier_organization_id of this TradeItemSummary.  # noqa: E501
        :type: str
        """
        if supplier_organization_id is None:
            raise ValueError("Invalid value for `supplier_organization_id`, must not be `None`")  # noqa: E501

        self._supplier_organization_id = supplier_organization_id

    @property
    def is_deleted(self):
        """Gets the is_deleted of this TradeItemSummary.  # noqa: E501


        :return: The is_deleted of this TradeItemSummary.  # noqa: E501
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this TradeItemSummary.


        :param is_deleted: The is_deleted of this TradeItemSummary.  # noqa: E501
        :type: bool
        """
        if is_deleted is None:
            raise ValueError("Invalid value for `is_deleted`, must not be `None`")  # noqa: E501

        self._is_deleted = is_deleted

    @property
    def parent_id(self):
        """Gets the parent_id of this TradeItemSummary.  # noqa: E501


        :return: The parent_id of this TradeItemSummary.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this TradeItemSummary.


        :param parent_id: The parent_id of this TradeItemSummary.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TradeItemSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TradeItemSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
