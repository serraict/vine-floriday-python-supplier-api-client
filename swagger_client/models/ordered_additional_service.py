# coding: utf-8

"""
    Main - Floriday Suppliers API

    ÔªøEvery endpoint requires at least the `role:app` scope and the header `X-Api-Key` populated with your given API-key. Most endpoints also require an additional scope which is listed in their descriptions.  - üóù [Authorization server (staging)](https://idm.staging.floriday.io/oauth2/ausmw6b47z1BnlHkw0h7/.well-known/oauth-authorization-server) - üóù [Authorization server (live)](https://idm.floriday.io/oauth2/aus3testdcf2vyfs70i7/.well-known/oauth-authorization-server) - üìö [Documentation](https://developer.floriday.io/docs/welcome) - ‚ñ∂ [Coding screencast: getting started (NL)](https://www.youtube.com/watch?v=fdqzP7_Y_s8)  ---  _The current state of this version 2024v1 is **Main**._ * This version will be deprecated after October 2024. * This version will be removed after April 2025.  ---  üîó 2023v2: [Customers API](https://api.staging.floriday.io/customers-api-2023v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2023v2/swagger/index.html) üîó 2024v1: [Customers API](https://api.staging.floriday.io/customers-api-2024v1/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v1/swagger/index.html) üîó 2024v2: [Customers API](https://api.staging.floriday.io/customers-api-2024v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v2/swagger/index.html)   # noqa: E501

    OpenAPI spec version: 2024v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrderedAdditionalService(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'additional_service_id': 'str',
        'price': 'Price',
        'unit': 'AdditionalServiceUnit',
        'number_of_units': 'int'
    }

    attribute_map = {
        'additional_service_id': 'additionalServiceId',
        'price': 'price',
        'unit': 'unit',
        'number_of_units': 'numberOfUnits'
    }

    def __init__(self, additional_service_id=None, price=None, unit=None, number_of_units=None):  # noqa: E501
        """OrderedAdditionalService - a model defined in Swagger"""  # noqa: E501
        self._additional_service_id = None
        self._price = None
        self._unit = None
        self._number_of_units = None
        self.discriminator = None
        self.additional_service_id = additional_service_id
        self.price = price
        self.unit = unit
        if number_of_units is not None:
            self.number_of_units = number_of_units

    @property
    def additional_service_id(self):
        """Gets the additional_service_id of this OrderedAdditionalService.  # noqa: E501


        :return: The additional_service_id of this OrderedAdditionalService.  # noqa: E501
        :rtype: str
        """
        return self._additional_service_id

    @additional_service_id.setter
    def additional_service_id(self, additional_service_id):
        """Sets the additional_service_id of this OrderedAdditionalService.


        :param additional_service_id: The additional_service_id of this OrderedAdditionalService.  # noqa: E501
        :type: str
        """
        if additional_service_id is None:
            raise ValueError("Invalid value for `additional_service_id`, must not be `None`")  # noqa: E501

        self._additional_service_id = additional_service_id

    @property
    def price(self):
        """Gets the price of this OrderedAdditionalService.  # noqa: E501


        :return: The price of this OrderedAdditionalService.  # noqa: E501
        :rtype: Price
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this OrderedAdditionalService.


        :param price: The price of this OrderedAdditionalService.  # noqa: E501
        :type: Price
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def unit(self):
        """Gets the unit of this OrderedAdditionalService.  # noqa: E501


        :return: The unit of this OrderedAdditionalService.  # noqa: E501
        :rtype: AdditionalServiceUnit
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this OrderedAdditionalService.


        :param unit: The unit of this OrderedAdditionalService.  # noqa: E501
        :type: AdditionalServiceUnit
        """
        if unit is None:
            raise ValueError("Invalid value for `unit`, must not be `None`")  # noqa: E501

        self._unit = unit

    @property
    def number_of_units(self):
        """Gets the number_of_units of this OrderedAdditionalService.  # noqa: E501

        Only used in combination with unit type 'LABEL'  # noqa: E501

        :return: The number_of_units of this OrderedAdditionalService.  # noqa: E501
        :rtype: int
        """
        return self._number_of_units

    @number_of_units.setter
    def number_of_units(self, number_of_units):
        """Sets the number_of_units of this OrderedAdditionalService.

        Only used in combination with unit type 'LABEL'  # noqa: E501

        :param number_of_units: The number_of_units of this OrderedAdditionalService.  # noqa: E501
        :type: int
        """

        self._number_of_units = number_of_units

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderedAdditionalService, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderedAdditionalService):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
