# coding: utf-8

"""
    Main - Floriday Suppliers API

    ÔªøEvery endpoint requires at least the `role:app` scope and the header `X-Api-Key` populated with your given API-key. Most endpoints also require an additional scope which is listed in their descriptions.  - üóù [Authorization server (staging)](https://idm.staging.floriday.io/oauth2/ausmw6b47z1BnlHkw0h7/.well-known/oauth-authorization-server) - üóù [Authorization server (live)](https://idm.floriday.io/oauth2/aus3testdcf2vyfs70i7/.well-known/oauth-authorization-server) - üìö [Documentation](https://developer.floriday.io/docs/welcome) - ‚ñ∂ [Coding screencast: getting started (NL)](https://www.youtube.com/watch?v=fdqzP7_Y_s8)  ---  _The current state of this version 2024v1 is **Main**._ * This version will be deprecated after October 2024. * This version will be removed after April 2025.  ---  üîó 2023v2: [Customers API](https://api.staging.floriday.io/customers-api-2023v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2023v2/swagger/index.html) üîó 2024v1: [Customers API](https://api.staging.floriday.io/customers-api-2024v1/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v1/swagger/index.html) üîó 2024v2: [Customers API](https://api.staging.floriday.io/customers-api-2024v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v2/swagger/index.html)   # noqa: E501

    OpenAPI spec version: 2024v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TradeItemRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'trade_item_request_id': 'str',
        'supplier_organization_id': 'str',
        'customer_organization_id': 'str',
        'trade_item_id': 'str',
        'status': 'RequestStatus',
        'sequence_number': 'int',
        'vbn_product_code': 'int',
        'remark': 'str',
        'packing_configuration': 'RequestPackingConfiguration',
        'characteristics': 'list[Characteristic]',
        'expires_at_date_time': 'datetime',
        'creation_date_time': 'datetime',
        'last_modified_date_time': 'datetime'
    }

    attribute_map = {
        'trade_item_request_id': 'tradeItemRequestId',
        'supplier_organization_id': 'supplierOrganizationId',
        'customer_organization_id': 'customerOrganizationId',
        'trade_item_id': 'tradeItemId',
        'status': 'status',
        'sequence_number': 'sequenceNumber',
        'vbn_product_code': 'vbnProductCode',
        'remark': 'remark',
        'packing_configuration': 'packingConfiguration',
        'characteristics': 'characteristics',
        'expires_at_date_time': 'expiresAtDateTime',
        'creation_date_time': 'creationDateTime',
        'last_modified_date_time': 'lastModifiedDateTime'
    }

    def __init__(self, trade_item_request_id=None, supplier_organization_id=None, customer_organization_id=None, trade_item_id=None, status=None, sequence_number=None, vbn_product_code=None, remark=None, packing_configuration=None, characteristics=None, expires_at_date_time=None, creation_date_time=None, last_modified_date_time=None):  # noqa: E501
        """TradeItemRequest - a model defined in Swagger"""  # noqa: E501
        self._trade_item_request_id = None
        self._supplier_organization_id = None
        self._customer_organization_id = None
        self._trade_item_id = None
        self._status = None
        self._sequence_number = None
        self._vbn_product_code = None
        self._remark = None
        self._packing_configuration = None
        self._characteristics = None
        self._expires_at_date_time = None
        self._creation_date_time = None
        self._last_modified_date_time = None
        self.discriminator = None
        self.trade_item_request_id = trade_item_request_id
        self.supplier_organization_id = supplier_organization_id
        self.customer_organization_id = customer_organization_id
        if trade_item_id is not None:
            self.trade_item_id = trade_item_id
        self.status = status
        self.sequence_number = sequence_number
        self.vbn_product_code = vbn_product_code
        if remark is not None:
            self.remark = remark
        self.packing_configuration = packing_configuration
        self.characteristics = characteristics
        self.expires_at_date_time = expires_at_date_time
        self.creation_date_time = creation_date_time
        self.last_modified_date_time = last_modified_date_time

    @property
    def trade_item_request_id(self):
        """Gets the trade_item_request_id of this TradeItemRequest.  # noqa: E501


        :return: The trade_item_request_id of this TradeItemRequest.  # noqa: E501
        :rtype: str
        """
        return self._trade_item_request_id

    @trade_item_request_id.setter
    def trade_item_request_id(self, trade_item_request_id):
        """Sets the trade_item_request_id of this TradeItemRequest.


        :param trade_item_request_id: The trade_item_request_id of this TradeItemRequest.  # noqa: E501
        :type: str
        """
        if trade_item_request_id is None:
            raise ValueError("Invalid value for `trade_item_request_id`, must not be `None`")  # noqa: E501

        self._trade_item_request_id = trade_item_request_id

    @property
    def supplier_organization_id(self):
        """Gets the supplier_organization_id of this TradeItemRequest.  # noqa: E501


        :return: The supplier_organization_id of this TradeItemRequest.  # noqa: E501
        :rtype: str
        """
        return self._supplier_organization_id

    @supplier_organization_id.setter
    def supplier_organization_id(self, supplier_organization_id):
        """Sets the supplier_organization_id of this TradeItemRequest.


        :param supplier_organization_id: The supplier_organization_id of this TradeItemRequest.  # noqa: E501
        :type: str
        """
        if supplier_organization_id is None:
            raise ValueError("Invalid value for `supplier_organization_id`, must not be `None`")  # noqa: E501

        self._supplier_organization_id = supplier_organization_id

    @property
    def customer_organization_id(self):
        """Gets the customer_organization_id of this TradeItemRequest.  # noqa: E501


        :return: The customer_organization_id of this TradeItemRequest.  # noqa: E501
        :rtype: str
        """
        return self._customer_organization_id

    @customer_organization_id.setter
    def customer_organization_id(self, customer_organization_id):
        """Sets the customer_organization_id of this TradeItemRequest.


        :param customer_organization_id: The customer_organization_id of this TradeItemRequest.  # noqa: E501
        :type: str
        """
        if customer_organization_id is None:
            raise ValueError("Invalid value for `customer_organization_id`, must not be `None`")  # noqa: E501

        self._customer_organization_id = customer_organization_id

    @property
    def trade_item_id(self):
        """Gets the trade_item_id of this TradeItemRequest.  # noqa: E501


        :return: The trade_item_id of this TradeItemRequest.  # noqa: E501
        :rtype: str
        """
        return self._trade_item_id

    @trade_item_id.setter
    def trade_item_id(self, trade_item_id):
        """Sets the trade_item_id of this TradeItemRequest.


        :param trade_item_id: The trade_item_id of this TradeItemRequest.  # noqa: E501
        :type: str
        """

        self._trade_item_id = trade_item_id

    @property
    def status(self):
        """Gets the status of this TradeItemRequest.  # noqa: E501


        :return: The status of this TradeItemRequest.  # noqa: E501
        :rtype: RequestStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TradeItemRequest.


        :param status: The status of this TradeItemRequest.  # noqa: E501
        :type: RequestStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def sequence_number(self):
        """Gets the sequence_number of this TradeItemRequest.  # noqa: E501


        :return: The sequence_number of this TradeItemRequest.  # noqa: E501
        :rtype: int
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this TradeItemRequest.


        :param sequence_number: The sequence_number of this TradeItemRequest.  # noqa: E501
        :type: int
        """
        if sequence_number is None:
            raise ValueError("Invalid value for `sequence_number`, must not be `None`")  # noqa: E501

        self._sequence_number = sequence_number

    @property
    def vbn_product_code(self):
        """Gets the vbn_product_code of this TradeItemRequest.  # noqa: E501


        :return: The vbn_product_code of this TradeItemRequest.  # noqa: E501
        :rtype: int
        """
        return self._vbn_product_code

    @vbn_product_code.setter
    def vbn_product_code(self, vbn_product_code):
        """Sets the vbn_product_code of this TradeItemRequest.


        :param vbn_product_code: The vbn_product_code of this TradeItemRequest.  # noqa: E501
        :type: int
        """
        if vbn_product_code is None:
            raise ValueError("Invalid value for `vbn_product_code`, must not be `None`")  # noqa: E501

        self._vbn_product_code = vbn_product_code

    @property
    def remark(self):
        """Gets the remark of this TradeItemRequest.  # noqa: E501


        :return: The remark of this TradeItemRequest.  # noqa: E501
        :rtype: str
        """
        return self._remark

    @remark.setter
    def remark(self, remark):
        """Sets the remark of this TradeItemRequest.


        :param remark: The remark of this TradeItemRequest.  # noqa: E501
        :type: str
        """

        self._remark = remark

    @property
    def packing_configuration(self):
        """Gets the packing_configuration of this TradeItemRequest.  # noqa: E501


        :return: The packing_configuration of this TradeItemRequest.  # noqa: E501
        :rtype: RequestPackingConfiguration
        """
        return self._packing_configuration

    @packing_configuration.setter
    def packing_configuration(self, packing_configuration):
        """Sets the packing_configuration of this TradeItemRequest.


        :param packing_configuration: The packing_configuration of this TradeItemRequest.  # noqa: E501
        :type: RequestPackingConfiguration
        """
        if packing_configuration is None:
            raise ValueError("Invalid value for `packing_configuration`, must not be `None`")  # noqa: E501

        self._packing_configuration = packing_configuration

    @property
    def characteristics(self):
        """Gets the characteristics of this TradeItemRequest.  # noqa: E501


        :return: The characteristics of this TradeItemRequest.  # noqa: E501
        :rtype: list[Characteristic]
        """
        return self._characteristics

    @characteristics.setter
    def characteristics(self, characteristics):
        """Sets the characteristics of this TradeItemRequest.


        :param characteristics: The characteristics of this TradeItemRequest.  # noqa: E501
        :type: list[Characteristic]
        """
        if characteristics is None:
            raise ValueError("Invalid value for `characteristics`, must not be `None`")  # noqa: E501

        self._characteristics = characteristics

    @property
    def expires_at_date_time(self):
        """Gets the expires_at_date_time of this TradeItemRequest.  # noqa: E501


        :return: The expires_at_date_time of this TradeItemRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._expires_at_date_time

    @expires_at_date_time.setter
    def expires_at_date_time(self, expires_at_date_time):
        """Sets the expires_at_date_time of this TradeItemRequest.


        :param expires_at_date_time: The expires_at_date_time of this TradeItemRequest.  # noqa: E501
        :type: datetime
        """
        if expires_at_date_time is None:
            raise ValueError("Invalid value for `expires_at_date_time`, must not be `None`")  # noqa: E501

        self._expires_at_date_time = expires_at_date_time

    @property
    def creation_date_time(self):
        """Gets the creation_date_time of this TradeItemRequest.  # noqa: E501


        :return: The creation_date_time of this TradeItemRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date_time

    @creation_date_time.setter
    def creation_date_time(self, creation_date_time):
        """Sets the creation_date_time of this TradeItemRequest.


        :param creation_date_time: The creation_date_time of this TradeItemRequest.  # noqa: E501
        :type: datetime
        """
        if creation_date_time is None:
            raise ValueError("Invalid value for `creation_date_time`, must not be `None`")  # noqa: E501

        self._creation_date_time = creation_date_time

    @property
    def last_modified_date_time(self):
        """Gets the last_modified_date_time of this TradeItemRequest.  # noqa: E501


        :return: The last_modified_date_time of this TradeItemRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_date_time

    @last_modified_date_time.setter
    def last_modified_date_time(self, last_modified_date_time):
        """Sets the last_modified_date_time of this TradeItemRequest.


        :param last_modified_date_time: The last_modified_date_time of this TradeItemRequest.  # noqa: E501
        :type: datetime
        """
        if last_modified_date_time is None:
            raise ValueError("Invalid value for `last_modified_date_time`, must not be `None`")  # noqa: E501

        self._last_modified_date_time = last_modified_date_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TradeItemRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TradeItemRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
