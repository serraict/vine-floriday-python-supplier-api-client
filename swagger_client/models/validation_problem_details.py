# coding: utf-8

"""
    Main - Floriday Suppliers API

    ÔªøEvery endpoint requires at least the `role:app` scope and the header `X-Api-Key` populated with your given API-key. Most endpoints also require an additional scope which is listed in their descriptions.  - üóù [Authorization server (staging)](https://idm.staging.floriday.io/oauth2/ausmw6b47z1BnlHkw0h7/.well-known/oauth-authorization-server) - üóù [Authorization server (live)](https://idm.floriday.io/oauth2/aus3testdcf2vyfs70i7/.well-known/oauth-authorization-server) - üìö [Documentation](https://developer.floriday.io/docs/welcome) - ‚ñ∂ [Coding screencast: getting started (NL)](https://www.youtube.com/watch?v=fdqzP7_Y_s8)  ---  _The current state of this version 2024v1 is **Main**._ * This version will be deprecated after October 2024. * This version will be removed after April 2025.  ---  üîó 2023v2: [Customers API](https://api.staging.floriday.io/customers-api-2023v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2023v2/swagger/index.html) üîó 2024v1: [Customers API](https://api.staging.floriday.io/customers-api-2024v1/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v1/swagger/index.html) üîó 2024v2: [Customers API](https://api.staging.floriday.io/customers-api-2024v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v2/swagger/index.html)   # noqa: E501

    OpenAPI spec version: 2024v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ValidationProblemDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'title': 'str',
        'detail': 'str',
        'status': 'int',
        'errors': 'dict(str, list[str])',
        'domain_error_code': 'str'
    }

    attribute_map = {
        'type': 'type',
        'title': 'title',
        'detail': 'detail',
        'status': 'status',
        'errors': 'errors',
        'domain_error_code': 'domainErrorCode'
    }

    def __init__(self, type=None, title=None, detail=None, status=None, errors=None, domain_error_code=None):  # noqa: E501
        """ValidationProblemDetails - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._title = None
        self._detail = None
        self._status = None
        self._errors = None
        self._domain_error_code = None
        self.discriminator = None
        if type is not None:
            self.type = type
        self.title = title
        if detail is not None:
            self.detail = detail
        self.status = status
        if errors is not None:
            self.errors = errors
        if domain_error_code is not None:
            self.domain_error_code = domain_error_code

    @property
    def type(self):
        """Gets the type of this ValidationProblemDetails.  # noqa: E501

        Contains an URI linking to the documentation referencing the domain error code  # noqa: E501

        :return: The type of this ValidationProblemDetails.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ValidationProblemDetails.

        Contains an URI linking to the documentation referencing the domain error code  # noqa: E501

        :param type: The type of this ValidationProblemDetails.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def title(self):
        """Gets the title of this ValidationProblemDetails.  # noqa: E501

        Contains the general description based of the domain error code  # noqa: E501

        :return: The title of this ValidationProblemDetails.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ValidationProblemDetails.

        Contains the general description based of the domain error code  # noqa: E501

        :param title: The title of this ValidationProblemDetails.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def detail(self):
        """Gets the detail of this ValidationProblemDetails.  # noqa: E501

        Contains the error message that occurred in the service  # noqa: E501

        :return: The detail of this ValidationProblemDetails.  # noqa: E501
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this ValidationProblemDetails.

        Contains the error message that occurred in the service  # noqa: E501

        :param detail: The detail of this ValidationProblemDetails.  # noqa: E501
        :type: str
        """

        self._detail = detail

    @property
    def status(self):
        """Gets the status of this ValidationProblemDetails.  # noqa: E501


        :return: The status of this ValidationProblemDetails.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ValidationProblemDetails.


        :param status: The status of this ValidationProblemDetails.  # noqa: E501
        :type: int
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def errors(self):
        """Gets the errors of this ValidationProblemDetails.  # noqa: E501

        Contains validation errors when incorrect values are used in the body  # noqa: E501

        :return: The errors of this ValidationProblemDetails.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this ValidationProblemDetails.

        Contains validation errors when incorrect values are used in the body  # noqa: E501

        :param errors: The errors of this ValidationProblemDetails.  # noqa: E501
        :type: dict(str, list[str])
        """

        self._errors = errors

    @property
    def domain_error_code(self):
        """Gets the domain_error_code of this ValidationProblemDetails.  # noqa: E501

        Contains an alphabetical code referring to the thrown error  # noqa: E501

        :return: The domain_error_code of this ValidationProblemDetails.  # noqa: E501
        :rtype: str
        """
        return self._domain_error_code

    @domain_error_code.setter
    def domain_error_code(self, domain_error_code):
        """Sets the domain_error_code of this ValidationProblemDetails.

        Contains an alphabetical code referring to the thrown error  # noqa: E501

        :param domain_error_code: The domain_error_code of this ValidationProblemDetails.  # noqa: E501
        :type: str
        """

        self._domain_error_code = domain_error_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ValidationProblemDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ValidationProblemDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
