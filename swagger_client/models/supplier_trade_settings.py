# coding: utf-8

"""
    Main - Floriday Suppliers API

    ÔªøEvery endpoint requires at least the `role:app` scope and the header `X-Api-Key` populated with your given API-key. Most endpoints also require an additional scope which is listed in their descriptions.  - üóù [Authorization server (staging)](https://idm.staging.floriday.io/oauth2/ausmw6b47z1BnlHkw0h7/.well-known/oauth-authorization-server) - üóù [Authorization server (live)](https://idm.floriday.io/oauth2/aus3testdcf2vyfs70i7/.well-known/oauth-authorization-server) - üìö [Documentation](https://developer.floriday.io/docs/welcome) - ‚ñ∂ [Coding screencast: getting started (NL)](https://www.youtube.com/watch?v=fdqzP7_Y_s8)  ---  _The current state of this version 2024v1 is **Main**._ * This version will be deprecated after October 2024. * This version will be removed after April 2025.  ---  üîó 2023v2: [Customers API](https://api.staging.floriday.io/customers-api-2023v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2023v2/swagger/index.html) üîó 2024v1: [Customers API](https://api.staging.floriday.io/customers-api-2024v1/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v1/swagger/index.html) üîó 2024v2: [Customers API](https://api.staging.floriday.io/customers-api-2024v2/swagger/index.html) | [Suppliers API](https://api.staging.floriday.io/suppliers-api-2024v2/swagger/index.html)   # noqa: E501

    OpenAPI spec version: 2024v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SupplierTradeSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'supplier_organization_id': 'str',
        'automatically_accepts_correction_requests': 'AllOfSupplierTradeSettingsAutomaticallyAcceptsCorrectionRequests',
        'uses_cancellation_grace_period_if_minimum_quantity_is_not_met': 'AllOfSupplierTradeSettingsUsesCancellationGracePeriodIfMinimumQuantityIsNotMet',
        'uses_contracts': 'AllOfSupplierTradeSettingsUsesContracts',
        'uses_customer_stickers': 'AllOfSupplierTradeSettingsUsesCustomerStickers',
        'accepts_order_requests': 'AllOfSupplierTradeSettingsAcceptsOrderRequests',
        'accepts_supply_requests': 'AllOfSupplierTradeSettingsAcceptsSupplyRequests',
        'accepts_trade_item_requests': 'AllOfSupplierTradeSettingsAcceptsTradeItemRequests',
        'accepts_packing_configuration_requests': 'AllOfSupplierTradeSettingsAcceptsPackingConfigurationRequests'
    }

    attribute_map = {
        'supplier_organization_id': 'supplierOrganizationId',
        'automatically_accepts_correction_requests': 'automaticallyAcceptsCorrectionRequests',
        'uses_cancellation_grace_period_if_minimum_quantity_is_not_met': 'usesCancellationGracePeriodIfMinimumQuantityIsNotMet',
        'uses_contracts': 'usesContracts',
        'uses_customer_stickers': 'usesCustomerStickers',
        'accepts_order_requests': 'acceptsOrderRequests',
        'accepts_supply_requests': 'acceptsSupplyRequests',
        'accepts_trade_item_requests': 'acceptsTradeItemRequests',
        'accepts_packing_configuration_requests': 'acceptsPackingConfigurationRequests'
    }

    def __init__(self, supplier_organization_id=None, automatically_accepts_correction_requests=None, uses_cancellation_grace_period_if_minimum_quantity_is_not_met=None, uses_contracts=None, uses_customer_stickers=None, accepts_order_requests=None, accepts_supply_requests=None, accepts_trade_item_requests=None, accepts_packing_configuration_requests=None):  # noqa: E501
        """SupplierTradeSettings - a model defined in Swagger"""  # noqa: E501
        self._supplier_organization_id = None
        self._automatically_accepts_correction_requests = None
        self._uses_cancellation_grace_period_if_minimum_quantity_is_not_met = None
        self._uses_contracts = None
        self._uses_customer_stickers = None
        self._accepts_order_requests = None
        self._accepts_supply_requests = None
        self._accepts_trade_item_requests = None
        self._accepts_packing_configuration_requests = None
        self.discriminator = None
        self.supplier_organization_id = supplier_organization_id
        self.automatically_accepts_correction_requests = automatically_accepts_correction_requests
        self.uses_cancellation_grace_period_if_minimum_quantity_is_not_met = uses_cancellation_grace_period_if_minimum_quantity_is_not_met
        self.uses_contracts = uses_contracts
        self.uses_customer_stickers = uses_customer_stickers
        self.accepts_order_requests = accepts_order_requests
        self.accepts_supply_requests = accepts_supply_requests
        self.accepts_trade_item_requests = accepts_trade_item_requests
        self.accepts_packing_configuration_requests = accepts_packing_configuration_requests

    @property
    def supplier_organization_id(self):
        """Gets the supplier_organization_id of this SupplierTradeSettings.  # noqa: E501


        :return: The supplier_organization_id of this SupplierTradeSettings.  # noqa: E501
        :rtype: str
        """
        return self._supplier_organization_id

    @supplier_organization_id.setter
    def supplier_organization_id(self, supplier_organization_id):
        """Sets the supplier_organization_id of this SupplierTradeSettings.


        :param supplier_organization_id: The supplier_organization_id of this SupplierTradeSettings.  # noqa: E501
        :type: str
        """
        if supplier_organization_id is None:
            raise ValueError("Invalid value for `supplier_organization_id`, must not be `None`")  # noqa: E501

        self._supplier_organization_id = supplier_organization_id

    @property
    def automatically_accepts_correction_requests(self):
        """Gets the automatically_accepts_correction_requests of this SupplierTradeSettings.  # noqa: E501

        With this you set that corrections requested by customers are automatically accepted.  # noqa: E501

        :return: The automatically_accepts_correction_requests of this SupplierTradeSettings.  # noqa: E501
        :rtype: AllOfSupplierTradeSettingsAutomaticallyAcceptsCorrectionRequests
        """
        return self._automatically_accepts_correction_requests

    @automatically_accepts_correction_requests.setter
    def automatically_accepts_correction_requests(self, automatically_accepts_correction_requests):
        """Sets the automatically_accepts_correction_requests of this SupplierTradeSettings.

        With this you set that corrections requested by customers are automatically accepted.  # noqa: E501

        :param automatically_accepts_correction_requests: The automatically_accepts_correction_requests of this SupplierTradeSettings.  # noqa: E501
        :type: AllOfSupplierTradeSettingsAutomaticallyAcceptsCorrectionRequests
        """
        if automatically_accepts_correction_requests is None:
            raise ValueError("Invalid value for `automatically_accepts_correction_requests`, must not be `None`")  # noqa: E501

        self._automatically_accepts_correction_requests = automatically_accepts_correction_requests

    @property
    def uses_cancellation_grace_period_if_minimum_quantity_is_not_met(self):
        """Gets the uses_cancellation_grace_period_if_minimum_quantity_is_not_met of this SupplierTradeSettings.  # noqa: E501

        Orders that do not meet the minimum delivery quantity are automatically canceled. If the setting is off, these orders can be manually approved for another hour after the last order moment.  # noqa: E501

        :return: The uses_cancellation_grace_period_if_minimum_quantity_is_not_met of this SupplierTradeSettings.  # noqa: E501
        :rtype: AllOfSupplierTradeSettingsUsesCancellationGracePeriodIfMinimumQuantityIsNotMet
        """
        return self._uses_cancellation_grace_period_if_minimum_quantity_is_not_met

    @uses_cancellation_grace_period_if_minimum_quantity_is_not_met.setter
    def uses_cancellation_grace_period_if_minimum_quantity_is_not_met(self, uses_cancellation_grace_period_if_minimum_quantity_is_not_met):
        """Sets the uses_cancellation_grace_period_if_minimum_quantity_is_not_met of this SupplierTradeSettings.

        Orders that do not meet the minimum delivery quantity are automatically canceled. If the setting is off, these orders can be manually approved for another hour after the last order moment.  # noqa: E501

        :param uses_cancellation_grace_period_if_minimum_quantity_is_not_met: The uses_cancellation_grace_period_if_minimum_quantity_is_not_met of this SupplierTradeSettings.  # noqa: E501
        :type: AllOfSupplierTradeSettingsUsesCancellationGracePeriodIfMinimumQuantityIsNotMet
        """
        if uses_cancellation_grace_period_if_minimum_quantity_is_not_met is None:
            raise ValueError("Invalid value for `uses_cancellation_grace_period_if_minimum_quantity_is_not_met`, must not be `None`")  # noqa: E501

        self._uses_cancellation_grace_period_if_minimum_quantity_is_not_met = uses_cancellation_grace_period_if_minimum_quantity_is_not_met

    @property
    def uses_contracts(self):
        """Gets the uses_contracts of this SupplierTradeSettings.  # noqa: E501

        Organization works with contracts.  # noqa: E501

        :return: The uses_contracts of this SupplierTradeSettings.  # noqa: E501
        :rtype: AllOfSupplierTradeSettingsUsesContracts
        """
        return self._uses_contracts

    @uses_contracts.setter
    def uses_contracts(self, uses_contracts):
        """Sets the uses_contracts of this SupplierTradeSettings.

        Organization works with contracts.  # noqa: E501

        :param uses_contracts: The uses_contracts of this SupplierTradeSettings.  # noqa: E501
        :type: AllOfSupplierTradeSettingsUsesContracts
        """
        if uses_contracts is None:
            raise ValueError("Invalid value for `uses_contracts`, must not be `None`")  # noqa: E501

        self._uses_contracts = uses_contracts

    @property
    def uses_customer_stickers(self):
        """Gets the uses_customer_stickers of this SupplierTradeSettings.  # noqa: E501

        Organization works with stickers.  # noqa: E501

        :return: The uses_customer_stickers of this SupplierTradeSettings.  # noqa: E501
        :rtype: AllOfSupplierTradeSettingsUsesCustomerStickers
        """
        return self._uses_customer_stickers

    @uses_customer_stickers.setter
    def uses_customer_stickers(self, uses_customer_stickers):
        """Sets the uses_customer_stickers of this SupplierTradeSettings.

        Organization works with stickers.  # noqa: E501

        :param uses_customer_stickers: The uses_customer_stickers of this SupplierTradeSettings.  # noqa: E501
        :type: AllOfSupplierTradeSettingsUsesCustomerStickers
        """
        if uses_customer_stickers is None:
            raise ValueError("Invalid value for `uses_customer_stickers`, must not be `None`")  # noqa: E501

        self._uses_customer_stickers = uses_customer_stickers

    @property
    def accepts_order_requests(self):
        """Gets the accepts_order_requests of this SupplierTradeSettings.  # noqa: E501

        Receive order requests from customers.  # noqa: E501

        :return: The accepts_order_requests of this SupplierTradeSettings.  # noqa: E501
        :rtype: AllOfSupplierTradeSettingsAcceptsOrderRequests
        """
        return self._accepts_order_requests

    @accepts_order_requests.setter
    def accepts_order_requests(self, accepts_order_requests):
        """Sets the accepts_order_requests of this SupplierTradeSettings.

        Receive order requests from customers.  # noqa: E501

        :param accepts_order_requests: The accepts_order_requests of this SupplierTradeSettings.  # noqa: E501
        :type: AllOfSupplierTradeSettingsAcceptsOrderRequests
        """
        if accepts_order_requests is None:
            raise ValueError("Invalid value for `accepts_order_requests`, must not be `None`")  # noqa: E501

        self._accepts_order_requests = accepts_order_requests

    @property
    def accepts_supply_requests(self):
        """Gets the accepts_supply_requests of this SupplierTradeSettings.  # noqa: E501

        Organization works with supply requests.  # noqa: E501

        :return: The accepts_supply_requests of this SupplierTradeSettings.  # noqa: E501
        :rtype: AllOfSupplierTradeSettingsAcceptsSupplyRequests
        """
        return self._accepts_supply_requests

    @accepts_supply_requests.setter
    def accepts_supply_requests(self, accepts_supply_requests):
        """Sets the accepts_supply_requests of this SupplierTradeSettings.

        Organization works with supply requests.  # noqa: E501

        :param accepts_supply_requests: The accepts_supply_requests of this SupplierTradeSettings.  # noqa: E501
        :type: AllOfSupplierTradeSettingsAcceptsSupplyRequests
        """
        if accepts_supply_requests is None:
            raise ValueError("Invalid value for `accepts_supply_requests`, must not be `None`")  # noqa: E501

        self._accepts_supply_requests = accepts_supply_requests

    @property
    def accepts_trade_item_requests(self):
        """Gets the accepts_trade_item_requests of this SupplierTradeSettings.  # noqa: E501

        Organization works with trade item requests.  # noqa: E501

        :return: The accepts_trade_item_requests of this SupplierTradeSettings.  # noqa: E501
        :rtype: AllOfSupplierTradeSettingsAcceptsTradeItemRequests
        """
        return self._accepts_trade_item_requests

    @accepts_trade_item_requests.setter
    def accepts_trade_item_requests(self, accepts_trade_item_requests):
        """Sets the accepts_trade_item_requests of this SupplierTradeSettings.

        Organization works with trade item requests.  # noqa: E501

        :param accepts_trade_item_requests: The accepts_trade_item_requests of this SupplierTradeSettings.  # noqa: E501
        :type: AllOfSupplierTradeSettingsAcceptsTradeItemRequests
        """
        if accepts_trade_item_requests is None:
            raise ValueError("Invalid value for `accepts_trade_item_requests`, must not be `None`")  # noqa: E501

        self._accepts_trade_item_requests = accepts_trade_item_requests

    @property
    def accepts_packing_configuration_requests(self):
        """Gets the accepts_packing_configuration_requests of this SupplierTradeSettings.  # noqa: E501

        Organization works with packing configuration requests.  # noqa: E501

        :return: The accepts_packing_configuration_requests of this SupplierTradeSettings.  # noqa: E501
        :rtype: AllOfSupplierTradeSettingsAcceptsPackingConfigurationRequests
        """
        return self._accepts_packing_configuration_requests

    @accepts_packing_configuration_requests.setter
    def accepts_packing_configuration_requests(self, accepts_packing_configuration_requests):
        """Sets the accepts_packing_configuration_requests of this SupplierTradeSettings.

        Organization works with packing configuration requests.  # noqa: E501

        :param accepts_packing_configuration_requests: The accepts_packing_configuration_requests of this SupplierTradeSettings.  # noqa: E501
        :type: AllOfSupplierTradeSettingsAcceptsPackingConfigurationRequests
        """
        if accepts_packing_configuration_requests is None:
            raise ValueError("Invalid value for `accepts_packing_configuration_requests`, must not be `None`")  # noqa: E501

        self._accepts_packing_configuration_requests = accepts_packing_configuration_requests

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SupplierTradeSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupplierTradeSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
